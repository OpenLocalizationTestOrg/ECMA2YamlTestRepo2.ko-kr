### YamlMime:ManagedReference
items:
- uid: System.IO.UnmanagedMemoryAccessor
  id: UnmanagedMemoryAccessor
  children:
  - System.IO.UnmanagedMemoryAccessor.#ctor
  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryAccessor.CanRead
  - System.IO.UnmanagedMemoryAccessor.CanWrite
  - System.IO.UnmanagedMemoryAccessor.Capacity
  - System.IO.UnmanagedMemoryAccessor.Dispose
  - System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  - System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryAccessor.IsOpen
  - System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  - System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  - System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  - System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  langs:
  - csharp
  name: UnmanagedMemoryAccessor
  nameWithType: UnmanagedMemoryAccessor
  fullName: System.IO.UnmanagedMemoryAccessor
  type: Class
  summary: "관리 코드에서 관리 되지 않는 메모리 블록에 대 한 임의 액세스를 제공합니다."
  remarks: "<xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A>의 메서드는 <xref:System.IO.MemoryMappedFiles.MemoryMappedFile>메모리 매핑된 파일의 뷰로 구성 된 작업에 대 한 메모리의 관리 되지 않는 블록을 반환 하는 개체입니다.</xref:System.IO.MemoryMappedFiles.MemoryMappedFile> </xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A>      > [!IMPORTANT] >이 형식이 구현 하는 <xref:System.IDisposable>인터페이스.</xref:System.IDisposable> 형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다. 직접 형식의 삭제 하려면 해당 <xref:System.IDisposable.Dispose%2A>에서 메서드는 `try` / `catch` 블록.</xref:System.IDisposable.Dispose%2A> 작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다. 자세한 내용은의 &quot;를 사용 하는 개체는 구현 IDisposable&quot; 섹션을 참조 하십시오.는 <xref:System.IDisposable>인터페이스 항목.</xref:System.IDisposable>"
  syntax:
    content: 'public class UnmanagedMemoryAccessor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.#ctor
  id: '#ctor'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor()
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;> </xref> 클래스입니다."
  syntax:
    content: protected UnmanagedMemoryAccessor ();
    parameters: []
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;> </xref> 지정 된 버퍼, 오프셋 및 용량을 사용 하 여 클래스입니다."
  syntax:
    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "접근자가 포함 될 버퍼입니다."
    - id: offset
      type: System.Int64
      description: "시작할 접근자의 바이트 수입니다."
    - id: capacity
      type: System.Int64
      description: "할당할 메모리의 바이트 크기입니다."
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>plus <code>capacity</code> 보다 크면 <code>buffer</code>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>capacity</code> 가&0; 보다 작습니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>offset</code>plus <code>capacity</code> 주소 공간의 끝 줄 바꿈 합니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;> </xref> 된 지정 된 버퍼, 오프셋, 용량 및 액세스 권한을 합니다."
  syntax:
    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "접근자가 포함 될 버퍼입니다."
    - id: offset
      type: System.Int64
      description: "시작할 접근자의 바이트 수입니다."
    - id: capacity
      type: System.Int64
      description: "할당할 메모리의 바이트 크기입니다."
    - id: access
      type: System.IO.FileAccess
      description: "메모리에 허용 되는 액세스 형식입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>plus <code>capacity</code> 보다 크면 <code>buffer</code>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>capacity</code> 가&0; 보다 작습니다.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>offset</code>plus <code>capacity</code> 주소 공간의 끝 줄 바꿈 합니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.CanRead
  id: CanRead
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
  fullName: System.IO.UnmanagedMemoryAccessor.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자가 읽을 수 있는지 여부를 결정 합니다."
  syntax:
    content: public bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>접근자가 읽을 수 있으면 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.UnmanagedMemoryAccessor.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite
  id: CanWrite
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
  fullName: System.IO.UnmanagedMemoryAccessor.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자가 쓸 수 있는지 여부를 결정 합니다."
  syntax:
    content: public bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>접근자가 쓸 수 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.UnmanagedMemoryAccessor.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Capacity
  id: Capacity
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
  fullName: System.IO.UnmanagedMemoryAccessor.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자의 용량을 가져옵니다."
  syntax:
    content: public long Capacity { get; }
    return:
      type: System.Int64
      description: "접근자의 용량입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Capacity*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Dispose
  id: Dispose
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Dispose()
  nameWithType: UnmanagedMemoryAccessor.Dispose()
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "사용 하는 모든 리소스를 해제는 <xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;> </xref>합니다."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.UnmanagedMemoryAccessor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public `Dispose()`메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> `Dispose()`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.IO.UnmanagedMemoryAccessor>참조.</xref:System.IO.UnmanagedMemoryAccessor> 이 메서드 호출에서 `Dispose()` 각 참조 된 개체의 메서드."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.IO.UnmanagedMemoryAccessor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 대 한 초기 값을 설정 합니다."
  remarks: "이 메서드는이 클래스에 대 한 생성자에 의해 호출 됩니다."
  syntax:
    content: protected void Initialize (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "접근자가 포함 될 버퍼입니다."
    - id: offset
      type: System.Int64
      description: "시작할 접근자의 바이트 수입니다."
    - id: capacity
      type: System.Int64
      description: "할당할 메모리의 바이트 크기입니다."
    - id: access
      type: System.IO.FileAccess
      description: "메모리에 허용 되는 액세스 형식입니다. 기본값은 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>합니다."
  overload: System.IO.UnmanagedMemoryAccessor.Initialize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>plus <code>capacity</code> 보다 크면 <code>buffer</code>합니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>또는 <code>capacity</code> 가&0; 보다 작습니다.       -또는- <code>access</code> 유효 하지 않거나 <xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref> 열거형 값입니다."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>offset</code>plus <code>capacity</code> 주소 공간의 끝 줄 바꿈 합니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen
  id: IsOpen
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
  fullName: System.IO.UnmanagedMemoryAccessor.IsOpen
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자가 프로세스에 의해 현재 열려 있는지 여부를 결정 합니다."
  syntax:
    content: protected bool IsOpen { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>접근자가 열려 있으면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IO.UnmanagedMemoryAccessor.IsOpen*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  id: Read``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Read(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Read(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Read(Int64,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public void Read<T> (long position, out T structure) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "추가할 수 있습니다."
    - id: structure
      type: T
      description: "추가할 수 있습니다."
  overload: System.IO.UnmanagedMemoryAccessor.Read<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  id: ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public int ReadArray<T> (long position, T[] array, int offset, int count) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "추가할 수 있습니다."
    - id: array
      type: T[]
      description: "추가할 수 있습니다."
    - id: offset
      type: System.Int32
      description: "추가할 수 있습니다."
    - id: count
      type: System.Int32
      description: "추가할 수 있습니다."
    return:
      type: System.Int32
      description: "추가할 수 있습니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadArray<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  id: ReadBoolean(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadBoolean(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadBoolean(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 부울 값을 읽습니다."
  syntax:
    content: public bool ReadBoolean (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.UnmanagedMemoryAccessor.ReadBoolean*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  id: ReadByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadByte(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 바이트 값을 읽습니다."
  syntax:
    content: public byte ReadByte (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Byte
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  id: ReadChar(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadChar(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadChar(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 문자를 읽습니다."
  syntax:
    content: public char ReadChar (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Char
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  id: ReadDecimal(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadDecimal(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDecimal(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서&10; 진수 값을 읽습니다."
  syntax:
    content: public decimal ReadDecimal (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Decimal
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadDecimal*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다.       -또는-읽을 십진수 올바르지 않습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  id: ReadDouble(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadDouble(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDouble(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 배정밀도 부동 소수점 값을 읽습니다."
  syntax:
    content: public double ReadDouble (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Double
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadDouble*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  id: ReadInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt16(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 16 비트 정수를 읽습니다."
  syntax:
    content: public short ReadInt16 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Int16
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  id: ReadInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt32(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 32 비트 정수를 읽습니다."
  syntax:
    content: public int ReadInt32 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Int32
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  id: ReadInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt64(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 64 비트 정수를 읽습니다."
  syntax:
    content: public long ReadInt64 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Int64
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  id: ReadSByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadSByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSByte(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 부호 있는 8 비트 정수를 읽습니다."
  syntax:
    content: public sbyte ReadSByte (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.SByte
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadSByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  id: ReadSingle(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadSingle(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSingle(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 단 정밀도 부동 소수점 값을 읽습니다."
  syntax:
    content: public float ReadSingle (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.Single
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadSingle*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  id: ReadUInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt16(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 부호 없는 16 비트 정수를 읽습니다."
  syntax:
    content: public ushort ReadUInt16 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.UInt16
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  id: ReadUInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt32(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 부호 없는 32 비트 정수를 읽습니다."
  syntax:
    content: public uint ReadUInt32 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.UInt32
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  id: ReadUInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt64(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에서 부호 없는 64 비트 정수를 읽습니다."
  syntax:
    content: public ulong ReadUInt64 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "읽기를 시작할 접근자의 바이트 수입니다."
    return:
      type: System.UInt64
      description: "읽은 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 읽습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 읽기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  id: Write(System.Int64,System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Boolean)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 부울 값을 씁니다."
  syntax:
    content: public void Write (long position, bool value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Boolean
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  id: Write(System.Int64,System.Byte)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Byte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Byte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 바이트 값을 씁니다."
  syntax:
    content: public void Write (long position, byte value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Byte
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  id: Write(System.Int64,System.Char)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Char)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Char)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 문자를 씁니다."
  syntax:
    content: public void Write (long position, char value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Char
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  id: Write(System.Int64,System.Decimal)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Decimal)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Decimal)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에&10; 진수 값을 씁니다."
  syntax:
    content: public void Write (long position, decimal value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Decimal
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다.       -또는-소수점 올바르지 않습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  id: Write(System.Int64,System.Double)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Double)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Double)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "작성 한 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> 접근자에는 값입니다."
  syntax:
    content: public void Write (long position, double value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Double
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  id: Write(System.Int64,System.Int16)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Int16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 16 비트 정수를 씁니다."
  syntax:
    content: public void Write (long position, short value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Int16
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  id: Write(System.Int64,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Int32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 32 비트 정수를 씁니다."
  syntax:
    content: public void Write (long position, int value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Int32
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  id: Write(System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 64 비트 정수를 씁니다."
  syntax:
    content: public void Write (long position, long value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Int64
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "값을 쓸 수 있는 위치 다음 바이트가 부족 합니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  id: Write(System.Int64,System.SByte)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,SByte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,SByte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 8 비트 정수를 씁니다."
  syntax:
    content: public void Write (long position, sbyte value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.SByte
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  id: Write(System.Int64,System.Single)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Single)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Single)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "작성 한 <xref uid=&quot;langword_csharp_Single&quot; name=&quot;Single&quot; href=&quot;&quot;> </xref> 접근자에 있습니다."
  syntax:
    content: public void Write (long position, float value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.Single
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  id: Write(System.Int64,System.UInt16)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,UInt16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 부호 없는 16 비트 정수를 씁니다."
  syntax:
    content: public void Write (long position, ushort value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.UInt16
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  id: Write(System.Int64,System.UInt32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,UInt32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 부호 없는 32 비트 정수를 씁니다."
  syntax:
    content: public void Write (long position, uint value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.UInt32
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  id: Write(System.Int64,System.UInt64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,UInt64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "접근자에 부호 없는 64 비트 정수를 씁니다."
  syntax:
    content: public void Write (long position, ulong value);
    parameters:
    - id: position
      type: System.Int64
      description: "쓰기를 시작할 접근자의 바이트 수입니다."
    - id: value
      type: System.UInt64
      description: "작성할 값입니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "다음 바이트가 충분 한 <code> position </code> 값을 쓸 수 있습니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>가&0; 보다 작거나 접근자의 용량 보다 큽니다."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "접근자에서 쓰기를 지원 하지 않습니다."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "접근자가 삭제 되었습니다."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  id: Write``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public void Write<T> (long position, ref T structure) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "추가할 수 있습니다."
    - id: structure
      type: T
      description: "추가할 수 있습니다."
  overload: System.IO.UnmanagedMemoryAccessor.Write<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  id: WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: WriteArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public void WriteArray<T> (long position, T[] array, int offset, int count) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "추가할 수 있습니다."
    - id: array
      type: T[]
      description: "추가할 수 있습니다."
    - id: offset
      type: System.Int32
      description: "추가할 수 있습니다."
    - id: count
      type: System.Int32
      description: "추가할 수 있습니다."
  overload: System.IO.UnmanagedMemoryAccessor.WriteArray<T>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.UnmanagedMemoryAccessor.#ctor
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor()
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
- uid: System.Runtime.InteropServices.SafeBuffer
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.UnmanagedMemoryAccessor.CanRead
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
  fullName: System.IO.UnmanagedMemoryAccessor.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
  fullName: System.IO.UnmanagedMemoryAccessor.CanWrite
- uid: System.IO.UnmanagedMemoryAccessor.Capacity
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
  fullName: System.IO.UnmanagedMemoryAccessor.Capacity
- uid: System.IO.UnmanagedMemoryAccessor.Dispose
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose()
  nameWithType: UnmanagedMemoryAccessor.Dispose()
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose()
- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose(Boolean)
- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
  fullName: System.IO.UnmanagedMemoryAccessor.IsOpen
- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Read(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Read(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Read(Int64,T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadBoolean(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadBoolean(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadByte(Int64)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadChar(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadChar(Int64)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDecimal(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDecimal(Int64)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDouble(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDouble(Int64)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt16(Int64)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt32(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt64(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSByte(Int64)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSingle(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSingle(Int64)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt16(Int64)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt32(Int64)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt64(Int64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Boolean)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Boolean)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Byte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Byte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Byte)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Char)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Char)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Char)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Decimal)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Decimal)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Decimal)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Double)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Double)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Double)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Int16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int16)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Int32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int32)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int64)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,SByte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,SByte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,SByte)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Single)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Single)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Single)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,UInt16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt16)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,UInt32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt32)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,UInt64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt64)
- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,T)
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: WriteArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
- uid: System.IO.UnmanagedMemoryAccessor.#ctor*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor
- uid: System.IO.UnmanagedMemoryAccessor.CanRead*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
- uid: System.IO.UnmanagedMemoryAccessor.Capacity*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
- uid: System.IO.UnmanagedMemoryAccessor.Dispose*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose
  nameWithType: UnmanagedMemoryAccessor.Dispose
- uid: System.IO.UnmanagedMemoryAccessor.Initialize*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Initialize
  nameWithType: UnmanagedMemoryAccessor.Initialize
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
- uid: System.IO.UnmanagedMemoryAccessor.Read<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Read<T>
  nameWithType: UnmanagedMemoryAccessor.Read<T>
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadArray<T>
  nameWithType: UnmanagedMemoryAccessor.ReadArray<T>
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadBoolean
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadByte
  nameWithType: UnmanagedMemoryAccessor.ReadByte
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadChar
  nameWithType: UnmanagedMemoryAccessor.ReadChar
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDecimal
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDouble
  nameWithType: UnmanagedMemoryAccessor.ReadDouble
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt16
  nameWithType: UnmanagedMemoryAccessor.ReadInt16
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt32
  nameWithType: UnmanagedMemoryAccessor.ReadInt32
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt64
  nameWithType: UnmanagedMemoryAccessor.ReadInt64
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSByte
  nameWithType: UnmanagedMemoryAccessor.ReadSByte
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSingle
  nameWithType: UnmanagedMemoryAccessor.ReadSingle
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt16
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt32
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt64
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64
- uid: System.IO.UnmanagedMemoryAccessor.Write*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write
  nameWithType: UnmanagedMemoryAccessor.Write
- uid: System.IO.UnmanagedMemoryAccessor.Write<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write<T>
  nameWithType: UnmanagedMemoryAccessor.Write<T>
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: WriteArray<T>
  nameWithType: UnmanagedMemoryAccessor.WriteArray<T>
