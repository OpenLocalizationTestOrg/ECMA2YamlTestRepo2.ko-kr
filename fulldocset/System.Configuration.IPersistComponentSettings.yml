### YamlMime:ManagedReference
items:
- uid: System.Configuration.IPersistComponentSettings
  id: IPersistComponentSettings
  children:
  - System.Configuration.IPersistComponentSettings.LoadComponentSettings
  - System.Configuration.IPersistComponentSettings.ResetComponentSettings
  - System.Configuration.IPersistComponentSettings.SaveComponentSettings
  - System.Configuration.IPersistComponentSettings.SaveSettings
  - System.Configuration.IPersistComponentSettings.SettingsKey
  langs:
  - csharp
  name: IPersistComponentSettings
  nameWithType: IPersistComponentSettings
  fullName: System.Configuration.IPersistComponentSettings
  type: Interface
  summary: "컨트롤 또는 저장 하 고 응용 프로그램 설정을 검색 하는 라이브러리를 위한 표준 기능을 정의 합니다."
  remarks: "파생 되는 설정 래퍼 클래스를 만들어 응용 프로그램에 응용 프로그램 설정 지원을 추가할 수는 일반적으로 <xref:System.Configuration.ApplicationSettingsBase>, 다음 특수 속성이이 클래스에 추가</xref:System.Configuration.ApplicationSettingsBase> 그러나이 방법은 충분히 캡슐화 하지 못합니다 컨트롤에 대 한 응용 프로그램 설정 세부 정보에서 해당 컨테이너 실드 되어 있도록 합니다. IPersistComponentSettings 인터페이스 컨트롤, 구성 요소, 또는 라이브러리 모듈에 응용 프로그램 설정 상태 변경 요청을 통신 하기 위한 표준 인터페이스와 응용 프로그램을 제공 합니다. 또한 디자인 타임 도구 컨트롤 및 구성 요소를 제대로 관리 하려면이 인터페이스에 따라 달라 집니다."
  syntax:
    content: public interface IPersistComponentSettings
  implements: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings
  id: LoadComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: LoadComponentSettings()
  nameWithType: IPersistComponentSettings.LoadComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "해당 속성으로 컨트롤의 응용 프로그램 설정을 읽고 컨트롤의 상태를 업데이트 합니다."
  remarks: "LoadComponentSettings 메서드 두 가지 필수 작업을 수행 하는 일반적으로:-를 호출 하 여 해당 응용 프로그램 설정 속성의 값을 일반적으로 새로 고치려면 컨트롤에 포함 된 각 응용 프로그램 설정 인스턴스를 수행 하는 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A>메서드.</xref:System.Configuration.ApplicationSettingsBase.Reload%2A>      -을 필요한 대로 속성을 이러한 메서드는 다시 로드 설정에 종속 되는 일반 속성을 업데이트 합니다. 예를 들어 설정 클래스에 포함 된 경우는 `location` LoadComponentSettings 설정 속성을 확인 해야 하는 컨트롤의 <xref:System.Windows.Forms.Control.Location%2A>속성이이 다시 로드 된 설정을 반영 하도록 업데이트 됩니다.</xref:System.Windows.Forms.Control.Location%2A>"
  syntax:
    content: public void LoadComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.LoadComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings
  id: ResetComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: ResetComponentSettings()
  nameWithType: IPersistComponentSettings.ResetComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "컨트롤의 응용 프로그램 설정 속성을 기본값으로 다시 설정합니다."
  remarks: "ResetComponentSettings 메서드의 구현도 일반적으로 필요는 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A>메서드가 포함 된 응용 프로그램 설정 클래스의 각 인스턴스에서.</xref:System.Configuration.ApplicationSettingsBase.Reset%2A>"
  syntax:
    content: public void ResetComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.ResetComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings
  id: SaveComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SaveComponentSettings()
  nameWithType: IPersistComponentSettings.SaveComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "컨트롤의 응용 프로그램 설정 속성을 유지합니다."
  remarks: "SaveComponentSettings 메서드는 연결 된 데이터 저장소를 컨트롤의 응용 프로그램 설정 속성의 값을 씁니다. 메서드에서 사용 하는 데이터 저장소와 serialization 방법 <xref:System.Configuration.SettingsProviderAttribute>.</xref:System.Configuration.SettingsProviderAttribute> 를 통해 각 설정 클래스와 관련 된 설정 공급자에 의해 결정 됩니다. 다양 한 설정 공급자를 사용 하 여 재정의할 수 있습니다는 <xref:System.Configuration.ISettingsProviderService>인터페이스.</xref:System.Configuration.ISettingsProviderService>      > [!NOTE] > 경우는 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>속성은 `true`, 컨트롤에서 호출 해야 SaveComponentSettings 자체 <xref:System.Windows.Forms.Control.Dispose%2A>메서드는 응용 프로그램 종료 되기 전에 컨트롤의 구성 데이터를 자동으로 저장 되도록 합니다.</xref:System.Windows.Forms.Control.Dispose%2A> </xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>"
  syntax:
    content: public void SaveComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.SaveComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SaveSettings
  id: SaveSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
  fullName: System.Configuration.IPersistComponentSettings.SaveSettings
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "컨트롤 응용 프로그램 설정 속성을 자동으로 유지할지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "컨트롤 구성 데이터를 포함 하는 경우 일반적으로 계속 유지 되며 명시적으로 호출에 대 한 응답에서이 데이터는 <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A>메서드 또는 경우에 따라 암시적으로 때 컨트롤의 <xref:System.Windows.Forms.Control.Dispose%2A>메서드가 호출 됩니다.</xref:System.Windows.Forms.Control.Dispose%2A> </xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> SaveSettings 속성 컨트롤 삭제 될 때 자동으로 구성 데이터를 유지 하는지 여부를 결정 합니다.       SaveSettings의 기본값은 컨트롤의 구현에 따라 달라 집니다. 컨트롤에 대 한 설명서는 응용 프로그램 설정을 사용 하 여 여부, 유지 되는 데이터 및 SaveSettings 속성의 기본값 란를 나타냅니다."
  example:
  - "The following code example shows the proper way for a control to check the value of the SaveSettings property before it attempts to automatically persist its configuration data.  \n  \n `protected override void Dispose( bool disposing ) {`  \n  \n `if(disposing) {`  \n  \n `try {`  \n  \n `if (SaveSettings) {`  \n  \n `SaveComponentSettings();`  \n  \n `}`  \n  \n `}`  \n  \n `finally {`  \n  \n `//...`  \n  \n `}`  \n  \n `}`"
  syntax:
    content: public bool SaveSettings { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>컨트롤을 자동으로 해당 상태를 유지 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Configuration.IPersistComponentSettings.SaveSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SettingsKey
  id: SettingsKey
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
  fullName: System.Configuration.IPersistComponentSettings.SettingsKey
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "컨트롤의 현재 인스턴스에 대 한 응용 프로그램 설정 키의 값을 가져오거나 설정 합니다."
  remarks: "동일한 래퍼 클래스의 여러 인스턴스가 있을 경우 응용 프로그램 설정 속성의 그룹을 SettingsKey 속성을 사용 합니다. 예를 들어 컨트롤에는 일반적으로 동일한 응용 프로그램에서 동일한 컨트롤의 여러 인스턴스를 배치 하는 다음 연결 된 래퍼 클래스를 포함 하는 경우 래퍼 클래스의 인스턴스가 여러 개에서 발생 합니다. 설정 키가 구성 데이터 인스턴스 단위로;에서 서로 다른 경우에 필요 예를 들어 동적으로 위치로 지정 된 컨트롤의 위치입니다.       다음과 같은 일반적인 규칙이 SettingsKey의 사용에 적용:-모든 클래스와 비슷한 컨트롤에는&0; 개 이상의 응용 프로그램 설정 클래스 포함 될 수 있습니다 <xref:System.Configuration.ApplicationSettingsBase>.</xref:System.Configuration.ApplicationSettingsBase> 에서 파생 된 각 설정을 클래스 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>속성을 해당 클래스의 여러 인스턴스를 구분 하는 도움이 되</xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> 는 자체 포함      -를 다른 설정 클래스로 인스턴스 당 데이터와 공유 데이터 컨트롤이 두십시오.      -모든 인스턴스별 구성 데이터와 컨트롤에 대 한는 `get` SettingsKey 속성의 접근자의 기본값은 <xref:System.Windows.Forms.Control.Name%2A>컨트롤의.</xref:System.Windows.Forms.Control.Name%2A> 대부분의 경우에서 컨트롤의 이름을 응용 프로그램 내에서 고유 됩니다. 컨트롤에 구성 데이터를 공유만 있으면 `get` 의 기본값은 `null`합니다.      - `set` -인스턴스 및 공유 구성 데이터를 포함 하는 설정 클래스를 구분 하려면이 속성에 대 한 접근자를 구현 해야 합니다. 인스턴스 데이터를 포함 하는 각 설정 클래스에 대 한 `set` <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>설정 클래스의 속성</xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> 을 단순히 통과 해야 합니다. 공유 데이터를 포함 하는 설정 클래스에 대 한 `set` 해당 설정 클래스에 대 한 작업을 수행 해야 합니다."
  syntax:
    content: public string SettingsKey { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>컨트롤의 현재 인스턴스에 대 한 설정 키가 포함 된.</xref:System.String>"
  overload: System.Configuration.IPersistComponentSettings.SettingsKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: LoadComponentSettings()
  nameWithType: IPersistComponentSettings.LoadComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: ResetComponentSettings()
  nameWithType: IPersistComponentSettings.ResetComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveComponentSettings()
  nameWithType: IPersistComponentSettings.SaveComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.SaveSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
  fullName: System.Configuration.IPersistComponentSettings.SaveSettings
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.IPersistComponentSettings.SettingsKey
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
  fullName: System.Configuration.IPersistComponentSettings.SettingsKey
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: LoadComponentSettings
  nameWithType: IPersistComponentSettings.LoadComponentSettings
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: ResetComponentSettings
  nameWithType: IPersistComponentSettings.ResetComponentSettings
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveComponentSettings
  nameWithType: IPersistComponentSettings.SaveComponentSettings
- uid: System.Configuration.IPersistComponentSettings.SaveSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
- uid: System.Configuration.IPersistComponentSettings.SettingsKey*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
