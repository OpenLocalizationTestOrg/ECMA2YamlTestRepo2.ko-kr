### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  id: InMemorySymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  type: Class
  summary: "대칭 알고리즘을 사용 하 여 생성 되 고 로컬 컴퓨터의 메모리에만 저장 되는 키를 나타냅니다."
  remarks: "일반적으로이 클래스는 대칭 키를 사용 하 여 XML을 변형 하는 인프라에서만 사용 됩니다."
  syntax:
    content: 'public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  - System.IdentityModel.Tokens.SymmetricSecurityKey
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;> </xref> 클래스 지정된 된 대칭 키를 사용 합니다."
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>대칭 키가 들어 있는.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>길이가&0;입니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;> </xref> 클래스 지정된 된 대칭 키 및 이진 데이터가 복제 되어야 하는지 여부를 나타내는 값을 사용 합니다."
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey, bool cloneBuffer);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>대칭 키가 들어 있는.</xref:System.Byte>"
    - id: cloneBuffer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>로 전달 된 배열을 복제 하려면는 `symmetricKey` 매개 변수, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>길이가&0;입니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정한 암호화 된 키를 해독합니다."
  remarks: "정적 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "키를 암호화 하는 데 사용 된 암호화 알고리즘입니다."
    - id: keyData
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있는.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호 해독 된 키가 들어 있는.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 키를 암호화합니다."
  remarks: "정적 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "사용 하 여 키를 암호화 하는 암호화 알고리즘입니다."
    - id: keyData
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>키가 들어 있는.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 된 키가 들어 있는.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, or <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "현재 키에 대 한 지정 된 암호화 알고리즘 및 매개 변수를 사용 하 여 파생된 키를 생성 합니다."
  remarks: "P-sha1 암호화 알고리즘을 지정 하려면 사용 된 <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>필드.</xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>"
  syntax:
    content: public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);
    parameters:
    - id: algorithm
      type: System.String
      description: "파생된 키를 생성 하는 데 사용할 암호화 알고리즘을 나타내는 URI입니다."
    - id: label
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>암호화 알고리즘에 대 한 레이블 매개 변수를 포함 하는.</xref:System.Byte>"
    - id: nonce
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>파생된 키를 만드는 데 사용 되는 nonce를 포함 하는.</xref:System.Byte>"
    - id: derivedKeyLength
      type: System.Int32
      description: "파생된 키의 크기입니다."
    - id: offset
      type: System.Int32
      description: "이때 파생된 키가이 메서드에서 반환 되는 바이트 배열에 있는 위치입니다."
    return:
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>파생된 키가 들어 있는.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. 지원 되는 알고리즘은 <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  id: GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "암호화 지정된 된 암호화 알고리즘을 사용 하 여 텍스트를 해독 하는 변형 가져옵니다."
  remarks: "해독 알고리즘을 나타내는 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "암호화 된 XML을와 같은 암호화 텍스트를 해독 하는 암호화 알고리즘입니다."
    - id: iv
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>초기화 벡터를 포함 하는 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) 지정된 된 알고리즘에 대 한.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "<xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> 해독 변환을 나타내는입니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  id: GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 암호화 알고리즘을 사용 하 여 XML을 암호화 하는 변환을 가져옵니다."
  remarks: "암호화 알고리즘을 나타내는 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "XML을 암호화 하는 암호화 알고리즘입니다."
    - id: iv
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>초기화 벡터를 포함 하는 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) 지정된 된 알고리즘에 대 한.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "<xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> 암호화 변환을 나타내는입니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  id: GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "초기화 벡터의 비트에서 크기를 가져옵니다 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) 지정된 된 암호화 알고리즘에 필요한 합니다."
  remarks: "암호화 알고리즘을 나타내는 필드를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityAlgorithms>알고리즘을 지정 하려면 클래스.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override int GetIVSize (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "암호화 알고리즘을 초기화 벡터 크기를 가져옵니다 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)."
    return:
      type: System.Int32
      description: "초기화 벡터의 비트에서 크기 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)에 지정 된 암호화 알고리즘에 필요한는 <code> algorithm </code> 매개 변수입니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  id: GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정 된 키 지정된 해시 알고리즘의 인스턴스를 가져옵니다."
  syntax:
    content: public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "인스턴스를 가져올 키 지정된 해시 알고리즘입니다."
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref> 키 지정된 해시 알고리즘을 나타내는입니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. 지원 되는 알고리즘은 <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  id: GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 대칭 알고리즘의 인스턴스를 가져옵니다."
  syntax:
    content: public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "인스턴스를 가져올 대칭 알고리즘입니다."
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> 대칭 알고리즘을 나타내는입니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>지원 되지 않습니다. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>,  <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  id: GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "대칭 키를 나타내는 바이트 수를 가져옵니다."
  syntax:
    content: public override byte[] GetSymmetricKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: "배열을 <xref:System.Byte>대칭 키가 들어 있는.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 알고리즘에서 비대칭 키를 사용 하는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "암호화 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 알고리즘은 비대칭 키를 사용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정 된 알고리즘이이 클래스에서 지원 되는지 여부를 나타내는 값을 가져옵니다."
  remarks: "이 클래스에서 지원 되는 대칭 알고리즘에는 다음 필드가 나타내는 알고리즘입니다.- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap></xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>"
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "암호화 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정된 된 알고리즘은이 클래스;에서 지원 되는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 알고리즘에서 대칭 키를 사용 하는지 여부를 나타내는 값을 가져옵니다."
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "암호화 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>지정 된 알고리즘은 대칭 키를 사용 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "비트 키의 크기를 가져옵니다."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "비트 키의 크기입니다."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SymmetricSecurityKey
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
