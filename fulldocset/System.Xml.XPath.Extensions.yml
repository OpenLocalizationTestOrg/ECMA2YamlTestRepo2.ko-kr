### YamlMime:ManagedReference
items:
- uid: System.Xml.XPath.Extensions
  id: Extensions
  children:
  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode@)
  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode@,System.Xml.XmlNameTable)
  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode@,System.String)
  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode@,System.String)
  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode@,System.String)
  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  langs:
  - csharp
  name: Extensions
  nameWithType: Extensions
  fullName: System.Xml.XPath.Extensions
  type: Class
  summary: "이 클래스에 포함 된 [!INCLUDE[sqltecxlinq](~/add/includes/sqltecxlinq-md.md)] XPath 식을 계산할 수 있도록 하는 확장 메서드."
  remarks: "이러한 메서드를 사용 하기 위한 몇 가지 성능 저하가 됩니다. 사용 하 여 [!INCLUDE[sqltecxlinq](~/add/includes/sqltecxlinq-md.md)] 쿼리 하면 성능이 향상 됩니다.       반환 된 컬렉션의 순서를 지정 하지 않으면 XML XPath 언어 1.0 권장 사항에 있지만이 확장 메서드는 문서 순서로 노드를 반환 합니다.       와 같은 역방향 축의 사용 하는 경우에 노드가 문서 순서로 반환 되도록 참고 `preceding-sibling` 또는 `ancestor-or-self`합니다."
  syntax:
    content: public static class Extensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode@)
  id: CreateNavigator(System.Xml.Linq.XNode@)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: CreateNavigator(XNode)
  nameWithType: Extensions.CreateNavigator(XNode)
  fullName: System.Xml.XPath.Extensions.CreateNavigator(XNode)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "만듭니다는 <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> <xref:System.Xml.Linq.XNode>.</xref:System.Xml.Linq.XNode>"
  remarks: "사용 하 여 XML 트리를 편집할 수 없습니다는 <xref:System.Xml.XPath.XPathNavigator>이 메서드에서 반환 되는.</xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator.CanEdit%2A>속성에서 반환 `false`.</xref:System.Xml.XPath.XPathNavigator.CanEdit%2A>       만들 수 없습니다는 <xref:System.Xml.XPath.XPathNavigator>에 대 한는 <xref:System.Xml.Linq.XDocumentType>노드.</xref:System.Xml.Linq.XDocumentType> </xref:System.Xml.XPath.XPathNavigator> 문서 형식을 XPath 데이터 모델에 참여 하지 않습니다.       Namespace 선언 왼쪽에서 오른쪽으로 보고 됩니다. 반대로 <xref:System.Xml.XmlDocument>네임 스페이스는 오른쪽에서 왼쪽으로 보고 됩니다.</xref:System.Xml.XmlDocument> 네임 스페이스 선언을 XPath 데이터 모델에서 정렬 되어 있지 않으므로 이것이 준수 동작입니다.       메서드가 <xref:System.Xml.XPath.XPathNavigator.MoveToId%2A>이 메서드에 의해 반환 되는 탐색기에 지원 되지 않습니다.</xref:System.Xml.XPath.XPathNavigator.MoveToId%2A>       XSLT 변환을 수행 하려면이 메서드를 사용할 수 있습니다. XML 트리를 만들고, 만들 수 있습니다는 <xref:System.Xml.XPath.XPathNavigator>XML 트리를 만든 다음 새 문서를 만들고는 <xref:System.Xml.XmlWriter>새 문서에 쓸입니다.</xref:System.Xml.XmlWriter> </xref:System.Xml.XPath.XPathNavigator> 그런 다음 전달 하 여 XSLT 변형을 호출할 수 있습니다는 <xref:System.Xml.XPath.XPathNavigator>및 <xref:System.Xml.XmlWriter>변환.</xref:System.Xml.XmlWriter> </xref:System.Xml.XPath.XPathNavigator> 변형이 성공적으로 완료 된 후 새 XML 트리가 변형의 결과로 채워집니다.       XSLT 변환을 수행 하려면 중 하나는 <xref:System.Xml.XmlReader>나 <xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XmlReader> 사용할 수 있습니다. 방법은 다음 두 가지 서로 다른 성능 특징을 갖습니다. 사용 하는 경우 일부 변환 더 빠르게 실행 됩니다는 <xref:System.Xml.XmlReader>, 없고 <xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator> 를 사용할 때 더 빠르게 실행 되도록 다른</xref:System.Xml.XmlReader> 성능이 중요 하지 않은 경우에 사용자 환경에서 더 잘 수행 되는 확인 하려면 각 접근 방식으로 실험 하는 것이 좋습니다."
  example:
  - "```c#  \n  \n                string xslMarkup = @\"<?xml version='1.0'?>  \n<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  \n    <xsl:template match='/Parent'>  \n        <Root>  \n            <C1><xsl:value-of select='Child1'/></C1>  \n            <C2><xsl:value-of select='Child2'/></C2>  \n        </Root>  \n    </xsl:template>  \n</xsl:stylesheet>\";  \n  \nXDocument xmlTree = new XDocument(  \n    new XElement(\"Parent\",  \n        new XElement(\"Child1\", \"Child1 data\"),  \n        new XElement(\"Child2\", \"Child2 data\")  \n    )  \n);  \n  \nXDocument newTree = new XDocument();  \nusing (XmlWriter writer = newTree.CreateWriter()) {  \n    // Load the style sheet.  \n    XslCompiledTransform xslt = new XslCompiledTransform();  \n    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  \n  \n    // Execute the transform and output the results to a writer.  \n    xslt.Transform(xmlTree.CreateNavigator(), writer);  \n}  \n  \nConsole.WriteLine(newTree);  \n```  \n  \n```vb  \n  \n                Dim xslMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  \n        <xsl:template match='/Parent'>  \n            <Root>  \n                <C1><xsl:value-of select='Child1'/></C1>  \n                <C2><xsl:value-of select='Child2'/></C2>  \n            </Root>  \n        </xsl:template>  \n    </xsl:stylesheet>  \n  \nDim xmlTree As XDocument = _  \n    <?xml version='1.0'?>  \n    <Parent>  \n        <Child1>Child1 data</Child1>  \n        <Child2>Child2 data</Child2>  \n    </Parent>  \n  \nDim newTree As XDocument = New XDocument()  \n  \nUsing writer As XmlWriter = newTree.CreateWriter()  \n    ' Load the style sheet.  \n    Dim xslt As XslCompiledTransform = _  \n        New XslCompiledTransform()  \n    xslt.Load(xslMarkup.CreateReader())  \n  \n    ' Execute the transform and output the results to a writer.  \n    xslt.Transform(xmlTree.CreateNavigator(), writer)  \nEnd Using  \n  \nConsole.WriteLine(newTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <C1>Child1 data</C1>  \n  <C2>Child2 data</C2>  \n</Root>  \n```"
  syntax:
    content: public static System.Xml.XPath.XPathNavigator CreateNavigator (this System.Xml.Linq.XNode node);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 쿼리를 처리할 수 있는.</xref:System.Xml.Linq.XNode>"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> 있는 XPath 쿼리를 처리할 수 있습니다."
  overload: System.Xml.XPath.Extensions.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode@,System.Xml.XmlNameTable)
  id: CreateNavigator(System.Xml.Linq.XNode@,System.Xml.XmlNameTable)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: CreateNavigator(XNode,XmlNameTable)
  nameWithType: Extensions.CreateNavigator(XNode,XmlNameTable)
  fullName: System.Xml.XPath.Extensions.CreateNavigator(XNode,XmlNameTable)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "만듭니다는 <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> <xref:System.Xml.Linq.XNode>.</xref:System.Xml.Linq.XNode> <xref:System.Xml.XmlNameTable>보다 효율적인 XPath 식을 처리할 수 있도록 합니다.</xref:System.Xml.XmlNameTable>"
  remarks: "사용 하 여 XML 트리를 편집할 수 없습니다는 <xref:System.Xml.XPath.XPathNavigator>이 메서드에서 반환 되는.</xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator.CanEdit%2A>속성에서 반환 `false`.</xref:System.Xml.XPath.XPathNavigator.CanEdit%2A>       만들 수 없습니다는 <xref:System.Xml.XPath.XPathNavigator>에 대 한는 <xref:System.Xml.Linq.XDocumentType>노드.</xref:System.Xml.Linq.XDocumentType> </xref:System.Xml.XPath.XPathNavigator> 문서 형식을 XPath 데이터 모델에 참여 하지 않습니다.       Namespace 선언 왼쪽에서 오른쪽으로 보고 됩니다. 반대로 <xref:System.Xml.XmlDocument>네임 스페이스는 오른쪽에서 왼쪽으로 보고 됩니다.</xref:System.Xml.XmlDocument> 네임 스페이스 선언을 XPath 데이터 모델에서 정렬 되어 있지 않으므로 이것이 준수 동작입니다.       메서드가 <xref:System.Xml.XPath.XPathNavigator.MoveToId%2A>이 메서드에 의해 반환 되는 탐색기에 지원 되지 않습니다.</xref:System.Xml.XPath.XPathNavigator.MoveToId%2A>       사용 하는 경우는 <xref:System.Xml.XmlNameTable>를 만들려면이 메서드로 <xref:System.Xml.XPath.XPathNavigator>, 더 나은 성능을 XPath 식을 계산할 때 발생 합니다.</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XmlNameTable>"
  syntax:
    content: public static System.Xml.XPath.XPathNavigator CreateNavigator (this System.Xml.Linq.XNode node, System.Xml.XmlNameTable nameTable);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 쿼리를 처리할 수 있는.</xref:System.Xml.Linq.XNode>"
    - id: nameTable
      type: System.Xml.XmlNameTable
      description: "A <xref:System.Xml.XmlNameTable> to be used by <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>.</xref:System.Xml.XmlNameTable>"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> 있는 XPath 쿼리를 처리할 수 있습니다."
  overload: System.Xml.XPath.Extensions.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode@,System.String)
  id: XPathEvaluate(System.Xml.Linq.XNode@,System.String)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: XPathEvaluate(XNode,String)
  nameWithType: Extensions.XPathEvaluate(XNode,String)
  fullName: System.Xml.XPath.Extensions.XPathEvaluate(XNode,String)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "XPath 식을 계산합니다."
  remarks: "컬렉션의 요소 또는 특성의 열거형 인 경우 사용할 수 있습니다는 `Cast` 연산자를 <xref:System.Xml.Linq.XElement>또는 <xref:System.Xml.Linq.XAttribute>.</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Linq.XElement> 의 컬렉션을 가져옵니다.       반환 된 컬렉션의 순서를 지정 하지 않으면 XML XPath 언어 1.0 권장 사항에 있지만이 확장 메서드는 문서 순서로 노드를 반환 합니다.       와 같은 역방향 축의 사용 하는 경우에 노드가 문서 순서로 반환 되도록 참고 `preceding-sibling` 또는 `ancestor-or-self`합니다."
  example:
  - "The following example creates a small XML tree with an attribute, then uses the <xref:System.Xml.XPath.Extensions.XPathEvaluate%2A> method to retrieve the attribute.  \n  \n```c#  \n  \n                String xml = \"<root a='value'/>\";  \nXDocument d = XDocument.Parse(xml);  \nIEnumerable att = (IEnumerable)d.XPathEvaluate(\"/root/@a\");  \nConsole.WriteLine(att.Cast<XAttribute>().FirstOrDefault());  \n```  \n  \n```vb  \n  \n                Dim d As XDocument = _  \n    <?xml version='1.0'?>  \n    <root a='value'/>  \nDim att As IEnumerable = CType(d.XPathEvaluate(\"/root/@a\"), IEnumerable)  \nConsole.WriteLine(att.Cast(Of XAttribute)().FirstOrDefault())  \n```  \n  \n This example produces the following output:  \n  \n```  \na=\"value\"  \n```"
  syntax:
    content: public static object XPathEvaluate (this System.Xml.Linq.XNode node, string expression);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 식을 계산할 수입니다.</xref:System.Xml.Linq.XNode>"
    - id: expression
      type: System.String
      description: "A <xref:System.String>XPath 식을 포함 하는.</xref:System.String>"
    return:
      type: System.Object
      description: "포함할 수 있는 개체는 <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref>, 또는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;합니다."
  overload: System.Xml.XPath.Extensions.XPathEvaluate*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  id: XPathEvaluate(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: XPathEvaluate(XNode,String,IXmlNamespaceResolver)
  nameWithType: Extensions.XPathEvaluate(XNode,String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.Extensions.XPathEvaluate(XNode,String,IXmlNamespaceResolver)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "지정 된 <xref:System.Xml.IXmlNamespaceResolver>.</xref:System.Xml.IXmlNamespaceResolver> 를 사용 하 여 네임 스페이스 접두사를 확인 하는 XPath 식을 계산합니다"
  remarks: "네임 스페이스 접두사가 포함 된 XPath 식을 평가 하려면이 메서드를 사용할 수 있습니다.       반환 된 컬렉션의 순서를 지정 하지 않으면 XML XPath 언어 1.0 권장 사항에 있지만이 확장 메서드는 문서 순서로 노드를 반환 합니다.       와 같은 역방향 축의 사용 하는 경우에 노드가 문서 순서로 반환 되도록 참고 `preceding-sibling` 또는 `ancestor-or-self`합니다."
  example:
  - "The following example creates an XML tree that contains a namespace. It uses an <xref:System.Xml.XmlReader> to read the XML document. It then gets an <xref:System.Xml.XmlNameTable> from the <xref:System.Xml.XmlReader>, and an <xref:System.Xml.XmlNamespaceManager> from the <xref:System.Xml.XmlNameTable>. It uses the <xref:System.Xml.XmlNamespaceManager> when selecting an element.  \n  \n```c#  \n  \n                string markup =  \n@\"<aw:Root xmlns:aw='http://www.adventure-works.com'>  \n    <aw:Child1 aw:Att='attdata'>child one data 1</aw:Child1>  \n</aw:Root>\";  \nXmlReader reader = XmlReader.Create(new StringReader(markup));  \nXElement root = XElement.Load(reader);  \nXmlNameTable nameTable = reader.NameTable;  \nXmlNamespaceManager namespaceManager = new XmlNamespaceManager(nameTable);  \nnamespaceManager.AddNamespace(\"aw\", \"http://www.adventure-works.com\");  \nIEnumerable atts = (IEnumerable)root.XPathEvaluate(\"./aw:Child1/@aw:Att\", namespaceManager);  \nIEnumerable<XAttribute> attList = atts.Cast<XAttribute>();  \nXAttribute att = attList.First();  \nConsole.WriteLine(att);  \n```  \n  \n```vb  \n  \n                Dim markup As XElement = _  \n    <aw:Root xmlns:aw='http://www.adventure-works.com'>  \n        <aw:Child1 aw:Att='attdata'>child one data 1</aw:Child1>  \n    </aw:Root>  \nDim reader As XmlReader = markup.CreateReader  \nDim nameTable As XmlNameTable = reader.NameTable  \nDim namespaceManager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  \nnamespaceManager.AddNamespace(\"aw\", \"http://www.adventure-works.com\")  \nDim atts As IEnumerable = CType(markup.XPathEvaluate(\"./aw:Child1/@aw:Att\", namespaceManager), IEnumerable)  \nDim attList As IEnumerable(Of XAttribute) = atts.Cast(Of XAttribute)()  \nDim att As XAttribute = attList.First()  \nConsole.WriteLine(att)  \n```  \n  \n This example produces the following output:  \n  \n```  \naw:Att=\"attdata\"  \n```"
  syntax:
    content: public static object XPathEvaluate (this System.Xml.Linq.XNode node, string expression, System.Xml.IXmlNamespaceResolver resolver);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 식을 계산할 수입니다.</xref:System.Xml.Linq.XNode>"
    - id: expression
      type: System.String
      description: "A <xref:System.String>XPath 식을 포함 하는.</xref:System.String>"
    - id: resolver
      type: System.Xml.IXmlNamespaceResolver
      description: "A <xref:System.Xml.IXmlNamespaceResolver>XPath 식에서 네임 스페이스 접두사에 대 한.</xref:System.Xml.IXmlNamespaceResolver>"
    return:
      type: System.Object
      description: "식의 계산 결과 포함 하는 개체입니다. 개체 수는 <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref>, 또는 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;합니다."
  overload: System.Xml.XPath.Extensions.XPathEvaluate*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode@,System.String)
  id: XPathSelectElement(System.Xml.Linq.XNode@,System.String)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: XPathSelectElement(XNode,String)
  nameWithType: Extensions.XPathSelectElement(XNode,String)
  fullName: System.Xml.XPath.Extensions.XPathSelectElement(XNode,String)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "선택 된 <xref:System.Xml.Linq.XElement>XPath 식을 사용 하 여.</xref:System.Xml.Linq.XElement>"
  remarks: ''
  example:
  - "The following example creates a small XML tree and uses <xref:System.Xml.XPath.Extensions.XPathSelectElement%2A> to select a single element.  \n  \n```c#  \n  \n                XElement root = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5),  \n    new XElement(\"Child6\", 6)  \n);  \nXElement el = root.XPathSelectElement(\"./Child4\");  \nConsole.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _  \n    <Root>  \n        <Child1>1</Child1>  \n        <Child2>2</Child2>  \n        <Child3>3</Child3>  \n        <Child4>4</Child4>  \n        <Child5>5</Child5>  \n        <Child6>6</Child6>  \n    </Root>  \nDim el As XElement = root.XPathSelectElement(\"./Child4\")  \nConsole.WriteLine(el)  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Child4>4</Child4>  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement XPathSelectElement (this System.Xml.Linq.XNode node, string expression);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 식을 계산할 수입니다.</xref:System.Xml.Linq.XNode>"
    - id: expression
      type: System.String
      description: "A <xref:System.String>XPath 식을 포함 하는.</xref:System.String>"
    return:
      type: System.Xml.Linq.XElement
      description: "<xref:System.Xml.Linq.XElement>, null 또는.</xref:System.Xml.Linq.XElement>"
  overload: System.Xml.XPath.Extensions.XPathSelectElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  id: XPathSelectElement(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: XPathSelectElement(XNode,String,IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElement(XNode,String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.Extensions.XPathSelectElement(XNode,String,IXmlNamespaceResolver)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "<xref:System.Xml.Linq.XElement>지정 된 <xref:System.Xml.IXmlNamespaceResolver>.</xref:System.Xml.IXmlNamespaceResolver> 를 사용 하 여 네임 스페이스 접두사를 확인 하는 XPath 식을 사용 하 여</xref:System.Xml.Linq.XElement> 선택합니다."
  remarks: "네임 스페이스 접두사가 포함 된 XPath 식을 평가 하려면이 메서드를 사용할 수 있습니다."
  example:
  - "The following example creates an XML tree that contains a namespace. It uses an <xref:System.Xml.XmlReader> to read the XML document. It then gets an <xref:System.Xml.XmlNameTable> from the <xref:System.Xml.XmlReader>, and an <xref:System.Xml.XmlNamespaceManager> from the <xref:System.Xml.XmlNameTable>. It uses the <xref:System.Xml.XmlNamespaceManager> when selecting an element.  \n  \n```c#  \n  \n                string markup = @\"  \n<aw:Root xmlns:aw='http://www.adventure-works.com'>  \n    <aw:Child1>child one data</aw:Child1>  \n    <aw:Child2>child two data</aw:Child2>  \n</aw:Root>\";  \nXmlReader reader = XmlReader.Create(new StringReader(markup));  \nXElement root = XElement.Load(reader);  \nXmlNameTable nameTable = reader.NameTable;  \nXmlNamespaceManager namespaceManager = new XmlNamespaceManager(nameTable);  \nnamespaceManager.AddNamespace(\"aw\", \"http://www.adventure-works.com\");  \nXElement child1 = root.XPathSelectElement(\"./aw:Child1\", namespaceManager);  \nConsole.WriteLine(child1);  \n```  \n  \n```vb  \n  \n                Dim markup As XElement = _  \n    <aw:Root xmlns:aw='http://www.adventure-works.com'>  \n        <aw:Child1>child one data</aw:Child1>  \n        <aw:Child2>child two data</aw:Child2>  \n    </aw:Root>  \nDim reader As XmlReader = markup.CreateReader  \nDim nameTable As XmlNameTable = reader.NameTable  \nDim namespaceManager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  \nnamespaceManager.AddNamespace(\"aw\", \"http://www.adventure-works.com\")  \nDim child1 As XElement = markup.XPathSelectElement(\"./aw:Child1\", namespaceManager)  \nConsole.WriteLine(child1)  \n```  \n  \n This example produces the following output:  \n  \n```  \n<aw:Child1 xmlns:aw=\"http://www.adventure-works.com\">child one data</aw:Child1>  \n```"
  syntax:
    content: public static System.Xml.Linq.XElement XPathSelectElement (this System.Xml.Linq.XNode node, string expression, System.Xml.IXmlNamespaceResolver resolver);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 식을 계산할 수입니다.</xref:System.Xml.Linq.XNode>"
    - id: expression
      type: System.String
      description: "A <xref:System.String>XPath 식을 포함 하는.</xref:System.String>"
    - id: resolver
      type: System.Xml.IXmlNamespaceResolver
      description: "<xref:System.Xml.IXmlNamespaceResolver>XPath 식에서 네임 스페이스 접두사에 대 한.</xref:System.Xml.IXmlNamespaceResolver>"
    return:
      type: System.Xml.Linq.XElement
      description: "<xref:System.Xml.Linq.XElement>, null 또는.</xref:System.Xml.Linq.XElement>"
  overload: System.Xml.XPath.Extensions.XPathSelectElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode@,System.String)
  id: XPathSelectElements(System.Xml.Linq.XNode@,System.String)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: XPathSelectElements(XNode,String)
  nameWithType: Extensions.XPathSelectElements(XNode,String)
  fullName: System.Xml.XPath.Extensions.XPathSelectElements(XNode,String)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "XPath 식을 사용 하 여 요소의 컬렉션을 선택 합니다."
  remarks: "반환 된 컬렉션의 순서를 지정 하지 않으면 XML XPath 언어 1.0 권장 사항에 있지만이 확장 메서드는 문서 순서로 노드를 반환 합니다.       와 같은 역방향 축의 사용 하는 경우에 노드가 문서 순서로 반환 되도록 참고 `preceding-sibling` 또는 `ancestor-or-self`합니다."
  example:
  - "The following example creates a small XML tree and uses <xref:System.Xml.XPath.Extensions.XPathSelectElements%2A> to select a set of elements.  \n  \n```c#  \n  \n                XElement root = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child1\", 2),  \n    new XElement(\"Child1\", 3),  \n    new XElement(\"Child2\", 4),  \n    new XElement(\"Child2\", 5),  \n    new XElement(\"Child2\", 6)  \n);  \nIEnumerable<XElement> list = root.XPathSelectElements(\"./Child2\");  \nforeach (XElement el in list)  \n    Console.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _  \n    <Root>  \n        <Child1>1</Child1>  \n        <Child1>2</Child1>  \n        <Child1>3</Child1>  \n        <Child2>4</Child2>  \n        <Child2>5</Child2>  \n        <Child2>6</Child2>  \n    </Root>  \nDim list As IEnumerable(Of XElement) = root.XPathSelectElements(\"./Child2\")  \nFor Each el As XElement In list  \n    Console.WriteLine(el)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Child2>4</Child2>  \n<Child2>5</Child2>  \n<Child2>6</Child2>  \n```"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements (this System.Xml.Linq.XNode node, string expression);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 식을 계산할 수입니다.</xref:System.Xml.Linq.XNode>"
    - id: expression
      type: System.String
      description: "A <xref:System.String>XPath 식을 포함 하는.</xref:System.String>"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "&lt;xref:System.Collections.Generic.IEnumerable%601&gt; 의 <xref:System.Xml.Linq.XElement>선택 된 요소가 들어 있는.</xref:System.Xml.Linq.XElement>"
  overload: System.Xml.XPath.Extensions.XPathSelectElements*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  id: XPathSelectElements(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  langs:
  - csharp
  name: XPathSelectElements(XNode,String,IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElements(XNode,String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.Extensions.XPathSelectElements(XNode,String,IXmlNamespaceResolver)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.XPath
  summary: "XPath 식을 사용 하 여, 지정 된 <xref:System.Xml.IXmlNamespaceResolver>.</xref:System.Xml.IXmlNamespaceResolver> 를 사용 하 여 네임 스페이스 접두사를 확인 하는 요소 컬렉션을 선택 합니다."
  remarks: "네임 스페이스 접두사가 포함 된 XPath 식을 평가 하려면이 메서드를 사용할 수 있습니다.       반환 된 컬렉션의 순서를 지정 하지 않으면 XML XPath 언어 1.0 권장 사항에 있지만이 확장 메서드는 문서 순서로 노드를 반환 합니다.       와 같은 역방향 축의 사용 하는 경우에 노드가 문서 순서로 반환 되도록 참고 `preceding-sibling` 또는 `ancestor-or-self`합니다."
  example:
  - "This example creates an XML tree that contains a namespace. It uses an <xref:System.Xml.XmlReader> to read the XML document. It then gets an <xref:System.Xml.XmlNameTable> from the <xref:System.Xml.XmlReader>, and an <xref:System.Xml.XmlNamespaceManager> from the <xref:System.Xml.XmlNameTable>. It uses the <xref:System.Xml.XmlNamespaceManager> when selecting the list of elements.  \n  \n```c#  \n  \n                string markup = @\"  \n<aw:Root xmlns:aw='http://www.adventure-works.com'>  \n    <aw:Child1>child one data 1</aw:Child1>  \n    <aw:Child1>child one data 2</aw:Child1>  \n    <aw:Child1>child one data 3</aw:Child1>  \n    <aw:Child2>child two data 4</aw:Child2>  \n    <aw:Child2>child two data 5</aw:Child2>  \n    <aw:Child2>child two data 6</aw:Child2>  \n</aw:Root>\";  \nXmlReader reader = XmlReader.Create(new StringReader(markup));  \nXElement root = XElement.Load(reader);  \nXmlNameTable nameTable = reader.NameTable;  \nXmlNamespaceManager namespaceManager = new XmlNamespaceManager(nameTable);  \nnamespaceManager.AddNamespace(\"aw\", \"http://www.adventure-works.com\");  \nIEnumerable<XElement> elements = root.XPathSelectElements(\"./aw:Child1\", namespaceManager);  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Dim markup As XElement = _  \n<aw:Root xmlns:aw=\"http://www.adventure-works.com\">  \n    <aw:Child1>child one data 1</aw:Child1>  \n    <aw:Child1>child one data 2</aw:Child1>  \n    <aw:Child1>child one data 3</aw:Child1>  \n    <aw:Child2>child two data 4</aw:Child2>  \n    <aw:Child2>child two data 5</aw:Child2>  \n    <aw:Child2>child two data 6</aw:Child2>  \n</aw:Root>  \nDim reader As XmlReader = markup.CreateReader  \nDim nameTable As XmlNameTable = reader.NameTable  \nDim namespaceManager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  \nnamespaceManager.AddNamespace(\"aw\", \"http://www.adventure-works.com\")  \nDim elements As IEnumerable(Of XElement) = markup.XPathSelectElements(\"./aw:Child1\", namespaceManager)  \nFor Each el As XElement In elements  \n    Console.WriteLine(el)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n<aw:Child1 xmlns:aw=\"http://www.adventure-works.com\">child one data 1</aw:Child1>  \n<aw:Child1 xmlns:aw=\"http://www.adventure-works.com\">child one data 2</aw:Child1>  \n<aw:Child1 xmlns:aw=\"http://www.adventure-works.com\">child one data 3</aw:Child1>  \n```"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements (this System.Xml.Linq.XNode node, string expression, System.Xml.IXmlNamespaceResolver resolver);
    parameters:
    - id: node
      type: System.Xml.Linq.XNode
      description: "<xref:System.Xml.Linq.XNode>XPath 식을 계산할 수입니다.</xref:System.Xml.Linq.XNode>"
    - id: expression
      type: System.String
      description: "A <xref:System.String>XPath 식을 포함 하는.</xref:System.String>"
    - id: resolver
      type: System.Xml.IXmlNamespaceResolver
      description: "A <xref:System.Xml.IXmlNamespaceResolver>XPath 식에서 네임 스페이스 접두사에 대 한.</xref:System.Xml.IXmlNamespaceResolver>"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "&lt;xref:System.Collections.Generic.IEnumerable%601&gt; 의 <xref:System.Xml.Linq.XElement>선택 된 요소가 들어 있는.</xref:System.Xml.Linq.XElement>"
  overload: System.Xml.XPath.Extensions.XPathSelectElements*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode@)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: CreateNavigator(XNode)
  nameWithType: Extensions.CreateNavigator(XNode)
  fullName: System.Xml.XPath.Extensions.CreateNavigator(XNode)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.Linq.XNode
  parent: System.Xml.Linq
  isExternal: true
  name: XNode
  nameWithType: XNode
  fullName: System.Xml.Linq.XNode
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode@,System.Xml.XmlNameTable)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: CreateNavigator(XNode,XmlNameTable)
  nameWithType: Extensions.CreateNavigator(XNode,XmlNameTable)
  fullName: System.Xml.XPath.Extensions.CreateNavigator(XNode,XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode@,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathEvaluate(XNode,String)
  nameWithType: Extensions.XPathEvaluate(XNode,String)
  fullName: System.Xml.XPath.Extensions.XPathEvaluate(XNode,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathEvaluate(XNode,String,IXmlNamespaceResolver)
  nameWithType: Extensions.XPathEvaluate(XNode,String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.Extensions.XPathEvaluate(XNode,String,IXmlNamespaceResolver)
- uid: System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: true
  name: IXmlNamespaceResolver
  nameWithType: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode@,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElement(XNode,String)
  nameWithType: Extensions.XPathSelectElement(XNode,String)
  fullName: System.Xml.XPath.Extensions.XPathSelectElement(XNode,String)
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElement(XNode,String,IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElement(XNode,String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.Extensions.XPathSelectElement(XNode,String,IXmlNamespaceResolver)
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode@,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElements(XNode,String)
  nameWithType: Extensions.XPathSelectElements(XNode,String)
  fullName: System.Xml.XPath.Extensions.XPathSelectElements(XNode,String)
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<XElement>
  nameWithType: IEnumerable<XElement>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Xml.Linq.XElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: XElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode@,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElements(XNode,String,IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElements(XNode,String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.Extensions.XPathSelectElements(XNode,String,IXmlNamespaceResolver)
- uid: System.Xml.XPath.Extensions.CreateNavigator*
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: CreateNavigator
  nameWithType: Extensions.CreateNavigator
- uid: System.Xml.XPath.Extensions.XPathEvaluate*
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathEvaluate
  nameWithType: Extensions.XPathEvaluate
- uid: System.Xml.XPath.Extensions.XPathSelectElement*
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElement
  nameWithType: Extensions.XPathSelectElement
- uid: System.Xml.XPath.Extensions.XPathSelectElements*
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElements
  nameWithType: Extensions.XPathSelectElements
