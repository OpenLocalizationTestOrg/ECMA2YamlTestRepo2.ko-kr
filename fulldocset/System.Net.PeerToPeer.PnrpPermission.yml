### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.PnrpPermission
  id: PnrpPermission
  children:
  - System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Net.PeerToPeer.PnrpPermission.Copy
  - System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  - System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  - System.Net.PeerToPeer.PnrpPermission.ToXml
  - System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PnrpPermission
  nameWithType: PnrpPermission
  fullName: System.Net.PeerToPeer.PnrpPermission
  type: Class
  summary: "사용 되는 값을 지정 <xref href=&quot;System.Net.PeerToPeer&quot;> </xref> 개체 사용 권한."
  remarks: "기본 사용 권한을 모든 로컬 및 PNRP 서비스에 액세스할 인트라넷 영역 응용 프로그램을 허용 합니다. 기본 권한은 변경 되지 않으면 모든 링크-로컬 및 사이트-로컬 응용 프로그램 피어 투 피어 서비스에 액세스할 수 있지만 글로벌 (인터넷) 응용 프로그램에서는 액세스할 수 없습니다.       이 형식의 인스턴스 두 개의 사용 권한 상태를 갖도록: 하거나, 사용 권한으로 보호 된 리소스에 액세스할 수 있는 또는 이러한 리소스에 대 한 모든 권한을 제한이 있습니다."
  syntax:
    content: 'public sealed class PnrpPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 제공 된 초기 사용 권한 상태를 사용 하 여 클래스입니다."
  remarks: "이 형식의 인스턴스 두 개의 사용 권한 상태를 갖도록: 하거나, 사용 권한으로 보호 된 리소스에 액세스할 수 있는 또는 이러한 리소스에 대 한 모든 권한을 제한이 있습니다.       경우 `state` 은 무제한을 PnrpPermission 인스턴스는 모든 요청을 거부 합니다. 경우 `state` 다른 값이 들어 PnrpPermission 인스턴스의 모든 요청을 거부 합니다."
  syntax:
    content: public PnrpPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "값 중 하나는 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> 열거 합니다."
  overload: System.Net.PeerToPeer.PnrpPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  id: Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "현재는 동일한 복사본을 만들어 반환 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>합니다."
  remarks: "사용 권한의 복사본은 원래 사용 권한과 리소스에 동일한 액세스를 권한을 나타냅니다.       이 형식의 인스턴스 두 개의 사용 권한 상태를 갖도록: 하거나, 사용 권한으로 보호 된 리소스에 액세스할 수 있는 또는 이러한 리소스에 대 한 모든 권한을 제한이 있습니다."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "현재 인스턴스의 복사본을 포함 하는 인스턴스 IPermission 인터페이스를 가진 개체가 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>합니다."
  overload: System.Net.PeerToPeer.PnrpPermission.Copy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-매개 변수가 유효 하지 않거나 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 요소입니다.      -매개 변수의 버전 번호가 지원 되지 않습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "매개 변수는 한 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "포함 된 XML 인코딩에서 지정된 된 상태의 보안 개체를 다시 만듭니다."
  remarks: "인코딩 보안 개체에 대 한 XML 개체 모델을 나타냅니다. 이 클래스는 상속 될 수 없습니다.       이 클래스는 단순 XML 개체 모델 보안 시스템 내에서 사용 하기 위해 일반 XML 개체 모델으로 사용할 수 있도록 하지의 간단한 구현이 됩니다."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "XML 사용 권한을 다시 만드는 데 사용할 인코딩입니다."
  overload: System.Net.PeerToPeer.PnrpPermission.FromXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-매개 변수가 유효 하지 않거나 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 요소입니다.      -매개 변수의 버전 번호가 지원 되지 않습니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "매개 변수는 한 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "만들고 현재의 교집합에 있는 사용 권한을 반환 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 및 지정한 사용 합니다."
  remarks: "두 사용 권한의 공통 사항에는 모두 공통으로 설명 하는 작업 집합을 설명 하는 권한입니다. 원래 사용 권한을 모두 전달 하는 요구만 교집합에 전달 합니다.       다음 문은 되어야 하는 데 필요한 `true` Intersect 메서드는 모든 구현에 대 한 합니다. X 및 Y 나타내는 <xref:System.Security.IPermission>되지 않는 개체 참조는 `null` 참조 (Visual Basic의 경우 Nothing).</xref:System.Security.IPermission>      -X.Intersect(X) X에 값을 반환합니다.      -X.Intersect(Y) Y.Intersect(X)와 동일한 값을 반환 합니다.      -X.Intersect(a `null` reference (`Nothing` in Visual Basic)) 반환는 `null` 참조 (`Nothing` Visual basic에서)."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "현재 사용 권한과 Intersect에 권한입니다. 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재의 교차 부분을 나타내는 새 사용 권한 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 및 지정한 사용 합니다. 이 새로운 사용 권한은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서) 교집합이 비어 있는 경우."
  overload: System.Net.PeerToPeer.PnrpPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "대상 매개 변수가 않습니다는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서) 및 현재 사용 권한과 동일한 클래스의 인스턴스가 아닙니다."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "결정 여부 현재 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 지정된 된 사용 권한의 하위 집합입니다."
  remarks: "The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \n  \n-   X.IsSubsetOf(X) returns `true`.  \n  \n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \n  \n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \n  \n-  \n  \n If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "권한 하위 집합 관계에 대해 테스트 하는 것입니다. 이 사용 권한은 현재 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>하는 경우 현재 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 지정된 된 사용 권한의 하위 집합이 고, 그렇지 않으면, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "대상 매개 변수가 않습니다는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 참조 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual basic에서) 및 현재 사용 권한과 동일한 클래스의 인스턴스가 아닙니다."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "지정 하는 값을 반환 하는지 여부를 현재 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 은 제한 되지 않습니다."
  remarks: "무제한 권한 권한으로 보호 하는 모든 리소스에 대 한 액세스를 나타냅니다."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>현재 사용 권한이 제한 된; 없는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  id: ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "XML 인코딩을 만듭니다는 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 및 현재 상태에 있습니다."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;> </xref> 모든 상태 정보를 포함 하는 권한의 XML 인코딩을 포함 하는 개체입니다."
  overload: System.Net.PeerToPeer.PnrpPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "현재 사용 권한을 합한 사용 권한을 만듭니다 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 및 지정한 사용 합니다."
  remarks: "Union에 대 한 호출의 결과 모두 현재 모든 작업을 나타내는 있는 사용 권한을 <xref:System.Net.PeerToPeer.PnrpPermission>및 지정한 사용 권한의.</xref:System.Net.PeerToPeer.PnrpPermission> 사용 권한 중 하나를 전달 하는 모든 요청의 합집합을 통과 합니다.       다음 문은 되어야 하는 데 필요한 `true` Union 메서드는 모든 구현에 대 한 합니다. X 및 Y 나타내는 <xref:System.Security.IPermission>없는 개체는 `null` 참조 (`Nothing` Visual basic에서).</xref:System.Security.IPermission>      -X.Union(X) 동일한 X 값을 가지는 개체를 반환 합니다.      -X.Union(Y) Y.Union(X) 반환 되는 개체와 동일한 값이 있는 개체를 반환 합니다.      -X.Union(a `null` reference (`Nothing` in Visual Basic)) 동일한 X 값을 가지는 개체를 반환 합니다."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "현재 사용 권한과 결합할 사용 권한 현재 사용 권한과 동일한 형식 이어야 합니다."
    return:
      type: System.Security.IPermission
      description: "현재 권한의 합을 나타내는 새 사용 권한 <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> 및 지정한 사용 합니다."
  overload: System.Net.PeerToPeer.PnrpPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code>매개 변수가 올바르지 않습니다."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission
  nameWithType: PnrpPermission.PnrpPermission
- uid: System.Net.PeerToPeer.PnrpPermission.Copy*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy
  nameWithType: PnrpPermission.Copy
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml
  nameWithType: PnrpPermission.FromXml
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect
  nameWithType: PnrpPermission.Intersect
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PnrpPermission.IsSubsetOf
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PnrpPermission.IsUnrestricted
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml
  nameWithType: PnrpPermission.ToXml
- uid: System.Net.PeerToPeer.PnrpPermission.Union*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union
  nameWithType: PnrpPermission.Union
