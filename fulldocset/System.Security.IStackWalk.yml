### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "호출 스택의 모든 호출자가 보호 된 리소스에 액세스 하는 데 필요한 권한이 있는지 여부를 결정 하는 스택 워크를 관리 합니다."
  remarks: "부분적으로 신뢰할 수 있는 코드는 항상 보안 위험을 표시합니다. 리소스에 액세스 권한이 있는 악의적인 코드를 대신 하 여 작업을 수행할 조작할 경우도 있습니다. 이러한 방식으로 악성 코드가 허용 되는 것 보다 더 높은 보안 액세스를 달성할 수 있습니다.       공용 언어 런타임에 대 한 모든 호출에서 스택 워크를 실행 하 여 이러한 공격 으로부터 관리 되는 코드를 보호할 수 있습니다. 스택 워크는 모든 코드가 호출 스택에 있는 보호 된 리소스에 액세스할 수 있는 권한이 필요 합니다. 공격을 시도 하는 코드에 호출 스택을 항상 있이 됩니다, 때문에 되지 것입니다는 자체 보안 권한을 초과할 수 있습니다."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "스택의 상위 호출자가 리소스에 액세스할 수 있는 권한이 부여 되지 않았습니다 하는 경우에 호출 코드에서 현재 사용 권한 개체로 식별 되는 리소스를 액세스할 수 있는지를 어설션 합니다."
  remarks: "호출 스택의 상위 호출자에 대 한 사용 권한 검사가 중지 Assert를 호출 합니다. 따라서 이러한 호출자가 필수 사용 권한을 없는 경우에 리소스 여전히 액세스할 수 있습니다. 어설션을 Assert를 호출 하는 코드 어설션하는 사용 권한에 대해 보안 검사를 통과 하는 경우에 유효 합니다.       Assert에 대 한 호출 Assert 후속 호출 이전 어설션이 비효율적인 렌더링 하거나 호출 코드의 호출자에 게 반환 될 때까지 유효 합니다. 또한 <xref:System.Security.CodeAccessPermission.RevertAssert%2A>또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A>보류 중인 Assert를 제거 합니다.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Assert 권한에 대 한 요청이 실패 합니다 부여 되지 않은 권한은 대해 무시 됩니다. 그러나 코드가 호출 스택에 낮은 호출 <xref:System.Security.IStackWalk.Demand%2A>권한에 대해는 <xref:System.Security.SecurityException>스택 워크 Assert 호출 하려고 하는 코드에 도달 하면 throw 됩니다.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> 이것은에 부여 하 려 했지만 어설션을 호출한 하는 코드에는 권한이 부여 되지 있기 때문입니다.      > [!CAUTION] > 메서드를 잘못 사용 하는 경우 보안 문제가 발생할 수 있습니다는 모든 코드 호출 체인에 지정된 된 리소스를 액세스할 수 있는 권한이 부여 되어야 하는 요구 사항을 제거 Assert를 호출 하기 때문에 있습니다. 따라서 매우 주의 해 서 사용 해야 합니다."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출 코드에 없는 <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>합니다."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "런타임 시 호출 스택의 모든 호출자에 게 현재 사용 권한 개체가 지정한 사용 권한이 부여 되었는지 여부를 결정 합니다."
  remarks: "이 메서드는 일반적으로 호출자에 게 리소스에 액세스할 수 있는 권한이 있는지 확인 하려면 보안 라이브러리에서 사용 됩니다. 예를 들어 보안 클래스 라이브러리의 파일 클래스 호출 필요한에 대 한 수요가 <xref:System.Security.Permissions.FileIOPermission>는 호출자가 요청한 파일 작업을 수행 하기 전에.</xref:System.Security.Permissions.FileIOPermission>       이 메서드를 호출 하는 코드의 사용 권한은 검사 하지 않습니다. 검사 해당 코드의 직접 실행 호출자에서 시작 되 고 스택 위로 진행 됩니다. 요청이 없는 경우에 성공 하면 <xref:System.Security.SecurityException>발생 합니다.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "호출 스택의 상위 호출자가 현재 사용 권한 개체가 지정한 사용 권한이 없습니다.       -또는-호출 스택의 호출자가 호출 <xref:System.Security.IStackWalk.Deny*>현재 권한 개체입니다.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "로 인해 모든 <xref:System.Security.IStackWalk.Demand*>호출 코드에 오류를 통해 전달 되는 현재 개체에 대 한.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "이 메서드는 호출 스택의 상위 호출자가 해당 호출자가 액세스할 수 있는 권한이 부여 되어 있는 경우에이 메서드를 호출 하는 코드를 통해 보호 된 리소스에 액세스 하지 못하도록 방지 합니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.       Deny는 프로그래머의 책임을 제한 하거나 거부에서 거부 된 권한으로 보호 되는 리소스에 액세스 하는 데 사용 되 고 호출 하는 메서드를 방지할 수 있으므로 실수로 인 한 보안 취약점을 방지할 수 있습니다. 메서드는 사용 권한에서 거부를 호출 하는 경우는 <xref:System.Security.IStackWalk.Demand%2A>Deny에 도달 하면 해당 보안 검사에서 실패에 해당 권한이 하위 호출 스택의 호출자가 호출 됩니다.</xref:System.Security.IStackWalk.Demand%2A>       거부 권한에 대 한 요청이 실패 합니다 부여 되지 않은 권한은 대해 무시 됩니다."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "로 인해 모든 <xref:System.Security.IStackWalk.Demand*>제외 하 고 현재 호출 스택의 상위 코드에 다른 리소스에 액세스할 권한이 부여 된 경우에 호출 코드에 오류를 통해 전달 되는 모든 개체에 대 한.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "PermitOnly는 비슷합니다 <xref:System.Security.IStackWalk.Deny%2A>그렇지 않은 경우는 성공 시 작동이 실패 하도록 스택 워크 있는 상황에서,.</xref:System.Security.IStackWalk.Deny%2A> 차이점은 <xref:System.Security.IStackWalk.Deny%2A>지정 스택을 사용 하면 사용 권한을 워크 실패 하지만 PermitOnly 스택 워크 실패 하지 않게 되는 유일한 권한을 지정 합니다.</xref:System.Security.IStackWalk.Deny%2A> 코드 지정 된 리소스에만 액세스할 수 사용 될 수 있도록 하려면이 메서드를 호출 합니다.       PermitOnly는 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다. 그러나 코드에 대 한 호출에 낮은 나중 스택 하는 경우 호출 <xref:System.Security.IStackWalk.Demand%2A>권한에 대해는 <xref:System.Security.SecurityException>스택 워크 PermitOnly을 호출 하려고 하는 코드에 도달 하면 throw 됩니다.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> 해당 권한이 PermitOnly 호출 했지만 PermitOnly를 호출 하는 코드에는 권한이 부여 되지 때문입니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
