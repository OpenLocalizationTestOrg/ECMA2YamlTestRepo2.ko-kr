### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityKeyElement
  id: SecurityKeyElement
  children:
  - System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKeyElement.KeySize
  langs:
  - csharp
  name: SecurityKeyElement
  nameWithType: SecurityKeyElement
  fullName: System.IdentityModel.Tokens.SecurityKeyElement
  type: Class
  summary: "확인 하 여 보안 키의 지연 된 해결 방법을 제공는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> 또는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> 암호화 함수는 필요한 경우에 합니다. 따라서 serialize 되는 응용 프로그램 및 deserialzied 켜고 문제 없이 네트워크에서 사용 되지 않는 키 식별자 절 또는 키 식별자를 수 있습니다."
  syntax:
    content: 'public class SecurityKeyElement : System.IdentityModel.Tokens.SecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)
  id: '#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)'
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)
  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyElement&quot;> </xref> 클래스에서 지정된 된 키 식별자입니다."
  syntax:
    content: public SecurityKeyElement (System.IdentityModel.Tokens.SecurityKeyIdentifier securityKeyIdentifier, System.IdentityModel.Selectors.SecurityTokenResolver securityTokenResolver);
    parameters:
    - id: securityKeyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "나타내는 키 식별자는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref>합니다."
    - id: securityTokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "로 확인 될 수 있는 토큰 확인자는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityKeyIdentifier</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)
  id: '#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)'
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)
  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyElement&quot;> </xref> 지정 된 키 식별자 절에서 클래스입니다."
  syntax:
    content: public SecurityKeyElement (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause, System.IdentityModel.Selectors.SecurityTokenResolver securityTokenResolver);
    parameters:
    - id: securityKeyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "키 식별자 절을 나타내는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref>합니다."
    - id: securityTokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "로 확인 될 수 있는 토큰 확인자는 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityKeyIdentifierClause</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: SecurityKeyElement.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 알고리즘을 사용 하 여 지정된 된 키를 해독 합니다."
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "키를 해독 하는 데 사용 되는 알고리즘입니다."
    - id: keyData
      type: System.Byte[]
      description: "암호화 키를 포함 하는 배열입니다."
    return:
      type: System.Byte[]
      description: "암호 해독 된 키가 포함 된 배열입니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: SecurityKeyElement.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정된 된 알고리즘을 사용 하 여 지정된 된 키를 암호화 합니다."
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "키를 해독 하는 데 사용 되는 알고리즘입니다."
    - id: keyData
      type: System.Byte[]
      description: "암호화 키가 포함 된 배열입니다."
    return:
      type: System.Byte[]
      description: "암호화 키를 포함 하는 배열입니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: SecurityKeyElement.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정 된 알고리즘은 비대칭 인지 여부를 나타내는 값을 반환 합니다."
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "확인할 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>알고리즘으로 비대칭; 런타임에 의해 처리 됩니다 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: SecurityKeyElement.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "이 키로 지정 된 알고리즘이 지원 되는지 여부를 나타내는 값을 반환 합니다."
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "확인할 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 키;로 된 알고리즘을 지원 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: SecurityKeyElement.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "지정 된 알고리즘은 대칭 인지 여부를 나타내는 값을 반환 합니다."
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "확인할 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>알고리즘으로 대칭; 런타임에 의해 처리 됩니다 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyElement.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  langs:
  - csharp
  name: KeySize
  nameWithType: SecurityKeyElement.KeySize
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "비트 키 크기를 가져옵니다."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "비트의 키 크기입니다."
  overload: System.IdentityModel.Tokens.SecurityKeyElement.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityKey
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)
  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifier,SecurityTokenResolver)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)
  nameWithType: SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.SecurityKeyElement(SecurityKeyIdentifierClause,SecurityTokenResolver)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: SecurityKeyElement.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(String,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: SecurityKeyElement.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: SecurityKeyElement.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: SecurityKeyElement.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: SecurityKeyElement.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.SecurityKeyElement.KeySize
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: KeySize
  nameWithType: SecurityKeyElement.KeySize
  fullName: System.IdentityModel.Tokens.SecurityKeyElement.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.SecurityKeyElement.#ctor*
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: SecurityKeyElement
  nameWithType: SecurityKeyElement.SecurityKeyElement
- uid: System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey*
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: DecryptKey
  nameWithType: SecurityKeyElement.DecryptKey
- uid: System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey*
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: EncryptKey
  nameWithType: SecurityKeyElement.EncryptKey
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: SecurityKeyElement.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: SecurityKeyElement.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: SecurityKeyElement.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SecurityKeyElement.KeySize*
  parent: System.IdentityModel.Tokens.SecurityKeyElement
  isExternal: false
  name: KeySize
  nameWithType: SecurityKeyElement.KeySize
