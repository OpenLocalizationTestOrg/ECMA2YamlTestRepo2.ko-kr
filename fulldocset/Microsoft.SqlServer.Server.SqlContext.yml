### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlServer.Server.SqlContext
  id: SqlContext
  children:
  - Microsoft.SqlServer.Server.SqlContext.IsAvailable
  - Microsoft.SqlServer.Server.SqlContext.Pipe
  - Microsoft.SqlServer.Server.SqlContext.TriggerContext
  - Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  langs:
  - csharp
  name: SqlContext
  nameWithType: SqlContext
  fullName: Microsoft.SqlServer.Server.SqlContext
  type: Class
  summary: "에 대 한 액세스를 제공 하는 호출자의 컨텍스트를 추상적으로 <xref href=&quot;Microsoft.SqlServer.Server.SqlPipe&quot;> </xref>, <xref href=&quot;Microsoft.SqlServer.Server.SqlTriggerContext&quot;> </xref>, 및 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> 개체입니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "SqlContext 개체 (트리거 내에서 실행 하는 코드)에 대 한 트리거 컨텍스트 및 파이프 개체 (사용 가능한 경우와 같은 저장된 프로시저에서)를 가져오는 데 사용할 수 있습니다. 가져올 때도 사용 수는 <xref:System.Security.Principal.WindowsIdentity>통합 인증을 사용 하 여 서버와 클라이언트를 인증 하는 경우에 호출 클라이언트의 Microsoft Windows id를 나타내는 개체입니다.</xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>. The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.  \n  \n [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/add/codesnippet/visualbasic/t-microsoft.sqlserver.se_11_1.vb)]\n [!code-cs[DataWorks SqlPipe.SendResultsRow#1](~/add/codesnippet/csharp/t-microsoft.sqlserver.se_11_1.cs)]"
  syntax:
    content: public sealed class SqlContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  id: IsAvailable
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
  fullName: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "및 컨텍스트 연결에 액세스할 수 있으면 호출 하는 코드는 SQL Server 내에서 실행 되는지 여부를 지정 합니다."
  remarks: "이 속성이 반환 false, 다른 모든 <xref:Microsoft.SqlServer.Server.SqlContext>멤버를 throw 한 <xref:System.InvalidOperationException>사용 하는 경우.</xref:System.InvalidOperationException> </xref:Microsoft.SqlServer.Server.SqlContext>       이 속성이 false를 반환 하는 경우 시도 된 연결 개체를 &quot;컨텍스트 연결 = true&quot; 연결 문자열에는 실패 합니다.       이 속성은 읽기 전용입니다.       (공용 언어 런타임 통합을 사용 하 여) SQL Server 내부와 SQL Server 외부 코드의 일부로 실행 될 수 있습니다 하는 경우 데이터 액세스에 대 한 ADO.NET에서는 컨텍스트 연결을 사용할 수 있는지 여부를 확인 하려면이 속성을 사용할 수 있습니다."
  syntax:
    content: public static bool IsAvailable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>컨텍스트 연결을 사용할 수 있는 경우 다른 <xref href=&quot;Microsoft.SqlServer.Server.SqlContext&quot;> </xref> 멤버에 액세스할 수 있습니다."
  overload: Microsoft.SqlServer.Server.SqlContext.IsAvailable*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe
  id: Pipe
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: Pipe
  nameWithType: SqlContext.Pipe
  fullName: Microsoft.SqlServer.Server.SqlContext.Pipe
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "호출자가 결과 집합, 메시지 및 클라이언트에 명령을 실행 한 결과 보낼 수 있도록 파이프 개체를 가져옵니다."
  remarks: "SQL Server 외부에서 호출 하는 경우는 <xref:System.NotSupportedException>throw 됩니다.</xref:System.NotSupportedException>       이 속성은 읽기 전용입니다."
  syntax:
    content: public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }
    return:
      type: Microsoft.SqlServer.Server.SqlPipe
      description: "인스턴스 <xref href=&quot;Microsoft.SqlServer.Server.SqlPipe&quot;> </xref> 파이프를 사용할 수 있는 경우 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 파이프 (예를 들어, 사용자 정의 함수)에서 사용할 수 없는 컨텍스트에서 메서드를 호출 하면 됩니다."
  overload: Microsoft.SqlServer.Server.SqlContext.Pipe*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  id: TriggerContext
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
  fullName: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "호출자는 트리거를 시작 하 고, 발생 한 이유 및 업데이트 된 열 지도 대 한 정보를 제공 하는 데 사용 하는 트리거 컨텍스트를 가져옵니다."
  remarks: "<xref:Microsoft.SqlServer.Server.SqlTriggerContext>개체 공용 언어 런타임 트리거에서 검색할 수 있습니다.</xref:Microsoft.SqlServer.Server.SqlTriggerContext>       TriggerContext 속성은 SQL Server 외부에서 액세스할 경우에 <xref:System.NotSupportedException>throw 됩니다.</xref:System.NotSupportedException>       이 속성은 읽기 전용입니다."
  syntax:
    content: public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }
    return:
      type: Microsoft.SqlServer.Server.SqlTriggerContext
      description: "인스턴스 <xref href=&quot;Microsoft.SqlServer.Server.SqlTriggerContext&quot;> </xref> 트리거 컨텍스트를 사용할 수 있는 경우 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 트리거 호출 외부에서 호출 하는 경우."
  overload: Microsoft.SqlServer.Server.SqlContext.TriggerContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  id: WindowsIdentity
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
  fullName: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "호출자의 Microsoft Windows id입니다."
  remarks: "SQL Server 내부 공용 언어 런타임 (CLR) 코드는 항상 프로세스 계정의 컨텍스트에서 호출 됩니다. SQL Server 프로세스 id 대신 호출 사용자의 id를 사용 하 여 작업을 수행 하려면 코드에 대 한 필요한 경우 가장 토큰이이 속성을 통해 얻어야 합니다. 가져온 후의 <xref:System.Security.Principal.WindowsIdentity>개체 호출자는 클라이언트 계정을 가장 하 고을 대신해 작업을 수행할 수 있습니다.</xref:System.Security.Principal.WindowsIdentity>       SQL Server 외부에서 호출 하는 경우는 <xref:System.NotSupportedException>throw 됩니다.</xref:System.NotSupportedException>       으로 표시 된 어셈블리만 `EXTERNAL_ACCESS` 또는 `UNSAFE` 사용 권한을이 속성에 액세스할 수 있습니다.       이 속성은 읽기 전용입니다."
  example:
  - "The following example shows how to get the Windows identity of the calling client and impersonate the client. See \"Impersonation Sample\" in SQL Server Books Online for an example of impersonation using the WindowsIdentity property.  \n  \n [!code-cs[DataWorks SqlContext.WindowsIdentity Sample#1](~/add/codesnippet/csharp/p-microsoft.sqlserver.se_6_1.cs)]\n [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/add/codesnippet/visualbasic/p-microsoft.sqlserver.se_6_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "A <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> 호출자의 Windows id를 나타내는 인스턴스 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 클라이언트가 SQL Server 인증을 사용 하 여 인증 되었습니다."
  overload: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
  fullName: Microsoft.SqlServer.Server.SqlContext.IsAvailable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: Pipe
  nameWithType: SqlContext.Pipe
  fullName: Microsoft.SqlServer.Server.SqlContext.Pipe
- uid: Microsoft.SqlServer.Server.SqlPipe
  parent: Microsoft.SqlServer.Server
  isExternal: false
  name: SqlPipe
  nameWithType: SqlPipe
  fullName: Microsoft.SqlServer.Server.SqlPipe
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
  fullName: Microsoft.SqlServer.Server.SqlContext.TriggerContext
- uid: Microsoft.SqlServer.Server.SqlTriggerContext
  parent: Microsoft.SqlServer.Server
  isExternal: false
  name: SqlTriggerContext
  nameWithType: SqlTriggerContext
  fullName: Microsoft.SqlServer.Server.SqlTriggerContext
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
  fullName: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: Pipe
  nameWithType: SqlContext.Pipe
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
