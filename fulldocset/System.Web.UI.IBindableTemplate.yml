### YamlMime:ManagedReference
items:
- uid: System.Web.UI.IBindableTemplate
  id: IBindableTemplate
  children:
  - System.Web.UI.IBindableTemplate.ExtractValues(System.Web.UI.Control)
  langs:
  - csharp
  name: IBindableTemplate
  nameWithType: IBindableTemplate
  fullName: System.Web.UI.IBindableTemplate
  type: Interface
  summary: "와 같은 ASP.NET 데이터 바인딩된 컨트롤에는 방법을 제공 <xref href=&quot;System.Web.UI.WebControls.DetailsView&quot;> </xref> 및 <xref href=&quot;System.Web.UI.WebControls.FormView&quot;> </xref>, 템플릿 내용 섹션에서 ASP.NET 데이터 소스 제어에 자동으로 바인딩할 합니다."
  remarks: "IBindableTemplate 인터페이스 사용 하면 ASP.NET 데이터 바인딩된 컨트롤 같은 <xref:System.Web.UI.WebControls.DetailsView>, <xref:System.Web.UI.WebControls.GridView>, 및 <xref:System.Web.UI.WebControls.FormView>와 같은 ASP.NET 데이터 소스 컨트롤에서 제공 하는 데이터에 바인딩할 <xref:System.Web.UI.WebControls.ObjectDataSource>또는 <xref:System.Web.UI.WebControls.SqlDataSource>데이터 바인딩된 컨트롤 템플릿 기반 콘텐츠를 포함 하는 경우.</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView>      > [!NOTE] > 페이지 개발자 IBindableTemplate 인터페이스를 구현 하지 않습니다. 사용자 지정 데이터 바인딩된 컨트롤을 만드는 개발자의 병렬 구현에서 IBindableTemplate 개체를 조작할 수는 <xref:System.Web.UI.WebControls.DataBoundControl.PerformDataBinding%2A>및 <xref:System.Web.UI.WebControls.GridView.ExtractRowValues%2A>메서드, 하지만 자신의 IBindableTemplate 개체를 구현 하지 않습니다.</xref:System.Web.UI.WebControls.GridView.ExtractRowValues%2A> </xref:System.Web.UI.WebControls.DataBoundControl.PerformDataBinding%2A>       와 같은 데이터 바인딩된 컨트롤 <xref:System.Web.UI.WebControls.GridView>일반적으로 자식 제어 트리를 인식 하므로 값을 바인딩하고,에서 값을 추출 하 고 수 데이터 바인딩이 발생할 때마다 데이터 바인딩된 컨트롤 및 데이터 소스 컨트롤 간의 이러한 값을 전달 합니다.</xref:System.Web.UI.WebControls.GridView> 그러나 페이지 개발자는 데이터 바인딩된 컨트롤에 대 한 템플릿 내용을 정의할 때 템플릿 내에서 자식 컨트롤에 표시 되지 않습니다는 부모 데이터 바인딩된 컨트롤: 자식 컨트롤 (효과적으로 컨트롤을 렌더링 자체) 이므로 콘텐츠, 하지만 연결 된 데이터 소스 컨트롤의 업데이트, 삽입 또는 삭제 작업에 전달할 이러한 자식 컨트롤의 값을 추출할 수 없습니다. 데이터 바인딩 시나리오의 템플릿 기반 콘텐츠는 부모 데이터 바인딩된 컨트롤에 불투명 합니다. `Bind` 구문을 사용 하면 IBindableTemplate 인스턴스 내 데이터 바인딩된 컨트롤에서 값을 추출 하는 데이터 바인딩된 컨트롤에 대 한 합니다.       단방향 또는 양방향 데이터 바인딩을 수 있습니다. (이러한 바인딩 방향은 정의한는 <xref:System.ComponentModel.BindingDirection>열거형.)</xref:System.ComponentModel.BindingDirection> 단방향 데이터 바인딩에 데이터 바인딩된 컨트롤을 데이터 소스 제어에서의 아웃 바운드 방향으로 수행 하는 데이터 바인딩 예를 들어 모든 데이터 읽기 시나리오 단방향 데이터 바인딩을 포함합니다. 단방향 데이터 바인딩에 대 한 단방향 데이터 바인딩 구문을 사용할 수 있습니다 (`<%# Eval(&quot;fieldname&quot;) %>`) 템플릿 내용 안에 양방향 ASP.NET 데이터 바인딩 구문을 사용 하 여 필요 하지 않습니다. 데이터 소스 컨트롤에 데이터 바인딩된 컨트롤에서 인바운드 방향의 데이터 바인딩을 설명 하는 양방향 데이터 바인딩을 합니다. 자동 편집, 삽입 및 삭제 시나리오 ASP.NET을 사용 하 여 데이터 바인딩 및 데이터 소스 제어는 양방향 데이터 바인딩 시나리오입니다. 이러한 시나리오에서는 양방향 데이터 바인딩 식 (`<%# Bind(&quot;fieldname&quot;) %>`). IBindableTemplate 인터페이스 및 ASP.NET 인프라 ASP.NET 데이터 소스 제어와 템플릿 내용 간의 자동 선언적 이며 양방향 데이터 바인딩을 지원합니다. ASP.NET 데이터 바인딩 식 및 구문에 대 한 자세한 내용은 참조 [데이터베이스에 바인딩](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742) 및 [데이터 바인딩 식 개요](~/add/includes/ajax-current-ext-md.md)합니다.       데이터 바인딩된 컨트롤에 대 한 템플릿 기반 콘텐츠는 대부분 선언적으로 정의 됩니다. 다음 표에서 가장 일반적으로 사용 되는 템플릿 기반 데이터를 데이터 바인딩된 컨트롤에 바인딩하는 프로세스를 설명 합니다.      | 데이터 바인딩된 컨트롤 | 프로세스 |   |-------------------------|-------------|   | <xref:System.Web.UI.WebControls.DetailsView>| 데이터 바인딩된 컨트롤을 사용 하 여 데이터 바인딩되는 `DataSourceID` 는 <xref:System.Web.UI.WebControls.TemplateField.ItemTemplate%2A>에 템플릿 내용 및 데이터 소스 컨트롤의 속성이 정의 되어 <xref:System.Web.UI.WebControls.TemplateField.EditItemTemplate%2A>또는 <xref:System.Web.UI.WebControls.TemplateField.InsertItemTemplate%2A>속성입니다. |   | <xref:System.Web.UI.WebControls.GridView>| 데이터 바인딩된 컨트롤을 사용 하 여 데이터 바인딩되는 `DataSourceID` 템플릿 내용 및 데이터 소스 컨트롤의 속성에 정의 된 프로그램 <xref:System.Web.UI.WebControls.TemplateField.ItemTemplate%2A>또는 <xref:System.Web.UI.WebControls.TemplateField.EditItemTemplate%2A>속성.</xref:System.Web.UI.WebControls.TemplateField.EditItemTemplate%2A> </xref:System.Web.UI.WebControls.TemplateField.ItemTemplate%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.TemplateField.InsertItemTemplate%2A> </xref:System.Web.UI.WebControls.TemplateField.EditItemTemplate%2A> </xref:System.Web.UI.WebControls.TemplateField.ItemTemplate%2A> </xref:System.Web.UI.WebControls.DetailsView> <xref:System.Web.UI.WebControls.GridView>컨트롤 삽입 작업을 지원 하지 않습니다. |   | <xref:System.Web.UI.WebControls.FormView>| 데이터 바인딩된 컨트롤을 사용 하 여 데이터 바인딩되는 `DataSourceID` 속성과 템플릿 내용은 <xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>에 정의 된 <xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>, 또는 <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>속성 또는 <xref:System.Web.UI.WebControls.TemplateField>개체에 저장 합니다. |       <xref:System.Web.UI.WebControls.DataList>및 <xref:System.Web.UI.WebControls.Repeater>컨트롤 자동 양방향 데이터 바인딩 시나리오를 지원 하지 않습니다.</xref:System.Web.UI.WebControls.Repeater> </xref:System.Web.UI.WebControls.DataList> </xref:System.Web.UI.WebControls.TemplateField> </xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A> </xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A> </xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A> </xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.GridView>       템플릿 내에서 ASP.NET 데이터 소스 컨트롤에 바인딩되는 템플릿 기반 콘텐츠를 구문 분석할 때 ASP.NET에서 암시적으로 IBindableTemplate 개체를 만듭니다. 특히, ASP.NET 파서의 인스턴스를 만듭니다는 <xref:System.Web.UI.CompiledBindableTemplateBuilder>ASP.NET 데이터 바인딩 구문을 사용 하 고 데이터 바인딩을 지 원하는 ASP.NET 웹 서버 컨트롤을 포함 하는 템플릿 기반 콘텐츠를 구문 분석할 때 클래스.</xref:System.Web.UI.CompiledBindableTemplateBuilder> 이러한 ASP.NET 서버 컨트롤 회색으로 표시 되는 <xref:System.ComponentModel.BindableAttribute>특성.</xref:System.ComponentModel.BindableAttribute>       IBindableTemplate 인터페이스 <xref:System.Web.UI.IBindableTemplate.ExtractValues%2A>.</xref:System.Web.UI.IBindableTemplate.ExtractValues%2A> 하나의 메서드를 정의합니다. 이 메서드는 자동으로 템플릿 내용에서 이름/값 쌍을 추출 하 고 런타임 시 데이터 소스 컨트롤에 전달할 수는 데이터 바인딩된 컨트롤에 대 한 양방향 데이터 바인딩을 정의 됩니다. 자동 데이터 바인딩에 성공 하려면에 대 한 필드 이름 템플릿 내용에서 추출 된 <xref:System.Web.UI.IBindableTemplate.ExtractValues%2A>메서드는 연결 된 데이터 소스 제어에 매개 변수 이름은 일치 해야 합니다.</xref:System.Web.UI.IBindableTemplate.ExtractValues%2A> 개발자가 호출 제어는 <xref:System.Web.UI.IBindableTemplate.ExtractValues%2A>메서드 명시적으로의 구현이 <xref:System.Web.UI.WebControls.FormView.ExtractRowValues%2A>또는 사용자 지정 데이터 바인딩된 컨트롤의 다른 유사한 방법을.</xref:System.Web.UI.WebControls.FormView.ExtractRowValues%2A> </xref:System.Web.UI.IBindableTemplate.ExtractValues%2A>"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.FormView> control can declaratively define templated content, bind to data provided by a <xref:System.Web.UI.WebControls.SqlDataSource> control, and display and edit existing records. The ASP.NET parser parses the templated content and creates an IBindableTemplate object at run time that is able to bind values from the <xref:System.Web.UI.WebControls.SqlDataSource> control to the data-binding areas defined in the template by both one-way ASP.NET data-binding syntax (`<%# Eval(\"fieldname\") %>`) and two-way data-binding syntax (`<%# Bind(\"fieldname\") %>`).  \n  \n> [!IMPORTANT]\n>  This control has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[FormView#1](~/add/codesnippet/visualbasic/t-system.web.ui.ibindabl_1.aspx)]\n [!code-cs[FormView#1](~/add/codesnippet/csharp/t-system.web.ui.ibindabl_1.aspx)]"
  syntax:
    content: 'public interface IBindableTemplate : System.Web.UI.ITemplate'
  implements:
  - System.Web.UI.ITemplate
  platform:
  - net462
- uid: System.Web.UI.IBindableTemplate.ExtractValues(System.Web.UI.Control)
  id: ExtractValues(System.Web.UI.Control)
  parent: System.Web.UI.IBindableTemplate
  langs:
  - csharp
  name: ExtractValues(Control)
  nameWithType: IBindableTemplate.ExtractValues(Control)
  fullName: System.Web.UI.IBindableTemplate.ExtractValues(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "클래스에서 구현 하는 경우 템플릿 내용에서 양방향 ASP.NET 데이터 바인딩 구문을 사용 하 여 바인딩된 값에 대 한 이름/값 쌍의 집합을 검색 합니다."
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary ExtractValues (System.Web.UI.Control container);
    parameters:
    - id: container
      type: System.Web.UI.Control
      description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref> 를 이름/값 쌍을 추출해 올으로 전달 되는 데이터 바인딩된 컨트롤에서 양방향 데이터 바인딩 시나리오에는 연결 된 데이터 소스 제어 합니다."
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> 이름/값 쌍입니다. 이름 템플릿 내용에서 컨트롤의 이름을 나타내고 값이 양방향 ASP.NET 데이터 바인딩 구문을 사용 하 여 바인딩된 속성 값의 현재 값입니다."
  overload: System.Web.UI.IBindableTemplate.ExtractValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.IBindableTemplate.ExtractValues(System.Web.UI.Control)
  parent: System.Web.UI.IBindableTemplate
  isExternal: false
  name: ExtractValues(Control)
  nameWithType: IBindableTemplate.ExtractValues(Control)
  fullName: System.Web.UI.IBindableTemplate.ExtractValues(Control)
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.IBindableTemplate.ExtractValues*
  parent: System.Web.UI.IBindableTemplate
  isExternal: false
  name: ExtractValues
  nameWithType: IBindableTemplate.ExtractValues
