### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.ViewTechnology
  id: ViewTechnology
  children:
  - System.ComponentModel.Design.ViewTechnology.Default
  - System.ComponentModel.Design.ViewTechnology.Passthrough
  - System.ComponentModel.Design.ViewTechnology.WindowsForms
  langs:
  - csharp
  name: ViewTechnology
  nameWithType: ViewTechnology
  fullName: System.ComponentModel.Design.ViewTechnology
  type: Enum
  summary: "일련의 디자이너 호스트가 지 원하는 기술에 대 한 식별자를 정의 합니다."
  remarks: "대체 하 고 ViewTechnology 기능이 없으므로에 기능을 추가 하는 보기 어댑터 모델 그러나 선택 하는 경우 이전 버전과 호환성 및 이후 사용 ViewTechnology 기능이 유지 됩니다. 자세한 내용은 &quot;.NET 셰이프 라이브러리:: A 샘플&quot; 디자이너 참조 http://windowsforms.net/articles/shapedesigner.aspx에 Windows Forms 기술 자료에서 합니다.       ViewTechnology는 디자이너 호스팅 문서의 표시 제어를 사용 하는 모드를 나타낼 수 있는 식별자를 정의 합니다.       디자이너 호스팅 환경에 기본값만 사용 해야 합니다. 이전 버전의 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)], ViewTechnology 열거형 루트 디자이너에서 지 원하는 UI 모델의 형식을 지정 합니다. 대신 사용 해야이 모델을 확장할 수 없기 때문에 *뷰 어댑터* 모델입니다. 뷰 어댑터는 다른 형식으로의 개체를 조정 하는 형식입니다.       예를 들어, HTML 디자이너를 반환할 수 있습니다는 `DemoDOM` 트리를 뷰로 합니다. HTML 디자이너의 기본 뷰 기술을 반환합니다. Windows Forms 호스팅 환경을 사용할 수 있는 보기 어댑터 클래스는 것입니다. 이러한 클래스는 하나의 변환 수는 `DemoDOM` Windows Forms 컨트롤로 호스팅 응용 프로그램 디자이너가이 유형을 지원할 수 있습니다. 어댑터가 디자이너의 반환 된 데이터 형식을 처리할 수 경우 <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A>메서드를 디자이너의 로드 실패 하 고 사용자가 오류와 함께 표시 합니다.</xref:System.ComponentModel.Design.IRootDesigner.GetView%2A>       [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]에 모든 UI 기술에 적용할 수 있도록 뷰 어댑터를 제공 하기 위한 확장 가능한 스키마를 있습니다. 개체 모델은 즉시 사용 가능 및 제&3; 자 기술 공급자는 적절 한 보기 어댑터를 제공할 수도 수 있습니다.       사용 하는 예제에 대 한 어댑터를 확인할 &quot;.NET 셰이프 라이브러리:: A 샘플 디자이너&quot; http://windowsforms.net/articles/shapedesigner.aspx에 Windows Forms 기술 자료에서를 참조 하십시오."
  example:
  - "The following code example demonstrates how to use the ViewTechnology class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner> interface.  \n  \n [!code-cs[IRootDesigner Sample#1](~/add/codesnippet/csharp/t-system.componentmodel._118_1.cs)]\n [!code-vb[IRootDesigner Sample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._118_1.vb)]\n [!code-cpp[IRootDesigner Sample#1](~/add/codesnippet/cpp/t-system.componentmodel._118_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public enum ViewTechnology
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.ComponentModel.Design.ViewTechnology.Default
  id: Default
  parent: System.ComponentModel.Design.ViewTechnology
  langs:
  - csharp
  name: Default
  nameWithType: ViewTechnology.Default
  fullName: System.ComponentModel.Design.ViewTechnology.Default
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "기본 뷰 기술 지원을 지정합니다."
  remarks: "루트 디자이너에는 모든 종류의 개체를 반환할 수 있습니다 하지만 개체는 호스트의 기술에 대 한 어댑터와 호환 되어야 합니다. 호스팅 환경 등 [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] 새로운 뷰 기술 어댑터에 연결 하는 방법을 제공 합니다. Windows Forms 디자이너의 기본 뷰 개체는 <xref:System.Windows.Forms.Control?displayProperty=fullName>인스턴스.</xref:System.Windows.Forms.Control?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how to use the ViewTechnology class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner> interface.  \n  \n [!code-cs[IRootDesigner Sample#1](~/add/codesnippet/csharp/t-system.componentmodel._118_1.cs)]\n [!code-vb[IRootDesigner Sample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._118_1.vb)]\n [!code-cpp[IRootDesigner Sample#1](~/add/codesnippet/cpp/t-system.componentmodel._118_1.cpp)]"
  syntax:
    content: Default
    return:
      type: System.ComponentModel.Design.ViewTechnology
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.ViewTechnology.Passthrough
  id: Passthrough
  parent: System.ComponentModel.Design.ViewTechnology
  langs:
  - csharp
  name: Passthrough
  nameWithType: ViewTechnology.Passthrough
  fullName: System.ComponentModel.Design.ViewTechnology.Passthrough
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "View 개체 개발 환경에 직접 전달 하는 모드를 나타냅니다."
  remarks: "View 개체 개발 환경에서 요청 하는 모든 인터페이스를 구현 해야 합니다. [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] 개발 환경에서는 ActiveX 컨트롤, 액티브 문서를 통해 사용할 수 있는 IVsWindowPane 인터페이스를 구현 하는 개체 또는 중 하나인 개체 보기 [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] 통합) 프로그램. [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] 개발 환경에서는이 뷰 기술에 대 한 지원을 제공 합니다. 이 뷰 기술에 대 한 지원에 모든 개발 환경에서 반드시 사용할 수 없는 경우"
  syntax:
    content: Passthrough
    return:
      type: System.ComponentModel.Design.ViewTechnology
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.ViewTechnology.WindowsForms
  id: WindowsForms
  parent: System.ComponentModel.Design.ViewTechnology
  langs:
  - csharp
  name: WindowsForms
  nameWithType: ViewTechnology.WindowsForms
  fullName: System.ComponentModel.Design.ViewTechnology.WindowsForms
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel.Design
  summary: "Windows Forms 컨트롤 개체의 루트 디자이너에 대 한 화면을 제공 하는 모드를 나타냅니다."
  remarks: "디자이너 호스트 Windows Forms 컨트롤 개발 환경 문서 창을 채웁니다."
  example:
  - "The following code example demonstrates how to use the ViewTechnology class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.LocalizationExtenderProvider> class.  \n  \n [!code-cpp[LocalizationExtenderProviderExample#1](~/add/codesnippet/cpp/t-system.componentmodel._118_2.cpp)]\n [!code-cs[LocalizationExtenderProviderExample#1](~/add/codesnippet/csharp/t-system.componentmodel._118_2.cs)]\n [!code-vb[LocalizationExtenderProviderExample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._118_2.vb)]"
  syntax:
    content: WindowsForms
    return:
      type: System.ComponentModel.Design.ViewTechnology
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.ComponentModel.Design.ViewTechnology.Default
  parent: System.ComponentModel.Design.ViewTechnology
  isExternal: false
  name: Default
  nameWithType: ViewTechnology.Default
  fullName: System.ComponentModel.Design.ViewTechnology.Default
- uid: System.ComponentModel.Design.ViewTechnology
  parent: System.ComponentModel.Design
  isExternal: false
  name: ViewTechnology
  nameWithType: ViewTechnology
  fullName: System.ComponentModel.Design.ViewTechnology
- uid: System.ComponentModel.Design.ViewTechnology.Passthrough
  parent: System.ComponentModel.Design.ViewTechnology
  isExternal: false
  name: Passthrough
  nameWithType: ViewTechnology.Passthrough
  fullName: System.ComponentModel.Design.ViewTechnology.Passthrough
- uid: System.ComponentModel.Design.ViewTechnology.WindowsForms
  parent: System.ComponentModel.Design.ViewTechnology
  isExternal: false
  name: WindowsForms
  nameWithType: ViewTechnology.WindowsForms
  fullName: System.ComponentModel.Design.ViewTechnology.WindowsForms
