### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.SHA1Managed
  id: SHA1Managed
  children:
  - System.Security.Cryptography.SHA1Managed.#ctor
  - System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.SHA1Managed.HashFinal
  - System.Security.Cryptography.SHA1Managed.Initialize
  langs:
  - csharp
  name: SHA1Managed
  nameWithType: SHA1Managed
  fullName: System.Security.Cryptography.SHA1Managed
  type: Class
  summary: "계산 된 <xref href=&quot;System.Security.Cryptography.SHA1&quot;> </xref> 관리 되는 라이브러리를 사용 하 여 입력된 데이터에 대 한 해시입니다."
  remarks: "해시는 많은 양의 데이터를 나타내는 고정 된 크기의 고유 값으로 사용 됩니다. 해당 데이터도 일치 하는 경우에 두 데이터 집합의 해시 일치 해야 합니다. 약간 변경 된 데이터에 큰 예측할 수 없는 해시 변화 시킵니다.       이 순수 하 게 관리 되는 구현의 <xref:System.Security.Cryptography.SHA1>CAPI 줄 바꿈을 하지 않습니다.</xref:System.Security.Cryptography.SHA1>       SHA1Managed 알고리즘에 대 한 해시 크기는 160 비트입니다."
  example:
  - "The following example computes the SHA1Managed hash for `data` and stores it in `result`. This example assumes that there is a predefined constant `DATA_SIZE`.  \n  \n [!code-cpp[Classic SHA1Managed Example#1](~/add/codesnippet/cpp/t-system.security.crypto_56_1.cpp)]\n [!code-cs[Classic SHA1Managed Example#1](~/add/codesnippet/csharp/t-system.security.crypto_56_1.cs)]\n [!code-vb[Classic SHA1Managed Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_56_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SHA1Managed : System.Security.Cryptography.SHA1
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.SHA1
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.SHA1.Create
  - System.Security.Cryptography.SHA1.Create(System.String)
  platform:
  - net462
- uid: System.Security.Cryptography.SHA1Managed.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SHA1Managed
  langs:
  - csharp
  name: SHA1Managed()
  nameWithType: SHA1Managed.SHA1Managed()
  fullName: System.Security.Cryptography.SHA1Managed.SHA1Managed()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.SHA1Managed&quot;> </xref> 클래스입니다."
  syntax:
    content: public SHA1Managed ();
    parameters: []
  overload: System.Security.Cryptography.SHA1Managed.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "이 클래스는 fips와 호환 되지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.SHA1Managed
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: SHA1Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.SHA1Managed.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "개체에 쓰여진 데이터의 경로 <xref href=&quot;System.Security.Cryptography.SHA1Managed&quot;> </xref> 해시를 계산할 해시 알고리즘입니다."
  syntax:
    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "입력된 데이터입니다."
    - id: ibStart
      type: System.Int32
      description: "데이터 사용을 시작할 바이트 배열의 오프셋입니다."
    - id: cbSize
      type: System.Int32
      description: "데이터로 사용할 배열의 바이트 수입니다."
  overload: System.Security.Cryptography.SHA1Managed.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SHA1Managed.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.SHA1Managed
  langs:
  - csharp
  name: HashFinal()
  nameWithType: SHA1Managed.HashFinal()
  fullName: System.Security.Cryptography.SHA1Managed.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "계산 된 반환 <xref href=&quot;System.Security.Cryptography.SHA1&quot;> </xref> 후 모든 데이터의 해시 값이 개체에 기록 되었습니다."
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "계산 된 해시 코드입니다."
  overload: System.Security.Cryptography.SHA1Managed.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SHA1Managed.Initialize
  id: Initialize
  parent: System.Security.Cryptography.SHA1Managed
  langs:
  - csharp
  name: Initialize()
  nameWithType: SHA1Managed.Initialize()
  fullName: System.Security.Cryptography.SHA1Managed.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "인스턴스를 초기화 <xref href=&quot;System.Security.Cryptography.SHA1Managed&quot;> </xref>합니다."
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.SHA1Managed.Initialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SHA1
  isExternal: false
  name: System.Security.Cryptography.SHA1
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.SHA1Managed.#ctor
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: SHA1Managed()
  nameWithType: SHA1Managed.SHA1Managed()
  fullName: System.Security.Cryptography.SHA1Managed.SHA1Managed()
- uid: System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: SHA1Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.SHA1Managed.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SHA1Managed.HashFinal
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: HashFinal()
  nameWithType: SHA1Managed.HashFinal()
  fullName: System.Security.Cryptography.SHA1Managed.HashFinal()
- uid: System.Security.Cryptography.SHA1Managed.Initialize
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: Initialize()
  nameWithType: SHA1Managed.Initialize()
  fullName: System.Security.Cryptography.SHA1Managed.Initialize()
- uid: System.Security.Cryptography.SHA1Managed.#ctor*
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: SHA1Managed
  nameWithType: SHA1Managed.SHA1Managed
- uid: System.Security.Cryptography.SHA1Managed.HashCore*
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: HashCore
  nameWithType: SHA1Managed.HashCore
- uid: System.Security.Cryptography.SHA1Managed.HashFinal*
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: HashFinal
  nameWithType: SHA1Managed.HashFinal
- uid: System.Security.Cryptography.SHA1Managed.Initialize*
  parent: System.Security.Cryptography.SHA1Managed
  isExternal: false
  name: Initialize
  nameWithType: SHA1Managed.Initialize
