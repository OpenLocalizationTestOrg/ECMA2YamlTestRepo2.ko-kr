### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  id: LinqDataSourceUpdateEventArgs
  children:
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs
  nameWithType: LinqDataSourceUpdateEventArgs
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  type: Class
  summary: "에 대 한 데이터를 제공는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Updating&quot;> </xref> 이벤트입니다."
  remarks: "LinqDataSourceUpdateEventArgs 개체에 대 한 모든 이벤트 처리기에 전달 되는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> 데이터 원본에서 업데이트 작업이 실행 되기 전에 데이터를 검사할 수 LinqDataSourceUpdateEventArgs 개체를 사용할 수 있습니다. 그런 다음 데이터 유효성 검사, 데이터 클래스에서 throw 되는 유효성 검사 예외를 검사 하거나 변경할 수 있습니다는 값을 업데이트 하기 전에 합니다. 업데이트 작업을 취소할 수도 있습니다.       <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>개체를 원래 데이터 원본에서 데이터를 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>개체 업데이트 작업 중 데이터 원본에 저장 될 데이터를 포함 합니다.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>       데이터 소스를 나타내는 개체 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>클래스</xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 의 인스턴스를 포함 하는 속성</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 데이터를 업데이트 하기 전에 유효성 검사 예외를 throw 하는 경우 통해 모든 유효성 검사 예외를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>속성.</xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 유효성 검사 예외가 throw 되 면는 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>속성 포함 `null`.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 유효성 검사 예외를 처리 하 고 예외를 다시 throw 하지 않을 경우에 설정 된 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>속성을 `true`.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>       기본적으로는 <xref:System.Web.UI.WebControls.LinqDataSource>제어 원래 값을 데이터 원본에서 보기에 상태 저장 제외 하 고 웹 페이지에서 해당 <xref:System.Data.Linq.Mapping.ColumnAttribute>특성으로 표시 되어 `UpdateCheck.Never`.</xref:System.Data.Linq.Mapping.ColumnAttribute> </xref:System.Web.UI.WebControls.LinqDataSource> LINQ to SQL은 자동으로 데이터를 업데이트 하기 전에 데이터의 무결성을 확인 합니다. 뷰 상태에 저장 된 원래 값으로 데이터 원본에 있는 현재 값을 비교 하 여 수행 합니다. LINQ to SQL 데이터 원본에 있는 값 변경 된 경우 예외가 발생 합니다. 에 대 한 처리기를 만들어 추가적인 데이터 유효성 검사를 수행할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>이벤트.</xref:System.Web.UI.WebControls.LinqDataSource.Updating>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_352_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_352_1.cs)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: 'public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs'
  inheritance:
  - System.ComponentModel.CancelEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&quot;> </xref> 지정 된 예외 클래스입니다."
  syntax:
    content: public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);
    parameters:
    - id: exception
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "업데이트할 데이터 유효성을 검사할 때 발생 한 예외입니다."
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  id: '#ctor(System.Object,System.Object)'
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs(Object,Object)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&quot;> </xref> 클래스입니다."
  syntax:
    content: public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);
    parameters:
    - id: originalObject
      type: System.Object
      description: "에 지정 된 형식의 개체는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>데이터 원본에서 검색 된 초기 값을 포함 하는 속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
    - id: newObject
      type: System.Object
      description: "에 지정 된 형식의 개체는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>데이터 원본에 저장 될 값을 포함 하는 속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "업데이트 작업 전의 데이터 유효성을 검사 하는 동안 throw 된 예외를 가져옵니다."
  remarks: "업데이트 작업을 수행 하기 전에 유효성 검사 예외가 발생 하는 경우 예외는 Exception 속성에 저장 됩니다. 에 대 한 이벤트 처리기에는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>이벤트, 예외 속성을 통해 예외를 검색할 수 있습니다.</xref:System.Web.UI.WebControls.LinqDataSource.Updating>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }
    return:
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "오류가 발생 하는 경우 해당 예외 그렇지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "예외가 처리 되었는지 여부와 그 해야 throw 되지 않도록 다시를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "에 대 한 이벤트 처리기를 만들 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>업데이트 작업 이전에 수행 된 유효성 검사 예외를 확인 하려면.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> 예외를 처리 하 고 다시 throw 하 여 원하지 않는 경우 ExceptionHandled 속성을 설정 `true`합니다. ExceptionHandled 속성을 설정 하지 않는 경우 `true`, 예외 호출 스택에 있는 다음 이벤트 처리기에 전파 됩니다."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>예외가 처리 되었습니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  id: NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "데이터 원본에 저장 될 값을 포함 하는 개체를 가져옵니다."
  remarks: "에 대 한 이벤트 처리기를 만들고는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>이벤트 및 검색에서 데이터 유효성 검사 NewObject 속성을 포함 하 고.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> 데이터를 변경 하거나 업데이트 작업을 취소할 수 있습니다."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the NewObject property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the NewObject property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1298_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1298_1.cs)]"
  syntax:
    content: public object NewObject { get; }
    return:
      type: System.Object
      description: "에 지정 된 형식의 개체는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>저장 하려면 데이터를 포함 하는 속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  id: OriginalObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "원래 데이터 원본에서 검색 된 값이 포함 된 개체를 가져옵니다."
  remarks: "데이터 원본에 있는 현재 값에 대 한 원래 값을 확인 하 고 업데이트 작업을 취소 하거나 다른 작업을 수행할를 OriginalObject 속성을 사용할 수 있습니다.       속성에 대해서는 값을 포함 하는 속성 OriginalObject 뷰에서 웹 페이지에는 상태를 유지 합니다. 이러한 경우에는 속성은 유지:-이 데이터 바인딩된 컨트롤에 표시 됩니다.      -는 <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName>의 속성은 <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName>특성이로 설정 된 `Always` 또는 `WhenChanged`.</xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName> </xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName>       경우는 <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A>속성이 `Never` 및 데이터 바인딩된 컨트롤에는 값이 표시 되지, 웹 페이지에는 값이 저장 되지 않습니다.</xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> 이 경우 OriginalObject 속성에 할당할 수 없습니다."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the OriginalObject property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_761_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_761_1.cs)]"
  syntax:
    content: public object OriginalObject { get; }
    return:
      type: System.Object
      description: "에 지정 된 형식의 개체는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>데이터 원본에서 검색 된 데이터를 포함 하는 속성.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.CancelEventArgs
  isExternal: false
  name: System.ComponentModel.CancelEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs(Object,Object)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
