### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DataAdapter
  id: DataAdapter
  children:
  - System.Data.Common.DataAdapter.#ctor
  - System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.GetFillParameters
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: DataAdapter
  nameWithType: DataAdapter
  fullName: System.Data.Common.DataAdapter
  type: Class
  summary: "채우는 데 사용 되는 데이터베이스 연결 및 SQL 명령 집합을 나타냅니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스를 업데이트 합니다."
  remarks: "DataAdapter 사이의 브리지 역할을 <xref:System.Data.DataSet>와 데이터 소스를 검색 하 고 데이터를 저장 합니다.</xref:System.Data.DataSet> DataAdapter에서 <xref:System.Data.Common.DataAdapter.Fill%2A> <xref:System.Data.DataSet>데이터 원본 및 <xref:System.Data.IDataAdapter.Update%2A> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 데이터와 일치 하도록 데이터 원본에서 데이터를 변경,</xref:System.Data.IDataAdapter.Update%2A> 데이터에 맞게</xref:System.Data.DataSet> 데이터를 변경,</xref:System.Data.Common.DataAdapter.Fill%2A> 매핑하는 방법으로이 연결을 제공       SQL Server 데이터베이스에 연결 하는 경우에 사용 하 여 전반적인 성능을 높일 수 있습니다는 <xref:System.Data.SqlClient.SqlDataAdapter>관련 함께 <xref:System.Data.SqlClient.SqlCommand>및 <xref:System.Data.SqlClient.SqlConnection>개체.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlDataAdapter> OLE DB 지원 데이터 소스와 연결 된 DataAdapter 사용할 <xref:System.Data.OleDb.OleDbCommand>및 <xref:System.Data.OleDb.OleDbConnection>개체.</xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbCommand> ODBC 지원 데이터 소스와 연결 된 DataAdapter 사용할 <xref:System.Data.Odbc.OdbcCommand>및 <xref:System.Data.Odbc.OdbcConnection>개체.</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcCommand> Oracle 데이터베이스와 연결 된 DataAdapter 사용 <xref:System.Data.OracleClient.OracleCommand>및 <xref:System.Data.OracleClient.OracleConnection>개체.</xref:System.Data.OracleClient.OracleConnection> </xref:System.Data.OracleClient.OracleCommand>       데이터 어댑터의 인스턴스를 만들 때 읽기/쓰기 속성은 초기 값으로 설정 됩니다. 이러한 값의 목록이 DataAdapter 생성자를 참조 하십시오."
  syntax:
    content: 'public class DataAdapter : System.ComponentModel.Component, System.Data.IDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Data.IDataAdapter
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: DataAdapter()
  nameWithType: DataAdapter.DataAdapter()
  fullName: System.Data.Common.DataAdapter.DataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 인스턴스를 초기화 한 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> 클래스입니다."
  remarks: "인스턴스가 <xref:System.Data.Common.DataAdapter>만들어지면 다음 읽기/쓰기 속성은 다음과 같은 초기 값으로 설정 됩니다.</xref:System.Data.Common.DataAdapter>      | 속성 | 초기 값 |   |----------------|-------------------|   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|   | <xref:System.Data.Common.DataAdapter.TableMappings%2A>| <xref:System.Data.Common.DataAdapter.TableMappings%2A>개체의 배열입니다. |       속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</xref:System.Data.Common.DataAdapter.TableMappings%2A> </xref:System.Data.Common.DataAdapter.TableMappings%2A> </xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  syntax:
    content: protected DataAdapter ();
    parameters: []
  overload: System.Data.Common.DataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  id: '#ctor(System.Data.Common.DataAdapter)'
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: DataAdapter(DataAdapter)
  nameWithType: DataAdapter.DataAdapter(DataAdapter)
  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 인스턴스를 초기화 한 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> 동일한 형식의 기존 개체에서 클래스입니다."
  remarks: "이 오버 로드는 <xref:System.Data.Common.DataAdapter>생성자는 사용 하기 위한.NET Framework 데이터 공급자에서 복제 구현에서 사용 하기 위해 비슷한 생성자를 구현 하는 경우.</xref:System.Data.Common.DataAdapter>"
  syntax:
    content: protected DataAdapter (System.Data.Common.DataAdapter from);
    parameters:
    - id: from
      type: System.Data.Common.DataAdapter
      description: "A <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> 새 만드는 데 개체 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  id: AcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "나타내는 값을 가져오거나 여부 <> </> *> 라고 하는 <xref href=&quot;System.Data.DataRow&quot;> </xref> 에 추가 되는 <xref href=&quot;System.Data.DataTable&quot;> </xref> 동안는 * *채우기** 작업 합니다."
  remarks: "경우 `false`, <xref:System.Data.DataRow.AcceptChanges%2A>를 호출 하지 않으면 새로 추가 된 행이 삽입 된 행으로 처리 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A>"
  syntax:
    content: public bool AcceptChangesDuringFill { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <xref:System.Data.DataRow.AcceptChanges*>라고 하는 <xref href=&quot;System.Data.DataRow&quot;> </xref>고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataRow.AcceptChanges*> 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.AcceptChangesDuringFill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  id: AcceptChangesDuringUpdate
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "가져오거나 여부 <> </> *> 중에 호출 됩니다는 <> </> *> 합니다."
  remarks: "호출 하는 동안는 `Update` 의 메서드는 `DataAdapter`, 데이터베이스 데이터를 출력 매개 변수 또는 결과 집합의 첫 번째 반환 된 레코드로 ADO.NET 응용 프로그램으로 다시 보낼 수 있습니다. ADO.NET에서 이러한 값을 검색 하 고의 해당 열을 업데이트할 수는 <xref:System.Data.DataRow>업데이트할.</xref:System.Data.DataRow> 기본적으로 ADO.NET 호출의 `AcceptChanges` 의 메서드는 `DataRow` 업데이트 후 합니다. 그러나 병합 하려는 경우 업데이트 된 행에 다시 다른 <xref:System.Data.DataTable>, 기본 키 열의 원래 값을 유지할 할 수 있습니다.</xref:System.Data.DataTable> 예를 들어 id 열, 등 데이터베이스의 자동 증가 열에 해당 하는 기본 키 열에 할당 된 원래 값이 일치 하지 않는 데이터베이스에 의해 할당 된 새 값을 포함할 수 있습니다는 `DataRow`합니다. 기본적으로 `AcceptChanges` 이후에 업데이트, 및 되었을 수 있습니다는 행의 원래 값이 암시적으로 호출 <xref:System.Data.DataColumn.AutoIncrement%2A>ADO.NET에 의해 할당 되는 값은 손실 됩니다.</xref:System.Data.DataColumn.AutoIncrement%2A> 원래 값을 유지할 수 있습니다는 `DataRow` 방지 하 여 `ADO.NET` 호출에서 `AcceptChanges` AcceptChangesDuringUpdate 속성을 설정 하 여 행에 대 한 업데이트를 수행한 후 `false`를 원래 값을 유지 합니다.      > [!NOTE] > 설정은 `AcceptChangesDuringUpdate` 속성을 `false` 삽입 뿐 아니라, 모든 데이터 수정에 적용 됩니다. 동일한 업데이트에는 행을 편집 하거나 삭제 하 고 호출을 억제 하려면 `AcceptChanges` 고 설정 하는 대신 삽입에 대해서만 `AccceptChangesDuringUpdate` 를 `false`에 대 한 이벤트 처리기를 사용 하 여는 `RowUpdated` 의 이벤트는 `DataAdapter`합니다. 이벤트 처리기를 확인할 수 있습니다는 <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A>확인 하 여 데이터 수정이 삽입, 고 `true`, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정</xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> 자세한 내용 및 예제에 대 한 참조 [검색 Id 또는 일련 번호 값](~/add/includes/ajax-current-ext-md.md)합니다."
  example:
  - "This example demonstrates extracting changed rows from a `DataTable` and using a <xref:System.Data.SqlClient.SqlDataAdapter> to update the data source and retrieve a new identity column value. By setting the `AcceptChangesDuringUpdate` property of the <xref:System.Data.SqlClient.SqlDataAdapter> to `false` to preserve the original auto increment value, the new data can then be merged into the original <xref:System.Data.DataTable>, even if the new identity value does not match the original auto increment value in the `DataTable`.  \n  \n [!code-vb[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_7_1.vb)]\n [!code-cs[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/csharp/p-system.data.common.dat_7_1.cs)]"
  syntax:
    content: public bool AcceptChangesDuringUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <> </> *> 동안 호출 되어는 <> </> *> 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.CloneInternals
  id: CloneInternals
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: CloneInternals()
  nameWithType: DataAdapter.CloneInternals()
  fullName: System.Data.Common.DataAdapter.CloneInternals()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "이 인스턴스의 복사본을 만듭니다 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref>합니다."
  remarks: "이 메서드는 사용 되지 않습니다. <xref:System.Data.Common.DataAdapter.%23ctor%2A>생성자는이 메서드 대신 사용 해야 합니다.</xref:System.Data.Common.DataAdapter.%23ctor%2A>       모든 명령에서 <xref:System.Data.Common.DataAdapter.TableMappings%2A>, <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>, 및 <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>복제 됩니다.</xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.TableMappings%2A> 그러나 명령에 대 한 연결 된 복사 되지는 않지만, 공유 합니다. 따라서 복제 <xref:System.Data.Common.DataAdapter>원본과 동일한 연결에 대해 사용할 수 있습니다.</xref:System.Data.Common.DataAdapter>"
  syntax:
    content: protected virtual System.Data.Common.DataAdapter CloneInternals ();
    parameters: []
    return:
      type: System.Data.Common.DataAdapter
      description: "복제 된 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.CloneInternals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError
  id: ContinueUpdateOnError
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "발견 했는지 여부를 예외 오류를 생성 하는 행을 업데이트 하는 동안 지정 하는 값을 가져오거나 설정 합니다."
  remarks: "경우 `ContinueUpdateOnError` 로 설정 된 `true`, 행을 업데이트 하는 동안 오류가 발생 하면 예외가 throw 됩니다. 행의 업데이트를 건너뛰고 오류 정보에 저장 되는 <xref:System.Data.DataRow.RowError%2A>오류에 대 한 행의 속성입니다.</xref:System.Data.DataRow.RowError%2A> <xref:System.Data.Common.DataAdapter>계속 해 서 후속 행을 업데이트 합니다.</xref:System.Data.Common.DataAdapter>       경우 `ContinueUpdateOnError` 로 설정 된 `false`, 행을 업데이트 하는 동안 오류가 발생 하면 예외가 throw 됩니다."
  syntax:
    content: public bool ContinueUpdateOnError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>예외를 생성 하지 않고 업데이트를 계속 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.ContinueUpdateOnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.CreateTableMappings
  id: CreateTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: CreateTableMappings()
  nameWithType: DataAdapter.CreateTableMappings()
  fullName: System.Data.Common.DataAdapter.CreateTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;> </xref>합니다."
  syntax:
    content: protected virtual System.Data.Common.DataTableMappingCollection CreateTableMappings ();
    parameters: []
    return:
      type: System.Data.Common.DataTableMappingCollection
      description: "새 테이블 매핑 컬렉션입니다."
  overload: System.Data.Common.DataAdapter.CreateTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "사용 하는 관리 되지 않는 리소스를 해제는 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> 관리 되는 리소스를 선택적으로 해제 합니다."
  remarks: "이 메서드는 public <xref:System.IDisposable.Dispose%2A>메서드 및 <xref:System.Object.Finalize%2A>메서드.</xref:System.Object.Finalize%2A> </xref:System.IDisposable.Dispose%2A> `Dispose`보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A>호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</xref:System.Object.Finalize%2A>       경우는 `disposing` 매개 변수는 `true`,이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Data.Common.DataAdapter>참조.</xref:System.Data.Common.DataAdapter> 이 메서드 호출에서 `Dispose` 각 참조 된 개체의 메서드."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>관리 되는 관리 되지 않는 리소스만 해제 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 만 관리 되지 않는 리소스를 해제 합니다."
  overload: System.Data.Common.DataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 행의 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스에 맞게 합니다."
  remarks: "연결 된 지정 된 SELECT 문에서 사용 하 여 데이터 원본에서 행을 검색 하는 Fill 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>속성.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> SELECT 문은 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 채우기가 호출 되기 전에 연결이 닫혀 있는 경우 데이터를 검색에 대 한 열은 다음 종료 합니다. 채우기가 호출 되기 전에 연결이 열려 있으면 열린 상태로 유지 합니다.       그런 다음이 채우기 작업 대상에 행을 추가 <xref:System.Data.DataTable>개체에 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable>경우 이미 없는 개체.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> 만들 때 <xref:System.Data.DataTable>개체, 열 이름 메타 데이터만 채우기 작업은 일반적으로 만듭니다.</xref:System.Data.DataTable> 그러나 경우는 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       경우는 `SelectCommand` OUTER JOIN의 결과 반환 된 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 결과 대 한 값</xref:System.Data.DataTable.PrimaryKey%2A> 을 설정 하지 않습니다 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 참조 [기본 키 정의](~/add/includes/ajax-current-ext-md.md)합니다.       데이터 어댑터를 채우는 동안 중복 된 열을 발견 하는 경우는 <xref:System.Data.DataTable>, 패턴 &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; 및 등을 사용 하 여 후속 열에 대 한 이름을 생성 합니다.</xref:System.Data.DataTable> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       채우는 데 사용 된 SELECT 문에서 <xref:System.Data.DataSet>여러 결과 반환 일괄 처리 SQL 문과 같은 결과 중 하나에 오류가 포함 되어 있는 경우 모든 후속 결과 건너뛰고 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 추가 되지</xref:System.Data.DataSet>       동일한 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 여러 번 Fill 메서드를 사용할 수 있습니다. 기본 키가 있는 경우 이미 존재 하는 일치 하는 행과 들어오는 행이 병합 됩니다. 기본 키가 없으면 들어오는 행을 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 추가      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public virtual int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드로 채울 및 필요한 경우 스키마입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  id: Fill(System.Data.DataTable,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDataReader)
  nameWithType: DataAdapter.Fill(DataTable,IDataReader)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 행의 <xref href=&quot;System.Data.DataTable&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataTable&quot;> </xref> 이름 및 지정 된 <xref href=&quot;System.Data.IDataReader&quot;> </xref>합니다."
  remarks: "에 대 한 설명을 참조 `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` 추가 정보에 대 한 합니다."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 레코드도 채울 수 있습니다."
    - id: dataReader
      type: System.Data.IDataReader
      description: "인스턴스 <xref href=&quot;System.Data.IDataReader&quot;> </xref>합니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  id: Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 컬렉션에서 지정된 된 범위에서 행을 새로 고칩니다 <xref href=&quot;System.Data.DataTable&quot;> </xref> 개체 데이터 소스에 맞게 합니다."
  remarks: "에 대 한 설명을 참조 `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` 추가 정보에 대 한 합니다."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, System.Data.IDataReader dataReader, int startRecord, int maxRecords);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "컬렉션 <xref href=&quot;System.Data.DataTable&quot;> </xref> 레코드로 채울 개체입니다."
    - id: dataReader
      type: System.Data.IDataReader
      description: "인스턴스 <xref href=&quot;System.Data.IDataReader&quot;> </xref>합니다."
    - id: startRecord
      type: System.Int32
      description: "시작 레코드의&0;부터 시작 하는 인덱스입니다."
    - id: maxRecords
      type: System.Int32
      description: "최대 레코드 수를 나타내는 정수입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  id: Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String,IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 사용 하 여 데이터 소스에 맞게는 <xref href=&quot;System.Data.DataSet&quot;> </xref> 및 <xref href=&quot;System.Data.DataTable&quot;> </xref> 이름입니다."
  remarks: "에 대 한 설명을 참조 `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` 추가 정보에 대 한 합니다."
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> 레코드도 채울 수 있습니다."
    - id: srcTable
      type: System.String
      description: "원본 테이블의 이름을 나타내는 문자열입니다."
    - id: dataReader
      type: System.Data.IDataReader
      description: "인스턴스 <xref href=&quot;System.Data.IDataReader&quot;> </xref>합니다."
    - id: startRecord
      type: System.Int32
      description: "시작 레코드의&0;부터 시작 하는 인덱스입니다."
    - id: maxRecords
      type: System.Int32
      description: "최대 레코드 수를 나타내는 정수입니다."
    return:
      type: System.Int32
      description: "행 수가 성공적으로 추가 하거나 새로 고쳐지지는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 이 행을 반환 하지 않는 문에 의해 영향을 받는 행을 포함 되지 않습니다."
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillError
  id: FillError
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillError
  nameWithType: DataAdapter.FillError
  fullName: System.Data.Common.DataAdapter.FillError
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "채우기 작업 중에 오류가 발생 하는 경우 반환 됩니다."
  remarks: "**FillError** 이벤트 오류가 발생 한 후 채우기 작업을 계속할지 여부를 결정할 수 있습니다. 경우의 예는 **FillError** 이벤트가 발생할 수는:-에 추가 되는 데이터는 `DataSet` 정밀도 손실 하지 않고 공용 언어 런타임 형식으로 변환할 수 없습니다.      -추가 중인 행에 적용 해야 하는 제약 조건을 위반 하는 데이터를 포함 한 `DataColumn` 에 `DataSet`합니다."
  syntax:
    content: public event System.Data.FillErrorEventHandler FillError;
    return:
      type: System.Data.FillErrorEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillLoadOption
  id: FillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
  fullName: System.Data.Common.DataAdapter.FillLoadOption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "가져오거나는 <xref href=&quot;System.Data.LoadOption&quot;> </xref> 어댑터를 채우는 방법을 결정 하는 <xref href=&quot;System.Data.DataTable&quot;> </xref> 에서 <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>합니다."
  syntax:
    content: public System.Data.LoadOption FillLoadOption { get; set; }
    return:
      type: System.Data.LoadOption
      description: "A <xref href=&quot;System.Data.LoadOption&quot;></xref> value."
  overload: System.Data.Common.DataAdapter.FillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정 된 <xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 원본의 기반으로 지정 하는 스키마와 일치 하도록 구성 하 고 <xref href=&quot;System.Data.SchemaType&quot;> </xref>합니다."
  remarks: "FillSchema 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 를 사용 하 여 데이터 원본에서 스키마를 검색 합니다. 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>유효 해야 하지만 열려 있이 필요는 없습니다.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> FillSchema가 호출 되기 전에 연결이 닫히거나, 열어 데이터를 검색 하 고 닫으면 됩니다. FillSchema가 호출 되기 전에 연결이 열려 있으면 열린 상태로 유지 합니다.       FillSchema 작업 <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 대상</xref:System.Data.DataTable> 추가 그런 다음 열을 추가 <xref:System.Data.DataColumnCollection>의 <xref:System.Data.DataTable>, 다음을 구성 하 고 <xref:System.Data.DataColumn>속성 데이터 원본에 존재 하는 경우:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 설정 해야 <xref:System.Data.DataColumn.AutoIncrementStep%2A>및 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>별도로.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema 또한 구성 된 <xref:System.Data.DataTable.PrimaryKey%2A>및 <xref:System.Data.DataTable.Constraints%2A>다음 규칙에 따라 속성:-의 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 사용 하</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 여 하나 이상의 기본 키 열이 반환 하는 경우</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -기본 키 열이 반환 되지 고유 열이 표시 되지만 경우 고유 열 경우, 그리고 모든 고유 열이 null이 아닌 경우에 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint>에 추가 되는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A>속성이 설정 되지 않았습니다.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      - <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 대 한 기본 키 열으로 기본 키 열은 사용 기본 키 열과 고유 열이 모두 반환 하는 경우      > [!NOTE] > 기본 데이터 저장소에서 지원 되지 않는 열 특성을 허용할 수 있습니다는 <xref:System.Data.DataColumn>, 때문에 일부 열 특성이 올바르게 변환 하지 않습니다.</xref:System.Data.DataColumn> 예를 들어 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] tinyint 데이터 형식의 id 열을 사용 하면 있지만 <xref:System.Data.DataColumn>Int16, Int32, 및 i n t&64;가 허용 된 <xref:System.Data.DataColumn.AutoIncrement%2A>속성 집합.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn> `FillSchema`경우 자동으로 무시 여기서는 <xref:System.Data.DataColumn>어떠한 예외도 throw 하 고 데이터 소스를 정확 하 게 미러링할 수 없습니다.</xref:System.Data.DataColumn>       기본 키와 unique 제약 조건에 추가 된 <xref:System.Data.ConstraintCollection>선행 규칙에 있지만 다른 제약 조건에 따라 형식이 추가 되지 않습니다.</xref:System.Data.ConstraintCollection>       고유 클러스터형 인덱스가 하나 이상의 SQL Server 테이블의 열에 정의 된 및 기본 키 제약 조건을 별도의 열 집합에 정의 되어 클러스터형된 인덱스에 있는 열의 이름이 반환 됩니다. 기본 키 열 이름으로를 반환 하려면 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 [쿼리 힌트 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)합니다.       경우는 <xref:System.Data.Common.DataAdapter>중복 열을 채우는 동안 발생 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 &quot;*columnname*1&quot; &quot;*columnname*2&quot;,&quot;*columnname*3&quot; 등.</xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter> 에 지정 되므로 들어오는 데이터에 명명 되지 않은 열이 포함 된 경우는 <xref:System.Data.DataSet>&quot;column1&quot;, &quot;Column2&quot; 등에 따라.</xref:System.Data.DataSet> 여러 결과 집합에 추가 될 때는 <xref:System.Data.DataSet>각 결과 집합은 별도 테이블에 배치 됩니다.</xref:System.Data.DataSet> 추가 결과 집합이 지정한 테이블 이름 (예: &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; 및 등)에 정수 계열 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 응용 프로그램 명명 패턴과 충돌 하지 않도록 확인 해야 합니다.       FillSchema 모든 행을 반환 하지 않습니다. <xref:System.Data.Common.DataAdapter.Fill%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 에 행을 추가 하는 메서드</xref:System.Data.Common.DataAdapter.Fill%2A> 를 사용 하 여      > [!NOTE] >의 구현 하는 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>만 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 여러 결과 대 한 스키마 정보를 검색 하려면 사용 <xref:System.Data.Common.DbDataAdapter.Fill%2A>와 <xref:System.Data.MissingSchemaAction>로 설정 `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 하 여 데이터 원본에서 스키마로 채워집니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 값입니다."
    return:
      type: System.Data.DataTable[]
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 포함 된 개체 데이터 소스에서 반환 합니다."
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정 된 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDataReader dataReader);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 에서 메꾸어야 할는 <xref href=&quot;System.Data.IDataReader&quot;> </xref>합니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 값입니다."
    - id: dataReader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> 데이터를 입력할 때 데이터 원본으로 사용할는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 포함 된 개체 데이터 소스에서 반환 합니다."
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "추가 <xref href=&quot;System.Data.DataTable&quot;> </xref> 지정 된 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable, System.Data.IDataReader dataReader);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> 에서 메꾸어야 할는 <xref href=&quot;System.Data.IDataReader&quot;> </xref>합니다."
    - id: schemaType
      type: System.Data.SchemaType
      description: "중 하나는 <xref href=&quot;System.Data.SchemaType&quot;> </xref> 값입니다."
    - id: srcTable
      type: System.String
      description: "테이블 매핑에 사용할 원본 테이블의 이름입니다."
    - id: dataReader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref> 데이터를 입력할 때 데이터 원본으로 사용할는 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
    return:
      type: System.Data.DataTable[]
      description: "컬렉션에 대 한 참조 <xref href=&quot;System.Data.DataTable&quot;> </xref> 에 추가 된 개체는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DataAdapter.GetFillParameters()
  fullName: System.Data.Common.DataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "SQL SELECT 문을 실행할 때 사용자가 설정 된 매개 변수를 가져옵니다."
  syntax:
    content: public virtual System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "배열을 <xref href=&quot;System.Data.IDataParameter&quot;> </xref> 사용자가 매개 변수를 포함 하는 개체를 설정 합니다."
  overload: System.Data.Common.DataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.HasTableMappings
  id: HasTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: HasTableMappings()
  nameWithType: DataAdapter.HasTableMappings()
  fullName: System.Data.Common.DataAdapter.HasTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "나타냅니다 여부는 <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;> </xref> 만들어졌습니다."
  syntax:
    content: protected bool HasTableMappings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;> </xref> 만든 받지 않았으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.HasTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
  fullName: System.Data.Common.DataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "일치 하는 테이블 또는 열 들어오는 데이터에 없을 때 수행할 동작을 결정 합니다."
  remarks: "<xref:System.Data.Common.DataAdapter.TableMappings%2A>속성은 반환 되는 레코드 및 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 사이 마스터 매핑을 제공합니다</xref:System.Data.Common.DataAdapter.TableMappings%2A>"
  example:
  - "The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_4_1.vb)]\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_4_1.cs)]"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "중 하나는 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 된 값 중 하나이 고 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
  fullName: System.Data.Common.DataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "종료할 때 수행할 동작을 결정 <xref href=&quot;System.Data.DataSet&quot;> </xref> 스키마 들어오는 데이터와 일치 하지 않습니다."
  remarks: ''
  example:
  - "The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_9_1.vb)]\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_9_1.cs)]"
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "중 하나는 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> 값입니다. 기본값은 <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "설정 된 값 중 하나이 고 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> 값입니다."
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  id: OnFillError(System.Data.FillErrorEventArgs)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: OnFillError(FillErrorEventArgs)
  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)
  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "오류가 발생 하는 동안 발생할 때 호출 되는 <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;> </xref>합니다."
  syntax:
    content: protected virtual void OnFillError (System.Data.FillErrorEventArgs value);
    parameters:
    - id: value
      type: System.Data.FillErrorEventArgs
      description: "A <xref href=&quot;System.Data.FillErrorEventArgs&quot;></xref> object."
  overload: System.Data.Common.DataAdapter.OnFillError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption
  id: ResetFillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ResetFillLoadOption()
  nameWithType: DataAdapter.ResetFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "다시 설정 <> </> *> 기본 상태 및 원인을 &lt;xref:System.Data.Common.DataAdapter.Fill%2A?displayProperty=fullName&gt; (를) 처리할 <> </> *> 합니다."
  syntax:
    content: public void ResetFillLoadOption ();
    parameters: []
  overload: System.Data.Common.DataAdapter.ResetFillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  id: ReturnProviderSpecificTypes
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "가져오거나 여부는 <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;> </xref> 메서드 공급자 관련 값 또는 일반적인 CLS 호환 값을 반환 해야 합니다."
  remarks: "기본값은 `false`입니다."
  syntax:
    content: public virtual bool ReturnProviderSpecificTypes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;> </xref> 메서드는 공급자별 값을 반환 해야 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 일반적인 CLS 호환 값을 반환 하려면."
  overload: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  id: ShouldSerializeAcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeAcceptChangesDuringFill()
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "결정 여부는 <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>속성을 유지 해야 합니다.</xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>"
  syntax:
    content: public virtual bool ShouldSerializeAcceptChangesDuringFill ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>속성은 유지 되 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>"
  overload: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  id: ShouldSerializeFillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeFillLoadOption()
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "결정 여부는 <xref:System.Data.Common.DataAdapter.FillLoadOption*>속성을 유지 해야 합니다.</xref:System.Data.Common.DataAdapter.FillLoadOption*>"
  syntax:
    content: public virtual bool ShouldSerializeFillLoadOption ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref:System.Data.Common.DataAdapter.FillLoadOption*>속성은 유지 되 고, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Data.Common.DataAdapter.FillLoadOption*>"
  overload: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  id: ShouldSerializeTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeTableMappings()
  nameWithType: DataAdapter.ShouldSerializeTableMappings()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "여부, 하나 이상의 <xref href=&quot;System.Data.Common.DataTableMapping&quot;> </xref> 개체가 존재 하 고 유지 해야 합니다."
  syntax:
    content: protected virtual bool ShouldSerializeTableMappings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하나 이상의 경우 <xref href=&quot;System.Data.Common.DataTableMapping&quot;> </xref> 개체가 존재 합니다; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  id: System#Data#IDataAdapter#TableMappings
  isEii: true
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "원본 테이블 데이터 집합 테이블에 매핑되는 방식을 나타냅니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Common.DataAdapter>인스턴스로 캐스팅 되는 <xref:System.Data.IDataAdapter>인터페이스.</xref:System.Data.IDataAdapter> </xref:System.Data.Common.DataAdapter>       자세한 내용은 <xref:System.Data.IDataAdapter.TableMappings%2A>.</xref:System.Data.IDataAdapter.TableMappings%2A> 참조"
  syntax:
    content: System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "반환 되는 레코드 사이 마스터 매핑을 제공 하는 컬렉션 및 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 기본값은 빈 컬렉션입니다."
  overload: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "원본 테이블 사이 마스터 매핑을 제공 하는 컬렉션 및 가져옵니다 <xref href=&quot;System.Data.DataTable&quot;> </xref>합니다."
  remarks: "<xref:System.Data.Common.DataAdapter> <xref:System.Data.Common.DataTableMappingCollection> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 사용 되는 열 이름 사용 하 여 데이터 소스에서 사용 하는 열 이름을 연결 하는 컬렉션</xref:System.Data.Common.DataTableMappingCollection> 을 사용 하 여</xref:System.Data.Common.DataAdapter> 변경 내용을 조정 하는 경우"
  example:
  - "The following example uses a derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to add <xref:System.Data.Common.DataTableMapping> objects to its TableMappings collection and display a list of those mapped source tables. This example assumes that an <xref:System.Data.OleDb.OleDbDataAdapter> has already been created.  \n  \n [!code-vb[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_14_1.vb)]\n [!code-cs[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_14_1.cs)]"
  syntax:
    content: public System.Data.Common.DataTableMappingCollection TableMappings { get; }
    return:
      type: System.Data.Common.DataTableMappingCollection
      description: "반환 되는 레코드 사이 마스터 매핑을 제공 하는 컬렉션 및 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다. 기본값은 빈 컬렉션입니다."
  overload: System.Data.Common.DataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DataAdapter.Update(DataSet)
  fullName: System.Data.Common.DataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "삽입, 업데이트 또는 지정 된 행을 삭제할 각에 대해 INSERT, UPDATE 또는 DELETE 문을 각각 호출 <xref href=&quot;System.Data.DataSet&quot;> </xref> 에서 <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Table&quot; 이라는"
  remarks: "이 업데이트는 행 단위로에서 수행 됩니다. 모든 삽입, 수정 및 삭제 된 행에 대 한 큐브의 Update 메서드에에 수행 된 변경의 유형을 결정 (삽입, 업데이트 또는 삭제) 합니다. 변경 유형에 따라는 `Insert`, `Update,` 또는 `Delete` 명령 템플릿이 실행 데이터 원본에 수정된 된 행을 전파 합니다. 응용 프로그램에서 Update 메서드를 호출 하는 경우는 <xref:System.Data.Common.DataAdapter>검사 하는 <xref:System.Data.DataRow.RowState%2A>속성을 반복적으로 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 구성 된 인덱스 순서에 따라 각 행에 대 한 필요한 INSERT, UPDATE 또는 DELETE 문을 실행 하 고</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DataAdapter> 예를 들어 업데이트는 INSERT 문과 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> 행의 순서로 인해 다른 DELETE 문이 올 DELETE 문의 실행 될 수 있습니다.       이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 용도로 각 행은 개별적으로 업데이트 됩니다. 응용 프로그램에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A>명령문의 시퀀스를 제어 해야 할 경우에 (예를 들어 업데이트 하기 전에 삽입).</xref:System.Data.DataSet.GetChanges%2A> 자세한 내용은 참조 [Dataadapter로 데이터 원본 업데이트](~/add/includes/ajax-current-ext-md.md)합니다.       INSERT, UPDATE 또는 DELETE 문을 하지 지정 되었는지 여부, 큐브의 Update 메서드에 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder>또는 <xref:System.Data.OleDb.OleDbCommandBuilder>설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 를 설정 하지 않는 추가적인 모든 SQL 문을 그러면는 **CommandBuilder**합니다. 이 세대 논리 <xref:System.Data.DataSet>.</xref:System.Data.DataSet> 에 키 열 정보를 적용. 자세한 내용은 참조 [commandbuilder 생성 명령을](~/add/includes/ajax-current-ext-md.md)합니다.       큐브의 Update 메서드에 대 한 업데이트를 수행 하기 전에 첫 번째 매핑에 나열 된 테이블에서 행을 검색 합니다. 업데이트는 다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A>속성.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> 반환 된 추가 행은 무시 됩니다.       모든 데이터에 다시 로드 되는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 하는 조정 된 검사 <xref:System.Data.DataSet>행 및 모든 출력 매개 변수는 명령에서 반환 된.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 행이 성공적으로 업데이트 한 후 해당 행에 변경 내용은 허용 됩니다.       업데이트를 사용할 경우의 실행 순서는 다음과 같습니다: 1.  값은 <xref:System.Data.DataRow>매개 변수 값으로 이동 됩니다.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  명령을 실행합니다.      4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`는 첫 번째 반환 결과 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 에 놓입니다.      5.  출력 매개 변수가 있는 경우 <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 배치      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>이벤트가 발생 합니다.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName>가 호출 됩니다.</xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName> 이 경우 두는 <xref:System.Data.DataTable.RowChanging?displayProperty=fullName>및 <xref:System.Data.DataTable.RowChanged?displayProperty=fullName> <xref:System.Data.DataRow>.</xref:System.Data.DataRow> 업데이트에 대 한 이벤트</xref:System.Data.DataTable.RowChanged?displayProperty=fullName> </xref:System.Data.DataTable.RowChanging?displayProperty=fullName> 발생       <xref:System.Data.Common.DataAdapter>일반적으로 이와 관련 된 매개 변수 컬렉션을 포함</xref:System.Data.Common.DataAdapter> 하는와 연결 된 각 명령 매개 변수를 통해 현재 행에 매핑되는 `SourceColumn` 및 `SourceVersion` a.NET 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn`참조 하는 <xref:System.Data.DataTable>열 하는 <xref:System.Data.Common.DataAdapter>현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조.</xref:System.Data.Common.DataAdapter> </xref:System.Data.DataTable>       `SourceColumn`테이블 매핑이 적용 되기 전에 매핑되지 않은 열 이름을 참조 합니다. 경우 `SourceColumn` 참조 존재 하지 않는 열에는 다음 중 하나에 따라 다른 동작이 수행 <xref:System.Data.MissingMappingAction>값.</xref:System.Data.MissingMappingAction>      | 열거형 값 | 수행 작업 |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| 매핑이 없는 있는 경우에 <xref:System.Data.DataSet>원본 열 이름 및 테이블 이름을 사용 합니다. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>생성 됩니다.</xref:System.SystemException> </xref:System.Data.DataSet> 매핑이 명시적으로 설정 된 경우, 입력된 매개 변수는 일반적으로 오류가의 결과 대 한 누락 된 매핑이 있습니다. |   | `MissingMappingAction.Error`| <xref:System.SystemException>생성 됩니다. |       `SourceColumn` 속성은 또한 출력에 대 한 값에 매핑할 사용 입/출력 매개 변수를 또는 `DataSet`.</xref:System.SystemException> 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.       `SourceVersion` .NET 데이터 공급자의 속성 `Parameter` 클래스 Original, Current 또는 Proposed 버전 열 값의 사용 여부를 결정 합니다. 낙관적 동시성 위반을 확인 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하려면이 기능은 주로 사용 됩니다.       호출 하는 <xref:System.Data.DataSet.AcceptChanges%2A>메서드 또는 <xref:System.Data.DataTable.AcceptChanges%2A>메서드 <xref:System.Data.DataSet>또는 <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataSet> 모든 변경 내용이 커밋됩니다 합니다.</xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataSet.AcceptChanges%2A> 이러한 방법 중 하나를 호출 하기 전에는 <xref:System.Data.Common.DbDataAdapter.Update%2A>메서드가 호출 되 면 변경 내용이 커밋됩니다 시기는 <xref:System.Data.Common.DbDataAdapter.Update%2A>이후 추가 변경 사항이 없는 경우 메서드는 호출 <xref:System.Data.DataSet.AcceptChanges%2A>또는 <xref:System.Data.DataTable.AcceptChanges%2A>호출 되었습니다.</xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataSet.AcceptChanges%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A>      > [!NOTE] > 행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 됩니다. 설정 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>속성을 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> 를 호출 하기 전에</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 내에서 각 행 마다 별로 오류를 선택할 수 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면는 `RowUpdated` <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> 속성</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 을 설정 하는 이벤트   >> 데이터 원본 onUpdate 전파 하는 모든 열에 대해에 매개 변수를 추가 `InsertCommand`, `UpdateCommand`, 또는 `DeleteCommand`합니다. `SourceColumn` 매개 변수의 속성 열의 이름으로 설정 해야 합니다. 이 설정은 매개 변수의 값을 수동으로 설정 되어 있지 않지만 현재 처리 된 행의 특정 열에서 가져온 것을 나타냅니다."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to Update the data source.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_26_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_26_1.vb)]"
  syntax:
    content: public virtual int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> 데이터 소스를 업데이트 하는 데 사용 합니다."
    return:
      type: System.Int32
      description: "성공적으로 업데이트 된 행 수는 <xref href=&quot;System.Data.DataSet&quot;> </xref>합니다."
  overload: System.Data.Common.DataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "원본 테이블이 올바르지 않습니다."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT, UPDATE 또는 DELETE 문을 실행 하려고 영향을 받는&0; 개 레코드에서 발생 했습니다."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DataAdapter.#ctor
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter()
  nameWithType: DataAdapter.DataAdapter()
  fullName: System.Data.Common.DataAdapter.DataAdapter()
- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter(DataAdapter)
  nameWithType: DataAdapter.DataAdapter(DataAdapter)
  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)
- uid: System.Data.Common.DataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DataAdapter
  nameWithType: DataAdapter
  fullName: System.Data.Common.DataAdapter
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
- uid: System.Data.Common.DataAdapter.CloneInternals
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CloneInternals()
  nameWithType: DataAdapter.CloneInternals()
  fullName: System.Data.Common.DataAdapter.CloneInternals()
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError
- uid: System.Data.Common.DataAdapter.CreateTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CreateTableMappings()
  nameWithType: DataAdapter.CreateTableMappings()
  fullName: System.Data.Common.DataAdapter.CreateTableMappings()
- uid: System.Data.Common.DataTableMappingCollection
  parent: System.Data.Common
  isExternal: false
  name: DataTableMappingCollection
  nameWithType: DataTableMappingCollection
  fullName: System.Data.Common.DataTableMappingCollection
- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataTable,IDataReader)
  nameWithType: DataAdapter.Fill(DataTable,IDataReader)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataTable[],IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataSet,String,IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DataAdapter.FillError
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillError
  nameWithType: DataAdapter.FillError
  fullName: System.Data.Common.DataAdapter.FillError
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.Common.DataAdapter.FillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
  fullName: System.Data.Common.DataAdapter.FillLoadOption
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
- uid: System.Data.Common.DataAdapter.GetFillParameters
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DataAdapter.GetFillParameters()
  fullName: System.Data.Common.DataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DataAdapter.HasTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: HasTableMappings()
  nameWithType: DataAdapter.HasTableMappings()
  fullName: System.Data.Common.DataAdapter.HasTableMappings()
- uid: System.Data.Common.DataAdapter.MissingMappingAction
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
  fullName: System.Data.Common.DataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.Common.DataAdapter.MissingSchemaAction
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
  fullName: System.Data.Common.DataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: OnFillError(FillErrorEventArgs)
  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)
  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)
- uid: System.Data.FillErrorEventArgs
  parent: System.Data
  isExternal: false
  name: FillErrorEventArgs
  nameWithType: FillErrorEventArgs
  fullName: System.Data.FillErrorEventArgs
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ResetFillLoadOption()
  nameWithType: DataAdapter.ResetFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeAcceptChangesDuringFill()
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeFillLoadOption()
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeTableMappings()
  nameWithType: DataAdapter.ShouldSerializeTableMappings()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.Common.DataAdapter.TableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DataAdapter.Update(DataSet)
  fullName: System.Data.Common.DataAdapter.Update(DataSet)
- uid: System.Data.Common.DataAdapter.#ctor*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter
  nameWithType: DataAdapter.DataAdapter
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
- uid: System.Data.Common.DataAdapter.CloneInternals*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CloneInternals
  nameWithType: DataAdapter.CloneInternals
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
- uid: System.Data.Common.DataAdapter.CreateTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CreateTableMappings
  nameWithType: DataAdapter.CreateTableMappings
- uid: System.Data.Common.DataAdapter.Dispose*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DataAdapter.Dispose
- uid: System.Data.Common.DataAdapter.Fill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill
  nameWithType: DataAdapter.Fill
- uid: System.Data.Common.DataAdapter.FillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
- uid: System.Data.Common.DataAdapter.FillSchema*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DataAdapter.FillSchema
- uid: System.Data.Common.DataAdapter.GetFillParameters*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DataAdapter.GetFillParameters
- uid: System.Data.Common.DataAdapter.HasTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: HasTableMappings
  nameWithType: DataAdapter.HasTableMappings
- uid: System.Data.Common.DataAdapter.MissingMappingAction*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
- uid: System.Data.Common.DataAdapter.MissingSchemaAction*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
- uid: System.Data.Common.DataAdapter.OnFillError*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: OnFillError
  nameWithType: DataAdapter.OnFillError
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ResetFillLoadOption
  nameWithType: DataAdapter.ResetFillLoadOption
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeAcceptChangesDuringFill
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeFillLoadOption
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeTableMappings
  nameWithType: DataAdapter.ShouldSerializeTableMappings
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.TableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.Update*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Update
  nameWithType: DataAdapter.Update
