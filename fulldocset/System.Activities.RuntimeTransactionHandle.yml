### YamlMime:ManagedReference
items:
- uid: System.Activities.RuntimeTransactionHandle
  id: RuntimeTransactionHandle
  children:
  - System.Activities.RuntimeTransactionHandle.#ctor
  - System.Activities.RuntimeTransactionHandle.#ctor(System.Transactions.Transaction)
  - System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
  - System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext)
  - System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)
  - System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)
  - System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.CodeActivityContext)
  - System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.NativeActivityContext)
  - System.Activities.RuntimeTransactionHandle.OnInitialize(System.Activities.HandleInitializationContext)
  - System.Activities.RuntimeTransactionHandle.OnUninitialize(System.Activities.HandleInitializationContext)
  - System.Activities.RuntimeTransactionHandle.RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  - System.Activities.RuntimeTransactionHandle.RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  - System.Activities.RuntimeTransactionHandle.SuppressTransaction
  - System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread
  - System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread
  - System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)
  - System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)
  langs:
  - csharp
  name: RuntimeTransactionHandle
  nameWithType: RuntimeTransactionHandle
  fullName: System.Activities.RuntimeTransactionHandle
  type: Class
  summary: "워크플로 인스턴스의 런타임 트랜잭션에 대 한 액세스를 제공합니다."
  syntax:
    content: >-
      [System.Runtime.Serialization.DataContract]

      public sealed class RuntimeTransactionHandle : System.Activities.Handle, System.Activities.IExecutionProperty, System.Activities.IPropertyRegistrationCallback
  inheritance:
  - System.Object
  - System.Activities.Handle
  implements:
  - System.Activities.IExecutionProperty
  - System.Activities.IPropertyRegistrationCallback
  inheritedMembers:
  - System.Activities.Handle.ExecutionPropertyName
  - System.Activities.Handle.Owner
  - System.Activities.Handle.ThrowIfUninitialized
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.#ctor
  id: '#ctor'
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: RuntimeTransactionHandle()
  nameWithType: RuntimeTransactionHandle.RuntimeTransactionHandle()
  fullName: System.Activities.RuntimeTransactionHandle.RuntimeTransactionHandle()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Activities.RuntimeTransactionHandle&quot;> </xref> 클래스입니다."
  syntax:
    content: public RuntimeTransactionHandle ();
    parameters: []
  overload: System.Activities.RuntimeTransactionHandle.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: RuntimeTransactionHandle(Transaction)
  nameWithType: RuntimeTransactionHandle.RuntimeTransactionHandle(Transaction)
  fullName: System.Activities.RuntimeTransactionHandle.RuntimeTransactionHandle(Transaction)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Activities.RuntimeTransactionHandle&quot;> </xref> 클래스 지정한 루트 트랜잭션을 사용 합니다."
  syntax:
    content: public RuntimeTransactionHandle (System.Transactions.Transaction rootTransaction);
    parameters:
    - id: rootTransaction
      type: System.Transactions.Transaction
      description: "루트 트랜잭션입니다."
  overload: System.Activities.RuntimeTransactionHandle.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
  id: AbortInstanceOnTransactionFailure
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: AbortInstanceOnTransactionFailure
  nameWithType: RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
  fullName: System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "트랜잭션이 실패할 경우 워크플로 인스턴스를 중단 해야 하는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  remarks: "AbortInstanceOnTransactionFailure 이면 `false`, 트랜잭션 실패 정상적으로 전파 되는 데 오류가 발생 하는 예외가 발생 합니다. AbortInstanceOnTransactionFailure에 대 한 기본값은 `true`합니다."
  syntax:
    content: public bool AbortInstanceOnTransactionFailure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>트랜잭션이 실패 하면 워크플로 인스턴스를 중단 해야 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext)
  id: CompleteTransaction(System.Activities.NativeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: CompleteTransaction(NativeActivityContext)
  nameWithType: RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "현재 런타임 트랜잭션을 완료합니다."
  syntax:
    content: public void CompleteTransaction (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "현재 실행 환경입니다."
  overload: System.Activities.RuntimeTransactionHandle.CompleteTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)
  id: CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: CompleteTransaction(NativeActivityContext,BookmarkCallback)
  nameWithType: RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext,BookmarkCallback)
  fullName: System.Activities.RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext,BookmarkCallback)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "현재 런타임 트랜잭션을 완료 하 고 트랜잭션이 완료 될 때 책갈피 콜백을 예약 합니다."
  syntax:
    content: public void CompleteTransaction (System.Activities.NativeActivityContext context, System.Activities.BookmarkCallback callback);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "현재 실행 환경입니다."
    - id: callback
      type: System.Activities.BookmarkCallback
      description: "트랜잭션이 완료 될 때 호출할 책갈피 콜백."
  overload: System.Activities.RuntimeTransactionHandle.CompleteTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)
  id: GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: GetCurrentTransaction(AsyncCodeActivityContext)
  nameWithType: RuntimeTransactionHandle.GetCurrentTransaction(AsyncCodeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(AsyncCodeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "현재 런타임 트랜잭션에 대 한 참조를 반환합니다."
  syntax:
    content: public System.Transactions.Transaction GetCurrentTransaction (System.Activities.AsyncCodeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.AsyncCodeActivityContext
      description: "현재 실행 환경입니다."
    return:
      type: System.Transactions.Transaction
      description: "현재 트랜잭션입니다."
  overload: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.CodeActivityContext)
  id: GetCurrentTransaction(System.Activities.CodeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: GetCurrentTransaction(CodeActivityContext)
  nameWithType: RuntimeTransactionHandle.GetCurrentTransaction(CodeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(CodeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "현재 런타임 트랜잭션에 대 한 참조를 반환합니다."
  syntax:
    content: public System.Transactions.Transaction GetCurrentTransaction (System.Activities.CodeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.CodeActivityContext
      description: "현재 실행 환경입니다."
    return:
      type: System.Transactions.Transaction
      description: "현재 트랜잭션입니다."
  overload: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.NativeActivityContext)
  id: GetCurrentTransaction(System.Activities.NativeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: GetCurrentTransaction(NativeActivityContext)
  nameWithType: RuntimeTransactionHandle.GetCurrentTransaction(NativeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "현재 런타임 트랜잭션에 대 한 참조를 반환합니다."
  syntax:
    content: public System.Transactions.Transaction GetCurrentTransaction (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "현재 실행 환경입니다."
    return:
      type: System.Transactions.Transaction
      description: "현재 런타임 트랜잭션입니다."
  overload: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.OnInitialize(System.Activities.HandleInitializationContext)
  id: OnInitialize(System.Activities.HandleInitializationContext)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: OnInitialize(HandleInitializationContext)
  nameWithType: RuntimeTransactionHandle.OnInitialize(HandleInitializationContext)
  fullName: System.Activities.RuntimeTransactionHandle.OnInitialize(HandleInitializationContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: protected override void OnInitialize (System.Activities.HandleInitializationContext context);
    parameters:
    - id: context
      type: System.Activities.HandleInitializationContext
      description: "추가할 수 있습니다."
  overload: System.Activities.RuntimeTransactionHandle.OnInitialize*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.OnUninitialize(System.Activities.HandleInitializationContext)
  id: OnUninitialize(System.Activities.HandleInitializationContext)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: OnUninitialize(HandleInitializationContext)
  nameWithType: RuntimeTransactionHandle.OnUninitialize(HandleInitializationContext)
  fullName: System.Activities.RuntimeTransactionHandle.OnUninitialize(HandleInitializationContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: protected override void OnUninitialize (System.Activities.HandleInitializationContext context);
    parameters:
    - id: context
      type: System.Activities.HandleInitializationContext
      description: "추가할 수 있습니다."
  overload: System.Activities.RuntimeTransactionHandle.OnUninitialize*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  id: RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: RequestTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  nameWithType: RuntimeTransactionHandle.RequestTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  fullName: System.Activities.RuntimeTransactionHandle.RequestTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "만들기를 시작는 <xref href=&quot;System.Activities.NativeActivityTransactionContext&quot;> </xref> 새 트랜잭션에 사용할 합니다."
  remarks: "이 메서드는 런타임에서 활동에 사용 하기 위해 새로운 트랜잭션을 생성 하는 경우 사용 됩니다. 워크플로는 콜백이 호출 되기 전에 번 이상 지속할 수 있습니다. 이 메서드는 트랜잭션 범위가 트랜잭션 완료 시 지속 서로 차단 하지 않고 동시 요청을 큐에 있는 병렬의 여러 분기에 있는 수 있습니다. 오류는 워크플로가 유지 되는 경우를 방지 하려면 상태 개체를 serialize 할 수 있는지를 확인 합니다."
  syntax:
    content: public void RequestTransactionContext (System.Activities.NativeActivityContext context, Action<System.Activities.NativeActivityTransactionContext,object> callback, object state);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "현재 실행 환경입니다."
    - id: callback
      type: System.Action{System.Activities.NativeActivityTransactionContext,System.Object}
      description: "때 호출 될 메서드는 <xref href=&quot;System.Activities.NativeActivityTransactionContext&quot;> </xref> 만들어집니다."
    - id: state
      type: System.Object
      description: "선택적 사용자가 제공한 상태 요청에 대 한 정보가 들어 있는입니다."
  overload: System.Activities.RuntimeTransactionHandle.RequestTransactionContext*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  id: RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: RequireTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  nameWithType: RuntimeTransactionHandle.RequireTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  fullName: System.Activities.RuntimeTransactionHandle.RequireTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "만들기를 시작는 <xref href=&quot;System.Activities.NativeActivityTransactionContext&quot;> </xref> 기존 트랜잭션에 사용할 합니다."
  remarks: "이 메서드는 작업이 런타임에서 사용 해야 할 트랜잭션을 포함할 때 사용 됩니다. 워크플로 후속 콜백 사이 RequireTransactionContext 호출을 지속할 수 없습니다. 첫 번째 호출이 완료 되기 전에 RequireTransactionContext를 다시 호출할 수 없습니다 및 첫 번째 호출 이후의 모든 호출이 예외가 발생 합니다. 이 메서드에서에서 이동 해온 트랜잭션을 중간 지 속성 지점에 손상을 주지 않고 런타임에 제공할 수는 호스트입니다. Serialize 할 수 있는 상태 개체의 인스턴스가에이 메서드를 사용할 때 유지 하지 않는 때문에 필요한있지 않습니다."
  syntax:
    content: public void RequireTransactionContext (System.Activities.NativeActivityContext context, Action<System.Activities.NativeActivityTransactionContext,object> callback, object state);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "현재 실행 환경입니다."
    - id: callback
      type: System.Action{System.Activities.NativeActivityTransactionContext,System.Object}
      description: "때 호출 될 메서드는 <xref href=&quot;System.Activities.NativeActivityTransactionContext&quot;> </xref> 만들어집니다."
    - id: state
      type: System.Object
      description: "선택적 사용자가 제공한 상태 요청에 대 한 정보가 들어 있는입니다."
  overload: System.Activities.RuntimeTransactionHandle.RequireTransactionContext*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.SuppressTransaction
  id: SuppressTransaction
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: SuppressTransaction
  nameWithType: RuntimeTransactionHandle.SuppressTransaction
  fullName: System.Activities.RuntimeTransactionHandle.SuppressTransaction
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "이 런타임 트랜잭션이 표시 되지 않는지 여부를 나타내는 값을 가져오거나 설정 합니다."
  syntax:
    content: public bool SuppressTransaction { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>런타임 트랜잭션이 표시 되지 않는지; 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Activities.RuntimeTransactionHandle.SuppressTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread
  id: System#Activities#IExecutionProperty#CleanupWorkflowThread
  isEii: true
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: System.Activities.IExecutionProperty.CleanupWorkflowThread()
  nameWithType: RuntimeTransactionHandle.System.Activities.IExecutionProperty.CleanupWorkflowThread()
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IExecutionProperty.CleanupWorkflowThread()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "이 멤버에 대 한 참조 &lt;xref:System.Activities.IExecutionProperty.CleanupWorkflowThread%2A?displayProperty=fullName&gt;합니다."
  syntax:
    content: void IExecutionProperty.CleanupWorkflowThread ();
    parameters: []
  overload: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread
  id: System#Activities#IExecutionProperty#SetupWorkflowThread
  isEii: true
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: System.Activities.IExecutionProperty.SetupWorkflowThread()
  nameWithType: RuntimeTransactionHandle.System.Activities.IExecutionProperty.SetupWorkflowThread()
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IExecutionProperty.SetupWorkflowThread()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "이 멤버에 대 한 참조 &lt;xref:System.Activities.IExecutionProperty.SetupWorkflowThread%2A?displayProperty=fullName&gt;합니다."
  syntax:
    content: void IExecutionProperty.SetupWorkflowThread ();
    parameters: []
  overload: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)
  id: System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)
  isEii: true
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: System.Activities.IPropertyRegistrationCallback.Register(RegistrationContext)
  nameWithType: RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Register(RegistrationContext)
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Register(RegistrationContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "이 멤버에 대 한 참조 <xref:System.Activities.IPropertyRegistrationCallback.Register*>.</xref:System.Activities.IPropertyRegistrationCallback.Register*>"
  syntax:
    content: void IPropertyRegistrationCallback.Register (System.Activities.RegistrationContext context);
    parameters:
    - id: context
      type: System.Activities.RegistrationContext
      description: "에 대 한 설명은이 매개 변수 참조 <xref:System.Activities.IPropertyRegistrationCallback.Register*>.</xref:System.Activities.IPropertyRegistrationCallback.Register*>"
  overload: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)
  id: System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)
  isEii: true
  parent: System.Activities.RuntimeTransactionHandle
  langs:
  - csharp
  name: System.Activities.IPropertyRegistrationCallback.Unregister(RegistrationContext)
  nameWithType: RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Unregister(RegistrationContext)
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Unregister(RegistrationContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "이 멤버에 대 한 참조 <xref:System.Activities.IPropertyRegistrationCallback.UnRegister*>.</xref:System.Activities.IPropertyRegistrationCallback.UnRegister*>"
  syntax:
    content: void IPropertyRegistrationCallback.Unregister (System.Activities.RegistrationContext context);
    parameters:
    - id: context
      type: System.Activities.RegistrationContext
      description: "에 대 한 설명은이 매개 변수 참조 <xref:System.Activities.IPropertyRegistrationCallback.UnRegister*>.</xref:System.Activities.IPropertyRegistrationCallback.UnRegister*>"
  overload: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.Handle
  isExternal: false
  name: System.Activities.Handle
- uid: System.Activities.RuntimeTransactionHandle.#ctor
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: RuntimeTransactionHandle()
  nameWithType: RuntimeTransactionHandle.RuntimeTransactionHandle()
  fullName: System.Activities.RuntimeTransactionHandle.RuntimeTransactionHandle()
- uid: System.Activities.RuntimeTransactionHandle.#ctor(System.Transactions.Transaction)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: RuntimeTransactionHandle(Transaction)
  nameWithType: RuntimeTransactionHandle.RuntimeTransactionHandle(Transaction)
  fullName: System.Activities.RuntimeTransactionHandle.RuntimeTransactionHandle(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: AbortInstanceOnTransactionFailure
  nameWithType: RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
  fullName: System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: CompleteTransaction(NativeActivityContext)
  nameWithType: RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext)
- uid: System.Activities.NativeActivityContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityContext
  nameWithType: NativeActivityContext
  fullName: System.Activities.NativeActivityContext
- uid: System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: CompleteTransaction(NativeActivityContext,BookmarkCallback)
  nameWithType: RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext,BookmarkCallback)
  fullName: System.Activities.RuntimeTransactionHandle.CompleteTransaction(NativeActivityContext,BookmarkCallback)
- uid: System.Activities.BookmarkCallback
  parent: System.Activities
  isExternal: false
  name: BookmarkCallback
  nameWithType: BookmarkCallback
  fullName: System.Activities.BookmarkCallback
- uid: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: GetCurrentTransaction(AsyncCodeActivityContext)
  nameWithType: RuntimeTransactionHandle.GetCurrentTransaction(AsyncCodeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(AsyncCodeActivityContext)
- uid: System.Activities.AsyncCodeActivityContext
  parent: System.Activities
  isExternal: false
  name: AsyncCodeActivityContext
  nameWithType: AsyncCodeActivityContext
  fullName: System.Activities.AsyncCodeActivityContext
- uid: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.CodeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: GetCurrentTransaction(CodeActivityContext)
  nameWithType: RuntimeTransactionHandle.GetCurrentTransaction(CodeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(CodeActivityContext)
- uid: System.Activities.CodeActivityContext
  parent: System.Activities
  isExternal: false
  name: CodeActivityContext
  nameWithType: CodeActivityContext
  fullName: System.Activities.CodeActivityContext
- uid: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.NativeActivityContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: GetCurrentTransaction(NativeActivityContext)
  nameWithType: RuntimeTransactionHandle.GetCurrentTransaction(NativeActivityContext)
  fullName: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(NativeActivityContext)
- uid: System.Activities.RuntimeTransactionHandle.OnInitialize(System.Activities.HandleInitializationContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: OnInitialize(HandleInitializationContext)
  nameWithType: RuntimeTransactionHandle.OnInitialize(HandleInitializationContext)
  fullName: System.Activities.RuntimeTransactionHandle.OnInitialize(HandleInitializationContext)
- uid: System.Activities.HandleInitializationContext
  parent: System.Activities
  isExternal: false
  name: HandleInitializationContext
  nameWithType: HandleInitializationContext
  fullName: System.Activities.HandleInitializationContext
- uid: System.Activities.RuntimeTransactionHandle.OnUninitialize(System.Activities.HandleInitializationContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: OnUninitialize(HandleInitializationContext)
  nameWithType: RuntimeTransactionHandle.OnUninitialize(HandleInitializationContext)
  fullName: System.Activities.RuntimeTransactionHandle.OnUninitialize(HandleInitializationContext)
- uid: System.Activities.RuntimeTransactionHandle.RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: RequestTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  nameWithType: RuntimeTransactionHandle.RequestTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  fullName: System.Activities.RuntimeTransactionHandle.RequestTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
- uid: System.Action{System.Activities.NativeActivityTransactionContext,System.Object}
  parent: System
  isExternal: true
  name: Action<NativeActivityTransactionContext,Object>
  nameWithType: Action<NativeActivityTransactionContext,Object>
  fullName: System.Action<System.Activities.NativeActivityTransactionContext,System.Object>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<System.Activities.NativeActivityTransactionContext,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.NativeActivityTransactionContext
    name: NativeActivityTransactionContext
    nameWithType: NativeActivityTransactionContext
    fullName: NativeActivityTransactionContext
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Activities.RuntimeTransactionHandle.RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: RequireTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  nameWithType: RuntimeTransactionHandle.RequireTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
  fullName: System.Activities.RuntimeTransactionHandle.RequireTransactionContext(NativeActivityContext,Action<NativeActivityTransactionContext,Object>,Object)
- uid: System.Activities.RuntimeTransactionHandle.SuppressTransaction
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: SuppressTransaction
  nameWithType: RuntimeTransactionHandle.SuppressTransaction
  fullName: System.Activities.RuntimeTransactionHandle.SuppressTransaction
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IExecutionProperty.CleanupWorkflowThread()
  nameWithType: RuntimeTransactionHandle.System.Activities.IExecutionProperty.CleanupWorkflowThread()
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IExecutionProperty.CleanupWorkflowThread()
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IExecutionProperty.SetupWorkflowThread()
  nameWithType: RuntimeTransactionHandle.System.Activities.IExecutionProperty.SetupWorkflowThread()
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IExecutionProperty.SetupWorkflowThread()
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IPropertyRegistrationCallback.Register(RegistrationContext)
  nameWithType: RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Register(RegistrationContext)
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Register(RegistrationContext)
- uid: System.Activities.RegistrationContext
  parent: System.Activities
  isExternal: false
  name: RegistrationContext
  nameWithType: RegistrationContext
  fullName: System.Activities.RegistrationContext
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IPropertyRegistrationCallback.Unregister(RegistrationContext)
  nameWithType: RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Unregister(RegistrationContext)
  fullName: System.Activities.RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Unregister(RegistrationContext)
- uid: System.Activities.RuntimeTransactionHandle.#ctor*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: RuntimeTransactionHandle
  nameWithType: RuntimeTransactionHandle.RuntimeTransactionHandle
- uid: System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: AbortInstanceOnTransactionFailure
  nameWithType: RuntimeTransactionHandle.AbortInstanceOnTransactionFailure
- uid: System.Activities.RuntimeTransactionHandle.CompleteTransaction*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: CompleteTransaction
  nameWithType: RuntimeTransactionHandle.CompleteTransaction
- uid: System.Activities.RuntimeTransactionHandle.GetCurrentTransaction*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: GetCurrentTransaction
  nameWithType: RuntimeTransactionHandle.GetCurrentTransaction
- uid: System.Activities.RuntimeTransactionHandle.OnInitialize*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: OnInitialize
  nameWithType: RuntimeTransactionHandle.OnInitialize
- uid: System.Activities.RuntimeTransactionHandle.OnUninitialize*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: OnUninitialize
  nameWithType: RuntimeTransactionHandle.OnUninitialize
- uid: System.Activities.RuntimeTransactionHandle.RequestTransactionContext*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: RequestTransactionContext
  nameWithType: RuntimeTransactionHandle.RequestTransactionContext
- uid: System.Activities.RuntimeTransactionHandle.RequireTransactionContext*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: RequireTransactionContext
  nameWithType: RuntimeTransactionHandle.RequireTransactionContext
- uid: System.Activities.RuntimeTransactionHandle.SuppressTransaction*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: SuppressTransaction
  nameWithType: RuntimeTransactionHandle.SuppressTransaction
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IExecutionProperty.CleanupWorkflowThread
  nameWithType: RuntimeTransactionHandle.System.Activities.IExecutionProperty.CleanupWorkflowThread
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IExecutionProperty.SetupWorkflowThread
  nameWithType: RuntimeTransactionHandle.System.Activities.IExecutionProperty.SetupWorkflowThread
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IPropertyRegistrationCallback.Register
  nameWithType: RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Register
- uid: System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister*
  parent: System.Activities.RuntimeTransactionHandle
  isExternal: false
  name: System.Activities.IPropertyRegistrationCallback.Unregister
  nameWithType: RuntimeTransactionHandle.System.Activities.IPropertyRegistrationCallback.Unregister
