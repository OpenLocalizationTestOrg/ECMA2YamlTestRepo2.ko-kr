### YamlMime:ManagedReference
items:
- uid: System.Reflection.ExceptionHandlingClauseOptions
  id: ExceptionHandlingClauseOptions
  children:
  - System.Reflection.ExceptionHandlingClauseOptions.Clause
  - System.Reflection.ExceptionHandlingClauseOptions.Fault
  - System.Reflection.ExceptionHandlingClauseOptions.Filter
  - System.Reflection.ExceptionHandlingClauseOptions.Finally
  langs:
  - csharp
  name: ExceptionHandlingClauseOptions
  nameWithType: ExceptionHandlingClauseOptions
  fullName: System.Reflection.ExceptionHandlingClauseOptions
  type: Enum
  summary: "종류의 예외 처리 절을 식별합니다."
  remarks: "가져올 메서드의 예외 처리 절을 검사 하려면는 <xref:System.Reflection.MethodInfo>개체와 호출은 <xref:System.Reflection.MethodBase.GetMethodBody%2A>메서드 본문을 구하는.</xref:System.Reflection.MethodBase.GetMethodBody%2A> </xref:System.Reflection.MethodInfo> 사용 하 여는 <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>속성의 목록을 가져오려면 <xref:System.Reflection.ExceptionHandlingClause>개체.</xref:System.Reflection.ExceptionHandlingClause> </xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A>      > [!NOTE] > 작업 예외 처리 절에 메타 데이터 및 MSIL (intermediate language) 명령 형식 Microsoft 완전히 이해 해야 합니다. 공용 언어 인프라 (CLI) 설명서의 &quot;II: 메타 데이터 정의 및 의미&quot; 및 &quot;III 파티션: CIL 명령 집합&quot;에 정보를 찾을 수 있습니다. 이 설명서는 온라인입니다. 참조 [ECMA C# 및 Common Language Infrastructure 표준](http://go.microsoft.com/fwlink/?LinkID=99212) msdn 및 [Standard ecma-335-인프라 CLI (공용 언어)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 웹 사이트에 있습니다."
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate Filter clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/t-system.reflection.exce_1_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/t-system.reflection.exce_1_1.cs)]  \n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/t-system.reflection.exce_1_2.cpp)]\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_2.vb)]\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/t-system.reflection.exce_1_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/t-system.reflection.exce_1_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/t-system.reflection.exce_1_3.cs)]  \n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/t-system.reflection.exce_1_4.cpp)]\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/t-system.reflection.exce_1_4.vb)]\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/t-system.reflection.exce_1_4.cs)]"
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum ExceptionHandlingClauseOptions
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Clause
  id: Clause
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Clause
  nameWithType: ExceptionHandlingClauseOptions.Clause
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Clause
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "절은 지정된 된 형식에서 파생 되는 모든 예외를 허용 합니다."
  syntax:
    content: Clause
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Fault
  id: Fault
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Fault
  nameWithType: ExceptionHandlingClauseOptions.Fault
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Fault
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "예외가 발생 하는 경우에 없지만 일반적인 제어 흐름의 완료 절이 실행 됩니다."
  syntax:
    content: Fault
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Filter
  id: Filter
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Filter
  nameWithType: ExceptionHandlingClauseOptions.Filter
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Filter
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "절에 결정 하는 사용자 지정 지침이 포함 되어 예외를 무시 해야 (즉, 여부 정상적인 실행을 다시 시작 해야), 연결된 된 처리기에서 처리 여부는 다음 절에 전달 합니다."
  syntax:
    content: Filter
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ExceptionHandlingClauseOptions.Finally
  id: Finally
  parent: System.Reflection.ExceptionHandlingClauseOptions
  langs:
  - csharp
  name: Finally
  nameWithType: ExceptionHandlingClauseOptions.Finally
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Finally
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "절은 일반적인 제어 흐름 통하는지 여부 또는 처리 되지 않은 예외로 인해 try 블록이 종료 될 때마다 실행 됩니다."
  syntax:
    content: Finally
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Reflection.ExceptionHandlingClauseOptions.Clause
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Clause
  nameWithType: ExceptionHandlingClauseOptions.Clause
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Clause
- uid: System.Reflection.ExceptionHandlingClauseOptions
  parent: System.Reflection
  isExternal: false
  name: ExceptionHandlingClauseOptions
  nameWithType: ExceptionHandlingClauseOptions
  fullName: System.Reflection.ExceptionHandlingClauseOptions
- uid: System.Reflection.ExceptionHandlingClauseOptions.Fault
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Fault
  nameWithType: ExceptionHandlingClauseOptions.Fault
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Fault
- uid: System.Reflection.ExceptionHandlingClauseOptions.Filter
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Filter
  nameWithType: ExceptionHandlingClauseOptions.Filter
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Filter
- uid: System.Reflection.ExceptionHandlingClauseOptions.Finally
  parent: System.Reflection.ExceptionHandlingClauseOptions
  isExternal: false
  name: Finally
  nameWithType: ExceptionHandlingClauseOptions.Finally
  fullName: System.Reflection.ExceptionHandlingClauseOptions.Finally
