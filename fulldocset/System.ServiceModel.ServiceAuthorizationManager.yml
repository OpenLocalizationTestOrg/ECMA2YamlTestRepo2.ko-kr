### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ServiceAuthorizationManager
  id: ServiceAuthorizationManager
  children:
  - System.ServiceModel.ServiceAuthorizationManager.#ctor
  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)
  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  - System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)
  - System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  langs:
  - csharp
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationManager
  fullName: System.ServiceModel.ServiceAuthorizationManager
  type: Class
  summary: "서비스 작업에 대 한 인증 액세스를 제공 합니다."
  remarks: "This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.  \n  \n The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] infrastructure each time an attempt to access a resource is made. The method returns `true` or `false` to allow or deny access, respectively.  \n  \n The ServiceAuthorizationManager is part of the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]*Identity Model* infrastructure. The Identity Model enables you to create custom authorization policies and custom authorization schemes. [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/add/includes/ajax-current-ext-md.md).  \n  \n## Custom Authorization  \n This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.  \n  \n In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  \n  \n By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  \n  \n By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly.  \n  \n For an example, see [How to: Create a Custom Authorization Manager for a Service](~/add/includes/ajax-current-ext-md.md).  \n  \n To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class.  For an example, see [How to: Create a Custom Authorization Policy](~/add/includes/ajax-current-ext-md.md).  \n  \n To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class.  For an example, see [How to: Create a Custom Claim](~/add/includes/ajax-current-ext-md.md). To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/add/includes/ajax-current-ext-md.md).  \n  \n [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)] [Custom Authorization](~/add/includes/ajax-current-ext-md.md).  \n  \n You can set the type of a custom authorization manager using the [\\&lt;serviceAuthorization\\&gt;](../Topic/%3CserviceAuthorization%3E%20element.md) in a client application configuration file."
  example:
  - "The following example shows a class named `MyServiceAuthorizationManager` that inherits from the ServiceAuthorizationManager and overrides the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.  \n  \n [!code-cs[c_CustomAuthMgr#2](~/add/codesnippet/csharp/t-system.servicemodel.se_16_1.cs)]\n [!code-vb[c_CustomAuthMgr#2](~/add/codesnippet/visualbasic/t-system.servicemodel.se_16_1.vb)]"
  syntax:
    content: public class ServiceAuthorizationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: ServiceAuthorizationManager()
  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()
  fullName: System.ServiceModel.ServiceAuthorizationManager.ServiceAuthorizationManager()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.ServiceModel.ServiceAuthorizationManager&quot;> </xref> 클래스입니다."
  syntax:
    content: public ServiceAuthorizationManager ();
    parameters: []
  overload: System.ServiceModel.ServiceAuthorizationManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)
  id: CheckAccess(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: CheckAccess(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "특정된 작업 컨텍스트에 대 한 권한 부여를 확인합니다."
  remarks: "일반적으로 응용 프로그램 재정의 해야 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>이 메서드 대신.</xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>       응용 프로그램에 연결 하거나 서로 다른 결과 대 한 정책 집합을 도입 하는 경우 CheckAccess 재정의 <xref:System.ServiceModel.ServiceSecurityContext>하거나 다른 정책 평가 (체인) 모델을 제공 합니다.</xref:System.ServiceModel.ServiceSecurityContext>       이 메서드는 호출 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.</xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 합니다."
  example:
  - "The following code shows how to override this method to enforce custom access control requirements.  \n  \n [!code-vb[c_Federation#1](~/add/codesnippet/visualbasic/c7a50227-d4bd-484e-89da-_1.vb)]\n [!code-cs[c_Federation#1](~/add/codesnippet/csharp/c7a50227-d4bd-484e-89da-_1.cs)]"
  syntax:
    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "<xref:System.ServiceModel.OperationContext>.</xref:System.ServiceModel.OperationContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>액세스 권한을 부여 됩니다. 그렇지 않으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  id: CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: CheckAccess(OperationContext,Message)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "메시지에 대 한 액세스가 필요한 경우 특정된 작업 컨텍스트에 대 한 권한 부여를 확인 합니다."
  remarks: "일반적으로 응용 프로그램 재정의 해야 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>이 메서드 대신는 사용 해야 하는 경우 메시지 본문에는 권한 부여 결정에 따라 달라 집니다.</xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 성능 문제 때문에 가능 하면 다시 디자인 해야 응용 프로그램 권한 부여 결정 시 메시지 본문에 대 한 액세스 않아도 되도록 합니다.       응용 프로그램에 연결 하거나 서로 다른 결과 대 한 정책 집합을 도입 하는 경우이 메서드를 재정의 <xref:System.ServiceModel.ServiceSecurityContext>및 <xref:System.ServiceModel.Channels.Message>하거나 다른 정책 평가 (체인) 모델을 제공 합니다.</xref:System.ServiceModel.Channels.Message> </xref:System.ServiceModel.ServiceSecurityContext>       이 메서드는 호출 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.</xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 합니다."
  example:
  - "The following code shows how to override this method to enforce custom access control requirements that require access to the message body.  \n  \n [!code-vb[c_Federation#6](~/add/codesnippet/visualbasic/97d69923-0462-4e77-9c7c-_1.vb)]\n [!code-cs[c_Federation#6](~/add/codesnippet/csharp/97d69923-0462-4e77-9c7c-_1.cs)]"
  syntax:
    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "<xref:System.ServiceModel.OperationContext>.</xref:System.ServiceModel.OperationContext>"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "<xref:System.ServiceModel.Channels.Message>권한 부여 결정을 검사할 수 있습니다.</xref:System.ServiceModel.Channels.Message>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>액세스 권한을 부여 됩니다. 그렇지 않으면; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)
  id: CheckAccessCore(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: CheckAccessCore(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(OperationContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "기본 정책 평가에 따라 특정된 작업 컨텍스트에 대 한 권한 부여를 확인 합니다."
  remarks: "<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>일반적으로 기본 정책 평가의 결과가입니다.</xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>       사용자 지정 권한 부여 결정을 제공 하려면이 메서드를 재정의 합니다.       이 메서드는 들어오는 토큰을 기반으로 유추 된 클레임 집합에 따라 결정 되는 권한 부여를 확인 하는 데 사용 또는 외부 권한 부여 정책을 통해 추가할 수 있습니다. 들어오는 메시지의 속성에 기반 하는 권한 부여 결정을 내릴 수도 수: 예를 들어 동작 헤더입니다.       이 방법에서는 응용 프로그램이 사용할 수는 `operationContext` 호출자 id에 액세스 하려면 매개 변수 (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).</xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> 반환 하 여는 <xref:System.ServiceModel.Channels.RequestContext>에서 개체는 <xref:System.ServiceModel.OperationContext.RequestContext%2A>속성을 응용 프로그램은 전체 요청 메시지에 액세스할 수 있습니다 (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>).</xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A> </xref:System.ServiceModel.OperationContext.RequestContext%2A> </xref:System.ServiceModel.Channels.RequestContext> 반환 하 여는 <xref:System.ServiceModel.Channels.MessageHeaders>에서 개체는 <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>속성을 응용 프로그램 서비스 URL에 액세스할 수 있습니다 (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) 및 작업 (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).</xref:System.ServiceModel.Channels.MessageHeaders.Action%2A> </xref:System.ServiceModel.Channels.MessageHeaders.To%2A> </xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> </xref:System.ServiceModel.Channels.MessageHeaders> 이 정보를 통해 응용 프로그램에서 권한 부여 결정을 적절 하 게 수행할 수 있습니다.       사용자가 만든 클레임에서 발견 되는 <xref:System.IdentityModel.Claims.ClaimSet>에서 반환 되는 <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A>속성은 `AuthorizationContext`.</xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> </xref:System.IdentityModel.Claims.ClaimSet> 현재 `AuthorizationContext` <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> <xref:System.ServiceModel.OperationContext>클래스</xref:System.ServiceModel.OperationContext> 의 속성</xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> 에서 반환"
  example:
  - "The following example shows an override of the CheckAccessCore method.  \n  \n [!code-cs[c_CustomAuthMgr#6](~/add/codesnippet/csharp/63a6c8ce-190f-4cc1-a5b3-_1.cs)]\n [!code-vb[c_CustomAuthMgr#6](~/add/codesnippet/visualbasic/63a6c8ce-190f-4cc1-a5b3-_1.vb)]  \n  \n For another example, see [How to: Create a Custom Authorization Manager for a Service](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "<xref:System.ServiceModel.OperationContext>현재 권한 부여 요청에 대 한.</xref:System.ServiceModel.OperationContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>액세스 권한을 부여 됩니다. 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  id: GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: GetAuthorizationPolicies(OperationContext)
  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "정책 평가에 참여 하는 정책 집합을 가져옵니다."
  remarks: "[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] 구현은 기본 권한 부여 정책의 집합을 제공 합니다. 여기에 요청자의 자격 증명을 포함 하는 기본 토큰 및 모든 지원 토큰, 전송 토큰 및 지정 된 경우 외부 정책을 포함 합니다.       이 구현을 재정의 수 있으며 다른 정책 집합을 제공할 수 있습니다."
  syntax:
    content: protected virtual System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "<xref:System.ServiceModel.OperationContext>현재 권한 부여 요청의.</xref:System.ServiceModel.OperationContext>"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; 형식의 <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;> </xref>합니다."
  overload: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: ServiceAuthorizationManager()
  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()
  fullName: System.ServiceModel.ServiceAuthorizationManager.ServiceAuthorizationManager()
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccess(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.OperationContext
  parent: System.ServiceModel
  isExternal: true
  name: OperationContext
  nameWithType: OperationContext
  fullName: System.ServiceModel.OperationContext
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccess(OperationContext,Message)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccessCore(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(OperationContext)
- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: GetAuthorizationPolicies(OperationContext)
  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: IAuthorizationPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccess
  nameWithType: ServiceAuthorizationManager.CheckAccess
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccessCore
  nameWithType: ServiceAuthorizationManager.CheckAccessCore
- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: GetAuthorizationPolicies
  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies
