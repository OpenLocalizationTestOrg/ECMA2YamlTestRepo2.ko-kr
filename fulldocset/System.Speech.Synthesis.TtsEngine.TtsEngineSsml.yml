### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  id: TtsEngineSsml
  children:
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  langs:
  - csharp
  name: TtsEngineSsml
  nameWithType: TtsEngineSsml
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  type: Class
  summary: "모든 텍스트를 음성 합성 엔진이 변수로 구현 해야 하는 추상 기본 클래스."
  remarks: "사용자 지정 텍스트 음성 변환 엔진을 생성 하려면 응용 프로그램이 항상 TtsEngineSsml 추상 기본 클래스에서 파생 된 클래스를 구현 해야 합니다.       제대로 등록된 구현의 TtsEngineSsml으로 사용할 수 있습니다는 `Synthesizer``Voice` 여 <xref:System.Speech.Synthesis>기반 응용 프로그램 네임 스페이스.</xref:System.Speech.Synthesis>       개체 TtsEngineSsml에서 상속 하는 멤버를 재정의 해야 합니다: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>및 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> ,</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>       구현 해야 TtsEngineSsml 클래스의 가장 중요 한 멤버는 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>메서드.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>       <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>메서드는 수신 하는 인프라 텍스트 파서에서: 1.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  에 대 한 참조는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>도 큐 및 오디오 출력을 쓰기와 같은 시스템 서비스에 대 한 액세스를 제공 하는 인터페이스입니다.</xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>      2.  배열을 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>음성 합성 Markup Language (SSML) 입력 으로부터 생성 된 인스턴스.</xref:System.Speech.Synthesis.TtsEngine.TextFragment> 음성 렌더링할 텍스트 뿐만 아니라 음성의의 요청된 된 특성에 대 한 정보를 저장 된 SSML을 구문 분석 한 <xref:System.Speech.Synthesis.TtsEngine.FragmentState>각 들어오는와 연결 된 인스턴스가 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>개체.</xref:System.Speech.Synthesis.TtsEngine.TextFragment> </xref:System.Speech.Synthesis.TtsEngine.FragmentState>       음성 신시사이저 응용 프로그램을 구현 하 여 지정 된 출력 형식에 대 한 요청을 수행할 필요에 따라 수 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>올바른 오디오 출력을 제공 하려고 할 때 플랫폼에서 호출할 수 있습니다.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>       구현 자가 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> 및</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> 해당 구현에 의해 발음 또는 사전을, 외부 정의 관리 하기 위한 지원을 제공할 수도 있습니다."
  syntax:
    content: public abstract class TtsEngineSsml
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: TtsEngineSsml(String)
  nameWithType: TtsEngineSsml.TtsEngineSsml(String)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "새 인스턴스를 생성 <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> 음성 토큰 적절 한 레지스트리 키를 기반 합니다."
  remarks: "Calls to this constructor are typically generated by <xref:System.Speech.Synthesis> based applications selecting a `Synthesizer``Voice` to be used by an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>.  \n  \n A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must be register under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens."
  syntax:
    content: protected TtsEngineSsml (string registryKey);
    parameters:
    - id: registryKey
      type: System.String
      description: "연결 된 음성 토큰에 대 한 레지스트리 키의 전체 이름에서 <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> 구현 합니다. 엔진입니다."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: AddLexicon(Uri,String,ITtsEngineSite)
  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "에 대 한 어휘 집 추가 <xref uid=&quot;langword_csharp_Synthesizer&quot; name=&quot;Synthesizer&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_Voice&quot; name=&quot;Voice&quot; href=&quot;&quot;> </xref> 현재 구현 <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> 인스턴스."
  remarks: "발음 lexicon은 단어 또는 구의 함께 적절 한 발음 알파벳을 사용 하 여 지정 된 발음의 컬렉션입니다.       이 메서드는 플랫폼 인프라에 대 한 응답에는 일반적으로 <xref:System.Speech.Synthesis>기반 AddLexicon를 호출 하 고 사용 하 여 응용 프로그램에서 `Synthesizer``Voice` 현재 구현 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>인스턴스.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> </xref:System.Speech.Synthesis>       값 `mediaType` 는 일반적으로 MIME 사양 SSML 사양 미디어 사양에 대 한 MIME를 사용 하 게 합니다."
  example:
  - "The implementation of AddLexicon uses the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface passed in to load a lexicon from a resource. It then stores a `System.IO.Stream` to the lexicon in a `System.Collections.Generic.Dictionary` instance, indexed by the lexicon URI.  \n  \n```  \npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \n  \n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \n    Stream stream = site.LoadResource(uri, mediaType);  \n    _aLexicons.Add(uri, stream);  \n}  \n  \n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \n     Stream stream;  \n     if (_aLexicons.TryGetValue(uri, out stream)) {  \n         stream.Close();  \n         _aLexicons.Remove(uri);  \n     }  \n}  \n  \n```"
  syntax:
    content: public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: uri
      type: System.Uri
      description: "올바른 인스턴스 <xref uid=&quot;langword_csharp_System.Uri&quot; name=&quot;System.Uri&quot; href=&quot;&quot;> </xref> 어휘 집 정보의 위치를 나타내는입니다."
    - id: mediaType
      type: System.String
      description: "어휘 집의 미디어 유형을 포함 하는 문자열입니다. 미디어 유형에 대/소문자를 구분 합니다."
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "에 대 한 참조는 <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref> 플랫폼 인프라와 상호 작용 하는 데 사용 되는 인터페이스입니다."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  id: GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: GetOutputFormat(SpeakOutputFormat,IntPtr)
  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "가장 근접 한 신시사이저 엔진 특정 출력 형식 지원에 대 한 요청에 대 한 특정된 synthesize 엔진 응답에서 지 원하는 오디오 출력을 반환 합니다."
  remarks: "로 사용 되는 구조 `targetWaveFormat` 반환한 메서드와 호환 해야는 `WAVEFORMATEX` SAPI, 아래에서 사용할 수 있는 사용 하 여 반환 되는 값을 할당 해야 하 고 `CoTaskMemAlloc`합니다.       `struct` 동일한 기능을 제공 해야 합니다.```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"
  example:
  - "The sample implementation below validates selected inputs, using them if they are within tolerances, otherwise using default values.  \n  \n```  \npublic IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  \n    WaveFormat waveFormat = new WaveFormat();  \n    WaveFormat rq=new WaveFormat();  \n    Marshal.PtrToStructure(targetWaveFormat,rq);  \n  \n    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  \n    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  \n    waveFormat.BlockAlign = 2;  \n    waveFormat.Channels = 1;  \n    waveFormat.FormatTag = 1;  \n    waveFormat.SamplesPerSec = 16000;  \n    waveFormat.Size = 0;  \n  \n    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  \n    Marshal.StructureToPtr(waveFormat, wfx, false);  \n  \n    //Console.WriteLine (\"GetOutputFormat called\");  \n    return wfx;  \n}  \ninternal struct WaveFormat {  \n    public Int16 FormatTag;  \n    public Int16 Channels;  \n    public int SamplesPerSec;  \n    public int AvgBytesPerSec;  \n    public Int16 BlockAlign;  \n    public Int16 BitsPerSample;  \n    public Int16 Size;  \n}  \n```"
  syntax:
    content: public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);
    parameters:
    - id: speakOutputFormat
      type: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
      description: "유효한 멤버가 <xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeakOutputFormat&quot;> </xref> 요청 된 오디오 출력 형식 유형을 나타내는 열거형입니다."
    - id: targetWaveFormat
      type: System.IntPtr
      description: "에 대 한 포인터는 <xref uid=&quot;langword_csharp_struct&quot; name=&quot;struct&quot; href=&quot;&quot;> </xref> 에서 요청한 오디오 형식이 형식에 대 한 세부 설정을 포함 하는 `speakOutputFormat` 인수입니다."
    return:
      type: System.IntPtr
      description: "유효한 반환 <xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;> </xref> 인스턴스를 참조 하는 <xref uid=&quot;langword_csharp_struct&quot; name=&quot;struct&quot; href=&quot;&quot;> </xref> 출력 형식에 대 한 자세한 정보가 포함 된 합니다."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: RemoveLexicon(Uri,ITtsEngineSite)
  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "현재 로드 한 어휘 집 제거는 <xref uid=&quot;langword_csharp_Synthesizer&quot; name=&quot;Synthesizer&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_Voice&quot; name=&quot;Voice&quot; href=&quot;&quot;> </xref> 현재 구현 <xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;> </xref> 인스턴스."
  remarks: "발음 lexicon은 단어 또는 구의 함께 적절 한 발음 알파벳을 사용 하 여 지정 된 발음의 컬렉션입니다.       이 메서드는 일반적으로 대 한 응답으로 호출 됩니다는 <xref:System.Speech.Synthesis>기반 응용 프로그램 호출 <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>를 사용 하 고는 `Synthesizer``Voice` 현재 구현 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>인스턴스.</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> </xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> </xref:System.Speech.Synthesis>"
  example:
  - "The implementation of RemoveLexicon uses the lexicon URI to query an instance `System.Collections.Generic.Dictionary` for the `System.IO.Stream`, closes the stream and removes the uri referring to the lexicon.  \n  \n```  \npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \n  \n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \n    Stream stream = site.LoadResource(uri, mediaType);  \n    _aLexicons.Add(uri, stream);  \n}  \n  \n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \n     Stream stream;  \n     if (_aLexicons.TryGetValue(uri, out stream)) {  \n         stream.Close();  \n         _aLexicons.Remove(uri);  \n     }  \n}  \n```"
  syntax:
    content: public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: uri
      type: System.Uri
      description: "올바른 인스턴스 <xref uid=&quot;langword_csharp_System.Uri&quot; name=&quot;System.Uri&quot; href=&quot;&quot;> </xref> 어휘 집 정보의 위치를 나타내는입니다."
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "에 대 한 참조는 <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref> 인프라 리소스에 대 한 액세스를 허용 하려면 플랫폼 인프라에 의해 전달 된 인터페이스입니다."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)
  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "지정 된 렌더링 <xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;> </xref> 지정한 출력 형식에서 배열입니다."
  remarks: "으로 사용 되는 구조 `waveHeader` 반환한 메서드와 호환 해야는 `WAVEFORMATEX` SAPI에서 사용할 수 있습니다.       `struct` 동일한 기능을 제공 해야 합니다.```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of Speak  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n    _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: fragment
      type: System.Speech.Synthesis.TtsEngine.TextFragment[]
      description: "배열을 <xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;> </xref> 음성으로 렌더링할 수 텍스트가 포함 된 인스턴스."
    - id: waveHeader
      type: System.IntPtr
      description: "<xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;> </xref> 오디오 출력 형식을 포함 하는 구조체를 가리키는 합니다."
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "에 대 한 참조는 <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref> 인프라 리소스에 대 한 액세스를 허용 하려면 플랫폼 인프라에 의해 전달 된 인터페이스입니다."
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: TtsEngineSsml(String)
  nameWithType: TtsEngineSsml.TtsEngineSsml(String)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: AddLexicon(Uri,String,ITtsEngineSite)
  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: ITtsEngineSite
  nameWithType: ITtsEngineSite
  fullName: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: GetOutputFormat(SpeakOutputFormat,IntPtr)
  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: SpeakOutputFormat
  nameWithType: SpeakOutputFormat
  fullName: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: RemoveLexicon(Uri,ITtsEngineSite)
  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)
  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
- uid: System.Speech.Synthesis.TtsEngine.TextFragment[]
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: TextFragment
  nameWithType: TextFragment
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment[]
  spec.csharp:
  - uid: System.Speech.Synthesis.TtsEngine.TextFragment
    name: TextFragment
    nameWithType: TextFragment
    fullName: TextFragment[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: TtsEngineSsml
  nameWithType: TtsEngineSsml.TtsEngineSsml
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: AddLexicon
  nameWithType: TtsEngineSsml.AddLexicon
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: GetOutputFormat
  nameWithType: TtsEngineSsml.GetOutputFormat
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: RemoveLexicon
  nameWithType: TtsEngineSsml.RemoveLexicon
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: Speak
  nameWithType: TtsEngineSsml.Speak
