### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlUrlResolver
  id: XmlUrlResolver
  children:
  - System.Xml.XmlUrlResolver.#ctor
  - System.Xml.XmlUrlResolver.CachePolicy
  - System.Xml.XmlUrlResolver.Credentials
  - System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)
  - System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  - System.Xml.XmlUrlResolver.Proxy
  - System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)
  langs:
  - csharp
  name: XmlUrlResolver
  nameWithType: XmlUrlResolver
  fullName: System.Xml.XmlUrlResolver
  type: Class
  summary: "여는 식별자 URI (Uniform Resource)을 명명 된 외부 XML 리소스를 확인 합니다."
  remarks: "XmlUrlResolver는 엔터티를 문서 유형 정의 (Dtd) 또는 스키마와 같은 외부 XML 리소스를 확인 하는 데 사용 됩니다. 사용 하는 것도 프로세스 포함 및 스타일 시트 XSL (Extensible Language) 스타일 시트 또는 XML 스키마 정의 언어 (XSD) 스키마에 요소를 가져옵니다.       XmlUrlResolver는 모든 클래스에 대 한 기본 해결 프로그램은 <xref:System.Xml>네임 스페이스.</xref:System.Xml> 지원 된 `file://` 및 `http://` 프로토콜 및 <xref:System.Net.WebRequest>클래스</xref:System.Net.WebRequest> 와에서 요청      > [!IMPORTANT] > XmlUrlResolver 개체는 사용자 자격 증명과 같은 중요 한 정보를 포함할 수 있습니다. XmlUrlResolver 개체를 캐시 하 고 신뢰할 수 없는 구성 요소에 XmlUrlResolver 개체를 전달 하지 않아야 하는 경우 주의 해야 합니다.      ## Dtd 경우 XML 판독기 해결 (<xref:System.Xml.XmlReader>) 외부 DTD를 포함 하는 XML 파일을 읽고, 호출의 <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=fullName>DTD의 스트림을 표시 하는 메서드.</xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=fullName> </xref:System.Xml.XmlReader> XML 판독기를 호출 하는 DTD의 URI는 상대 URI 이면는 <xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=fullName>메서드에 대 한 절대 URI를 반환 하 고는 주어진 `relativeUri` 및 `baseURi` 매개 변수.</xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=fullName> 반환 하는 경우에 XmlUrlResolver URI를 확인 하는 방법을 모릅니다, `null`합니다.       <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName>에 정보를 사용 하는 메서드는 <xref:System.Xml.XmlUrlResolver.Credentials%2A>를 적절 하 게 리소스에 액세스 하는 속성.</xref:System.Xml.XmlUrlResolver.Credentials%2A> </xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> 없는 `get` 보안상의 이유로이 속성에는 접근자입니다. 덮어쓸 때 <xref:System.Xml.XmlResolver>, **GetEntity** 에서 자격 증명 정보를 활용 하는 방법은 **자격 증명** 속성.</xref:System.Xml.XmlResolver>       다른 모든 XML 리소스를 확인 하는 것은 Dtd를 확인 하는 매우 유사 합니다. <xref:System.Xml.XmlResolver>외부 리소스와의 연결을 협상 하 고 반환 된 <xref:System.IO.Stream>콘텐츠의 표현입니다.</xref:System.IO.Stream></xref:System.Xml.XmlResolver> 에 대 한 호출을 수행 하는 개체 <xref:System.Xml.XmlResolver>크거나.</xref:System.Xml.XmlResolver>      ## 캐시에서가 아니라 해당 소스에서 XML 데이터 리소스를 해결 하는 XmlUrlResolver 클래스 XmlUrlResolver 클래스의 기본 동작을 확장 합니다. 경우에 따라 캐시에서 데이터 리소스를 확인 합니다. 성능을 향상 시킬 수는 응용 프로그램의 한 이동 데이터 리소스의 서버에 저장 하 여 합니다. 성능 향상을 최신 내용의 필요에 대 한 가중치가 적용 되어야 합니다.       다음 예제에서는 XmlUrlResolver를 확장 하 고 새 클래스를 작성 `XmlCachingResolver`캐시에서 리소스를 검색 합니다. 재정의 하 여 이렇게는 <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=fullName>속성 및 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName>메서드.</xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> </xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=fullName>       [!code-vb[XmlCachingResolver_ex&#1;](~/add/codesnippet/visualbasic/t-system.xml.xmlurlresol_1.vb)][!code-cs[XmlCachingResolver_ex&#1;](~/add/codesnippet/csharp/t-system.xml.xmlurlresol_1.cs) ] 의 캐싱 동작은 `XmlCachingResolver` 클래스에서 구현 되는 `GetEntity` 메서드.   새로 만드는 이렇게 <xref:System.Net.WebRequest>및 <xref:System.Net.Cache.HttpRequestCachePolicy>개체.</xref:System.Net.Cache.HttpRequestCachePolicy> </xref:System.Net.WebRequest> <xref:System.Net.Cache.HttpRequestCachePolicy>개체를 사용 하 여 만든는 <xref:System.Net.Cache.HttpRequestCacheLevel>의 멤버는 <xref:System.Net.Cache.HttpRequestCacheLevel>열거형.</xref:System.Net.Cache.HttpRequestCacheLevel> </xref:System.Net.Cache.HttpRequestCacheLevel> </xref:System.Net.Cache.HttpRequestCachePolicy>       <xref:System.Net.WebRequest.CachePolicy%2A>의 속성은 <xref:System.Net.WebRequest>으로 설정 된 개체는 <xref:System.Net.Cache.HttpRequestCachePolicy>개체입니다.</xref:System.Net.Cache.HttpRequestCachePolicy> </xref:System.Net.WebRequest> </xref:System.Net.WebRequest.CachePolicy%2A>       인스턴스는 `XmlCachingResolver` 클래스 만들어집니다는 `Boolean``enableHttpCaching`합니다. 이 값으로 설정 되 면 `true`, 가능한 경우 기본 캐시에서 리소스 인스턴스를 확인 합니다. 때 `enableHttpCaching` 로 설정 된 `false`, 인스턴스는 기본 동작을 사용 하 고 해당 원본에서 리소스를 확인 합니다.      > [!NOTE] >이 예제에서는.NET Framework의 XML 클래스의 확장성을 이용 합니다. 다른 클래스 및 확장에 특정 응용 프로그램의 요구에 맞게 사용자 지정할 수 있습니다."
  example:
  - "The following example creates an <xref:System.Xml.XmlReader> that uses an XmlUrlResolver with default credentials.  \n  \n [!code-vb[XmlResolver_Samples#1](~/add/codesnippet/visualbasic/t-system.xml.xmlurlresol_2.vb)]\n [!code-cs[XmlResolver_Samples#1](~/add/codesnippet/csharp/t-system.xml.xmlurlresol_2.cs)]"
  syntax:
    content: 'public class XmlUrlResolver : System.Xml.XmlResolver'
  inheritance:
  - System.Object
  - System.Xml.XmlResolver
  implements: []
  inheritedMembers:
  - System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.#ctor
  id: '#ctor'
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: XmlUrlResolver()
  nameWithType: XmlUrlResolver.XmlUrlResolver()
  fullName: System.Xml.XmlUrlResolver.XmlUrlResolver()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Xml.XmlUrlResolver&quot;> </xref> 클래스입니다."
  syntax:
    content: public XmlUrlResolver ();
    parameters: []
  overload: System.Xml.XmlUrlResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.CachePolicy
  id: CachePolicy
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: CachePolicy
  nameWithType: XmlUrlResolver.CachePolicy
  fullName: System.Xml.XmlUrlResolver.CachePolicy
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "원본에 대 한 캐시 정책을 가져오거나 설정 합니다. <xref:System.Net.WebRequest>개체입니다.</xref:System.Net.WebRequest>"
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "기본 웹 요청에 대 한 캐시 정책입니다."
  overload: System.Xml.XmlUrlResolver.CachePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.Credentials
  id: Credentials
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: Credentials
  nameWithType: XmlUrlResolver.Credentials
  fullName: System.Xml.XmlUrlResolver.Credentials
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "웹 요청을 인증 하는 데 사용 되는 자격 증명을 설정 합니다."
  remarks: "가상 디렉터리에 인증이 필요 하지 않는 경우이 속성이 필요는 없습니다 설정 해야 합니다. 그렇지 않으면 사용자의 자격 증명이 제공 되어야 합니다.       다양 한 Uri에 다른 자격 증명을 연결 하 고 캐시에 추가할 수 있습니다. 다음 XML의 원본 소스와 다른 Uri에 대 한 인증을 확인 하려면 자격 증명을 사용할 수 있습니다.       다음 C# 코드에 자격 증명 캐시에 자격 증명 속성을 설정 하는 방법을 보여 줍니다.      ```   NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);    CredentialCache myCache = new CredentialCache();    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;), &quot;Basic&quot;, myCred);    myCache.Add(new Uri(&quot;http://app.contoso.com/&quot;), &quot;Basic&quot;, myCred);   XmlUrlResolver resolver = new XmlUrlResolver();   resolver.Credentials = myCache;   ```"
  example:
  - "The following example creates an <xref:System.Xml.XmlUrlResolver> object with credentials. The <xref:System.Xml.XmlReader> uses the credentials on the <xref:System.Xml.XmlUrlResolver> object to access a network resource.  \n  \n [!code-vb[XmlResolver_Samples#2](~/add/codesnippet/visualbasic/p-system.xml.xmlurlresol_1.vb)]\n [!code-cs[XmlResolver_Samples#2](~/add/codesnippet/csharp/p-system.xml.xmlurlresol_1.cs)]"
  syntax:
    content: public override System.Net.ICredentials Credentials { set; }
    return:
      type: System.Net.ICredentials
      description: "웹 요청을 인증 하는 데 사용할 자격 증명입니다. 기본값은이 속성을 설정 하지 않으면 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, 즉는 <xref uid=&quot;langword_csharp_XmlUrlResolver&quot; name=&quot;XmlUrlResolver&quot; href=&quot;&quot;> </xref> 에 사용자 자격 증명이 없습니다."
  overload: System.Xml.XmlUrlResolver.Credentials*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)
  id: GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntity(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "실제 리소스가 포함 된 개체로 URI를 매핑합니다."
  remarks: "이 메서드는 호출자가 URI가 나타내는 리소스를 포함 하는 개체에 지정된 된 URI를 매핑할 때 사용 됩니다.       이 메서드의 비동기 버전 <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>.</xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A> 을 참조 하십시오.      > [!IMPORTANT] > IStream을 구현 하 여 응용 프로그램 메모리 GetEntity 메서드에 대 한 서비스 거부를 완화할 수<xref:System.Runtime.InteropServices.ComTypes.IStream> 읽은 바이트 수를 제한 합니다.</xref:System.Runtime.InteropServices.ComTypes.IStream> 이렇게 하면 악의적인 코드 여기서 GetEntity 메서드에 무한 바이트 스트림을 전달 하려고 하는 상황을 방지 합니다."
  example:
  - "The following example demonstrates the `GetEntity` and <xref:System.Xml.XmlResolver.ResolveUri%2A> methods.  \n  \n [!code-vb[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlurlresol_1.vb)]\n [!code-cpp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/add/codesnippet/cpp/m-system.xml.xmlurlresol_1.cpp)]\n [!code-cs[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/add/codesnippet/csharp/m-system.xml.xmlurlresol_1.cs)]"
  syntax:
    content: public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "<xref:System.Xml.XmlResolver.ResolveUri*>.</xref:System.Xml.XmlResolver.ResolveUri*> 에서 반환 된 URI"
    - id: role
      type: System.String
      description: "현재 사용 되지 않습니다."
    - id: ofObjectToReturn
      type: System.Type
      description: "반환할 개체의 형식입니다. 현재 구현만 반환 <xref:System.IO.Stream>개체입니다.</xref:System.IO.Stream>"
    return:
      type: System.Object
      description: "Stream 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 스트림 외의 다른 형식을 지정 합니다."
  overload: System.Xml.XmlUrlResolver.GetEntity*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>ofObjectToReturn</code>가 아닌 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 <xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;> </xref> 유형입니다."
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "지정된 된 URI는 절대 URI가 아닙니다."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>absoluteUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "런타임 오류 (예를 들어 중단 된 서버 연결)입니다."
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  id: GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntityAsync(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "실제 리소스가 포함 된 개체로 URI를 비동기적으로 매핑합니다."
  syntax:
    content: public override System.Threading.Tasks.Task<object> GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "<xref:System.Xml.XmlResolver.ResolveUri*>.</xref:System.Xml.XmlResolver.ResolveUri*> 에서 반환 된 URI"
    - id: role
      type: System.String
      description: "현재 사용 되지 않습니다."
    - id: ofObjectToReturn
      type: System.Type
      description: "반환할 개체의 형식입니다. 현재 구현만 반환 <xref:System.IO.Stream>개체입니다.</xref:System.IO.Stream>"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "Stream 개체 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 스트림 외의 다른 형식을 지정 합니다."
  overload: System.Xml.XmlUrlResolver.GetEntityAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.Proxy
  id: Proxy
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: Proxy
  nameWithType: XmlUrlResolver.Proxy
  fullName: System.Xml.XmlUrlResolver.Proxy
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "원본에 대 한 네트워크 프록시를 가져오거나 <xref:System.Net.WebRequest>개체입니다.</xref:System.Net.WebRequest>"
  syntax:
    content: public System.Net.IWebProxy Proxy { set; }
    return:
      type: System.Net.IWebProxy
      description: "<xref:System.Net.IWebProxy>인터넷 리소스에 액세스 하는 데.</xref:System.Net.IWebProxy>"
  overload: System.Xml.XmlUrlResolver.Proxy*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)
  id: ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: ResolveUri(Uri,String)
  nameWithType: XmlUrlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlUrlResolver.ResolveUri(Uri,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "기본 및 상대 Uri에서 절대 URI를 확인 합니다."
  remarks: "이 URI를 기준으로 하는 엔터티에 대 한 후속 요청에 대 한 기본 URI로 절대 URI는 사용할 수 있습니다."
  syntax:
    content: public override Uri ResolveUri (Uri baseUri, string relativeUri);
    parameters:
    - id: baseUri
      type: System.Uri
      description: "기본 URI는 상대 URI를 확인 하는 데 사용 합니다."
    - id: relativeUri
      type: System.String
      description: "확인할 URI입니다. 절대 또는 상대 URI 수 있습니다. 경우 절대이 값이 대체는 `baseUri` 값입니다. 경우 상대와 결합 하 여는 `baseUri` 를 절대 URI를 확인 합니다."
    return:
      type: System.Uri
      description: "절대 URI 또는 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 상대 URI를 확인할 수 없는 경우."
  overload: System.Xml.XmlUrlResolver.ResolveUri*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>baseUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or <code>relativeUri</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Xml.XmlResolver
  isExternal: false
  name: System.Xml.XmlResolver
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Xml.XmlUrlResolver.#ctor
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: XmlUrlResolver()
  nameWithType: XmlUrlResolver.XmlUrlResolver()
  fullName: System.Xml.XmlUrlResolver.XmlUrlResolver()
- uid: System.Xml.XmlUrlResolver.CachePolicy
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: CachePolicy
  nameWithType: XmlUrlResolver.CachePolicy
  fullName: System.Xml.XmlUrlResolver.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Xml.XmlUrlResolver.Credentials
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlUrlResolver.Credentials
  fullName: System.Xml.XmlUrlResolver.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntity(Uri,String,Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntityAsync(Uri,String,Type)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlUrlResolver.Proxy
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Proxy
  nameWithType: XmlUrlResolver.Proxy
  fullName: System.Xml.XmlUrlResolver.Proxy
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: ResolveUri(Uri,String)
  nameWithType: XmlUrlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlUrlResolver.ResolveUri(Uri,String)
- uid: System.Xml.XmlUrlResolver.#ctor*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: XmlUrlResolver
  nameWithType: XmlUrlResolver.XmlUrlResolver
- uid: System.Xml.XmlUrlResolver.CachePolicy*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: CachePolicy
  nameWithType: XmlUrlResolver.CachePolicy
- uid: System.Xml.XmlUrlResolver.Credentials*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlUrlResolver.Credentials
- uid: System.Xml.XmlUrlResolver.GetEntity*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntity
  nameWithType: XmlUrlResolver.GetEntity
- uid: System.Xml.XmlUrlResolver.GetEntityAsync*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntityAsync
  nameWithType: XmlUrlResolver.GetEntityAsync
- uid: System.Xml.XmlUrlResolver.Proxy*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Proxy
  nameWithType: XmlUrlResolver.Proxy
- uid: System.Xml.XmlUrlResolver.ResolveUri*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: ResolveUri
  nameWithType: XmlUrlResolver.ResolveUri
