### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultKey
  id: SemanticResultKey
  children:
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  - System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
  type: Class
  summary: "연결 된 키 문자열 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> 정의 하는 값 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> 개체입니다."
  remarks: "System.Speech에 의미 체계 식의 기본 단위는 <xref:System.Speech.Recognition.SemanticValue>, 되는 키/값 쌍입니다.</xref:System.Speech.Recognition.SemanticValue>       태그 SemanticResultKey 개체를 사용 하 여 <xref:System.Speech.Recognition.SemanticResultValue>포함 된 인스턴스 <xref:System.Speech.Recognition.GrammarBuilder>개체 및 문자열 값에서 쉽게 액세스할 수 있도록 <xref:System.Speech.Recognition.SemanticValue>인식을 인스턴스.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>       사용할 수 있습니다 <xref:System.Speech.Recognition.SemanticResultValue>및 SemanticResultKey 개체와 함께에서 <xref:System.Speech.Recognition.GrammarBuilder>및 <xref:System.Speech.Recognition.Choices>개체 음성 인식 문법에 대 한 의미 체계 구조를 정의 합니다.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> 인식 결과의 의미 체계 정보에 액세스 하려면 <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> 속성</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 을 통해</xref:System.Speech.Recognition.SemanticValue> 의 인스턴스를 가져올       사용에 대 한 자세한 내용은 <xref:System.Speech.Recognition.SemanticResultValue>SemanticResultKey 개체 참조 및 [이해 SemanticResultValue 및 SemanticResultKey 개체](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c) 및 [는 SemanticResultValue를 추출 하는 SemanticResultKey 사용](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa) 에 [.NET Framework 4.0에 대 한 시스템 음성 프로그래밍 가이드](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043).</xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n    RecognitionResult result=eventArgs.Result;  \n  \n    if (!semantics.ContainsKey(\"Password\"))   \n    {  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n    }  \n    else   \n    {  \n      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  \n      MemoryStream pwdMemoryStream = new MemoryStream();  \n      pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n      if (!IsValidPwd(pwdMemoryStream))   \n      {  \n        string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n        pwdAudio.WriteToWaveStream(waveStream);  \n        waveStream.Flush();  \n        waveStream.Close();  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n  \n      }  \n    }  \n  };  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]

      public class SemanticResultKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "의미 체계 키를 하나 이상 할당 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 를 음성 인식 문법을 만드는 데 사용 되는 개체입니다."
  remarks: "암시적 변환으로 인해는 `builders` 인수 지원 <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, 및 <xref:System.String>개체도.</xref:System.String> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 암시적 변환에 대 한 자세한 내용은 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 을 참조 하십시오.       인식 작업을 수행할 때의 <xref:System.Speech.Recognition.GrammarBuilder>에서 제공 하는 개체는 `builders` 인수를 순차적으로 처리 됩니다.</xref:System.Speech.Recognition.GrammarBuilder> 예를 들어 경우 다음 <xref:System.Speech.Recognition.SemanticResultValue>생성 하는 데 사용 되는 <xref:System.Speech.Recognition.Grammar>, 인식 엔진에 대 한 입력 인식 되도록 하려면 순서로 &quot;무궁화&quot; 단어를 포함 해야 합니다.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(       &quot;stringTest&quot;, new GrammarBuilder[] {       new GrammarBuilder(&quot;the&quot;),       new GrammarBuilder(&quot;quick&quot;),       new GrammarBuilder(&quot;brown&quot;),       new GrammarBuilder(&quot;fox&quot;)});   ````semanticResultKey` 사용 되는 태그를 포함 하는 인수에 대 한 액세스는 <xref:System.Speech.Recognition.SemanticValue>반환 될 수 있습니다.</xref:System.Speech.Recognition.SemanticValue>       <xref:System.Speech.Recognition.SemanticValue.Value%2A>의 <xref:System.Speech.Recognition.SemanticValue>에 의해 결정 됩니다는 <xref:System.Speech.Recognition.GrammarBuilder>에서 제공 하는 인스턴스는 `builders` 매개 변수.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       경우는 <xref:System.Speech.Recognition.GrammarBuilder>인스턴스가 없는 정의 포함 하는 개체 <xref:System.Speech.Recognition.SemanticResultValue>의 값은 <xref:System.Speech.Recognition.SemanticValue>은 `null`.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>       경우는 <xref:System.Speech.Recognition.GrammarBuilder>에서 제공 하는 개체는 `builders` 매개 변수는 태그 되지 않은 제공 (연관 되지 않은 <xref:System.Speech.Recognition.SemanticResultKey>개체) <xref:System.Speech.Recognition.SemanticResultValue>의 인스턴스를 인식 논리에 의해 사용 되는 인스턴스에 <xref:System.Speech.Recognition.SemanticResultValue>를 정의 합니다는 <xref:System.Speech.Recognition.SemanticValue.Value%2A>속성은 <xref:System.Speech.Recognition.SemanticValue>생성.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder>       1 이어야 하며 하나의 가져오기만 태그 없음 <xref:System.Speech.Recognition.SemanticResultValue>인스턴스는 <xref:System.Speech.Recognition.GrammarBuilder>지정 된 개체는 `builders` 매개 변수.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> 여러 인스턴스가 없는 경우 <xref:System.Speech.Recognition.SemanticResultValue>연관 된는 <xref:System.Speech.Recognition.SemanticResultKey>, 각는 하려고 집합의 값은 <xref:System.Speech.Recognition.SemanticValue>인식 결과에서 생성 된.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 이 허용 되지 않으며, 인식기에서 사용 하려고 할 때 예외가 발생 합니다는 <xref:System.Speech.Recognition.Grammar>등을 사용 하 여 만든는 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Grammar>       인스턴스 <xref:System.Speech.Recognition.SemanticResultValue>에 포함 된는 <xref:System.Speech.Recognition.GrammarBuilder>지정 된 개체는 `builders` 매개 변수 및 다른 관련 이미 <xref:System.Speech.Recognition.SemanticResultKey>현재 영향을 주지 않습니다 <xref:System.Speech.Recognition.SemanticResultKey>인스턴스.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is \"Password\". The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized +=   \n    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n    {  \n      SemanticValue semantics = eventArgs.Result.Semantics;  \n      RecognitionResult result=eventArgs.Result;  \n  \n      if (!semantics.ContainsKey(\"Password\"))   \n      {  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n      }  \n      else   \n      {  \n        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n                  MemoryStream pwdMemoryStream = new MemoryStream();  \n                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n        if (!IsValidPwd(pwdMemoryStream))   \n        {  \n          string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    \n          pwdAudio.WriteToWaveStream(waveStream);  \n          waveStream.Flush();  \n          waveStream.Close();  \n          SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);      \n        }  \n      }  \n    };  \n  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, System.Speech.Recognition.GrammarBuilder[] builders);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "태그를 액세스 하는 의미 체계 키로 사용할 수는 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> 와 연결 된 인스턴스는 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 지정 된 개체는 `builders` 인수입니다."
    - id: builders
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "과 연결 될 문법 구성 요소의 배열을 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> 개체에 정의 된 태그도 액세스할 수 있는 `semanticResultKey`합니다."
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "의미 체계 키를 하나 이상 할당 <xref:System.String>음성 인식 문법을 만드는 데 인스턴스.</xref:System.String>"
  remarks: "인식 작업을 수행할 때의 <xref:System.String>에 사용 되는 개체는 `phrases` 매개 변수를 순차적으로 처리 됩니다.</xref:System.String> 예를 들어 경우 다음 <xref:System.Speech.Recognition.SemanticResultValue>생성 하는 데 사용 되는 <xref:System.Speech.Recognition.Grammar>, 인식 엔진에 대 한 입력 인식 되도록 하려면 순서로 &quot;무궁화&quot; 단어를 포함 해야 합니다.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(&quot;stringTest&quot;,                                    new string[] {                                                  &quot;the&quot;,                                                  &quot;quick&quot;,                                                  &quot;brown&quot;,                                                  &quot;fox&quot;});   ````semanticResultKey` 인수 결정 사용 되는 키에 대 한 액세스는 <xref:System.Speech.Recognition.SemanticValue>반환 될 수 있습니다.</xref:System.Speech.Recognition.SemanticValue>       생성 하는 경우는 <xref:System.Speech.Recognition.Grammar>를 사용 하는 <xref:System.Speech.Recognition.GrammarBuilder>string 개체의 배열 사용 하 여 의미 체계 키가 포함 된 개체는 <xref:System.Speech.Recognition.SemanticValue.Value%2A>의 <xref:System.Speech.Recognition.SemanticValue>인식에서 사용 되는 문자열 인식 작업으로 생성 됩니다.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar> 앞의 예제에서 즉 <xref:System.Speech.Recognition.SemanticValue.Value%2A>&quot;무궁화&quot;는 것입니다.</xref:System.Speech.Recognition.SemanticValue.Value%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.  \n  \n A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase \"color red green blue zero\". The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of \"red green blue\". You can access the <xref:System.Speech.Recognition.SemanticValue> using the \"code\" tag.  \n  \n Because of the `SemanticResultValue(\"zero\", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.  \n  \n```c#  \nprivate void keyTest()   \n{  \n  // Say \"color red green blue zero\"  \n  GrammarBuilder gb = new GrammarBuilder(\"color\") +  \n                        new SemanticResultKey(\"code\",   \n                          (new string[] {\"red\", \"green\", \"blue\"})) +  \n                        new SemanticResultValue(\"zero\", 5);  \n  Grammar g = new Grammar(gb);  \n  g.Name = \"keyTest\";  \n  _recognizer.LoadGrammar(g);  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, string[] phrases);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "태그 수를 액세스 사용는 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> 와 연결 된 인스턴스는 <xref:System.String>지정 된 개체는 `phrases` 인수.</xref:System.String>"
    - id: phrases
      type: System.String[]
      description: "하나 이상의 <xref:System.String>인 연결 된 텍스트 연관 될 개체는 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> 개체에 정의 된 태그도 액세스할 수 있는 `semanticResultKey`.</xref:System.String>"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "인스턴스를 반환 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 현재에서 생성 된 <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> 인스턴스."
  remarks: "사용 <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>사용 하는 <xref:System.Speech.Recognition.GrammarBuilder>사용 생성자를 <xref:System.Speech.Recognition.SemanticResultKey>인수로 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances. The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the ToGrammarBuilder method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling ToGrammarBuilder on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RGB.  \n  // Choices constructors do not take SemanticResultValue parameters, so cast   \n  // the SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  \n    colorChoice.Add(colorValue.ToGrammarBuilder());      \n  }  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with introductory phrase and the color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the Grammar object, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  \n  grammar.Name = \"Make Background /Configure background as\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "인스턴스를 반환 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> 현재에서 생성 된 <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> 인스턴스."
  overload: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultKey.#ctor*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey.SemanticResultKey
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultKey.ToGrammarBuilder
