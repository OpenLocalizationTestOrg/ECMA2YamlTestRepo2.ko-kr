### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.MultiBinding
  id: MultiBinding
  children:
  - System.Windows.Data.MultiBinding.#ctor
  - System.Windows.Data.MultiBinding.Bindings
  - System.Windows.Data.MultiBinding.Converter
  - System.Windows.Data.MultiBinding.ConverterCulture
  - System.Windows.Data.MultiBinding.ConverterParameter
  - System.Windows.Data.MultiBinding.Mode
  - System.Windows.Data.MultiBinding.NotifyOnSourceUpdated
  - System.Windows.Data.MultiBinding.NotifyOnTargetUpdated
  - System.Windows.Data.MultiBinding.NotifyOnValidationError
  - System.Windows.Data.MultiBinding.ShouldSerializeBindings
  - System.Windows.Data.MultiBinding.ShouldSerializeValidationRules
  - System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter
  - System.Windows.Data.MultiBinding.UpdateSourceTrigger
  - System.Windows.Data.MultiBinding.ValidatesOnDataErrors
  - System.Windows.Data.MultiBinding.ValidatesOnExceptions
  - System.Windows.Data.MultiBinding.ValidatesOnNotifyDataErrors
  - System.Windows.Data.MultiBinding.ValidationRules
  langs:
  - csharp
  name: MultiBinding
  nameWithType: MultiBinding
  fullName: System.Windows.Data.MultiBinding
  type: Class
  summary: "컬렉션을 설명 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 단일 바인딩 대상 속성에 연결 된 개체입니다."
  remarks: "MultiBinding 개체에서 여러 개의 바인딩을 지정할 수 있습니다. MultiBinding 개체를 사용 하 여 변환기가 있는 경우 해당 바인딩의 값을 기반으로 바인딩 대상에 대 한 최종 값을 생성 합니다. 예를 들어 색이 동일한 또는 다른 바인딩 소스 개체의 값일 수 있는 빨간색, 파란색 및 녹색 값에서 계산 될 수 있습니다. 값이 원본에 대상에서 이동할 대상 속성 값 바인딩으로 공급 하는 값의 집합으로 변환 됩니다.       값은 <xref:System.Windows.Data.MultiBinding.Mode%2A>및 <xref:System.Windows.Data.MultiBinding.UpdateSourceTrigger%2A>속성은 MultiBinding의 기능을 결정 하 고 개별 바인딩 이러한 속성을 재정의 하지 않는 한 컬렉션에 있는 모든 바인딩에 대 한 기본 값으로 사용 됩니다.</xref:System.Windows.Data.MultiBinding.UpdateSourceTrigger%2A> </xref:System.Windows.Data.MultiBinding.Mode%2A> 예를 들어 경우는 <xref:System.Windows.Data.MultiBinding.Mode%2A>MultiBinding 개체의 속성이로 설정 되어 <xref:System.Windows.Data.BindingMode>, 컬렉션의 모든 바인딩을 사용 하는 것으로 간주 <xref:System.Windows.Data.BindingMode>다른 설정 하지 않으면 <xref:System.Windows.Data.MultiBinding.Mode%2A>바인딩 중 하나에 값 명시적으로.</xref:System.Windows.Data.MultiBinding.Mode%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.MultiBinding.Mode%2A> 자세한 내용은 참조는 <xref:System.Windows.Data.Binding.Mode%2A?displayProperty=fullName>및 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A?displayProperty=fullName>속성.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.Mode%2A?displayProperty=fullName>       MultiBinding 개체의 형식 <xref:System.Windows.Data.Binding>및 MultiBinding 말거나 <xref:System.Windows.Data.PriorityBinding>.</xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.Binding> 를 현재 지원"
  syntax:
    content: >-
      [System.Windows.Markup.ContentProperty("Bindings")]

      public class MultiBinding : System.Windows.Data.BindingBase, System.Windows.Markup.IAddChild
  inheritance:
  - System.Windows.Markup.MarkupExtension
  - System.Windows.Data.BindingBase
  implements:
  - System.Windows.Markup.IAddChild
  inheritedMembers:
  - System.Windows.Data.BindingBase.BindingGroupName
  - System.Windows.Data.BindingBase.Delay
  - System.Windows.Data.BindingBase.FallbackValue
  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  - System.Windows.Data.BindingBase.StringFormat
  - System.Windows.Data.BindingBase.TargetNullValue
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: MultiBinding()
  nameWithType: MultiBinding.MultiBinding()
  fullName: System.Windows.Data.MultiBinding.MultiBinding()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 클래스입니다."
  syntax:
    content: public MultiBinding ();
    parameters: []
  overload: System.Windows.Data.MultiBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.Bindings
  id: Bindings
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: Bindings
  nameWithType: MultiBinding.Bindings
  fullName: System.Windows.Data.MultiBinding.Bindings
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "컬렉션을 가져옵니다 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 이 내의 개체 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 인스턴스."
  remarks: "> [!NOTE]>이 속성 설정할 수 있습니다 [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] 만 표시 되는 구문을 사용 하거나 컬렉션 개체에 액세스 하 고와 같은 여러 메서드를 사용 하 여 `Add`합니다. 컬렉션 개체를 액세스 하는 데 속성이 읽기 전용 이지만 컬렉션 자체는 읽기/쓰기입니다.      <a name=&quot;xamlPropertyElementUsage_Bindings&quot;></a># # XAML 속성 요소 사용 ```   <object>     oneOrMoreBindings   </object>      ``` <a name=&quot;xamlValues_Bindings&quot;> </a> # # XAML 값 *oneOrMoreBindings* 하나 이상의 <xref:System.Windows.Data.Binding>개체입니다.</xref:System.Windows.Data.Binding>      "
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Data.BindingBase> Bindings { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Data.BindingBase}
      description: "컬렉션 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 개체입니다. <xref href=&quot;System.Windows.Data.MultiBinding&quot;></xref>현재 형식의 개체만 지원 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 아닌 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 또는 <xref href=&quot;System.Windows.Data.PriorityBinding&quot;> </xref>합니다. 추가 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> 자식은 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 에 자식이 암시적으로 추가 하는 개체는 <xref href=&quot;System.Windows.Data.BindingBase&quot;> </xref> 에 대 한 컬렉션의 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 개체입니다."
  overload: System.Windows.Data.MultiBinding.Bindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.Converter
  id: Converter
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: Converter
  nameWithType: MultiBinding.Converter
  fullName: System.Windows.Data.MultiBinding.Converter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "소스 값을 대상 값으로 변환 하는 데 변환기를 가져오거나 설정 합니다."
  remarks: "컬렉션의 개별 바인딩 <xref:System.Windows.Data.Binding.Converter%2A>.</xref:System.Windows.Data.Binding.Converter%2A> 고유 값을 가질 수 있습니다. 자세한 내용은 <xref:System.Windows.Data.IValueConverter>.</xref:System.Windows.Data.IValueConverter> 을 참조 하십시오.      <a name=&quot;xamlAttributeUsage_Converter&quot;></a># # XAML 특성 사용 ```   <object Converter=&quot;myConverter&quot;/>   ``` <a name=&quot;xamlValues_Converter&quot;> </a> # # XAML 값 *myConverter* 구현 하는 클래스에 대 한 리소스 참조는 <xref:System.Windows.Data.IMultiValueConverter>구현이 포함 된 인터페이스는 <xref:System.Windows.Data.IMultiValueConverter.Convert%2A>및 <xref:System.Windows.Data.IMultiValueConverter.ConvertBack%2A>메서드.</xref:System.Windows.Data.IMultiValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IMultiValueConverter.Convert%2A> </xref:System.Windows.Data.IMultiValueConverter>       값 변환기를 참조 하려면 사용 된 [태그 확장명 및 WPF XAML](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Windows.Data.IMultiValueConverter Converter { get; set; }
    return:
      type: System.Windows.Data.IMultiValueConverter
      description: "형식의 값 <xref href=&quot;System.Windows.Data.IMultiValueConverter&quot;> </xref> 사용할 변환기를 나타내는입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ConverterCulture
  id: ConverterCulture
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ConverterCulture
  nameWithType: MultiBinding.ConverterCulture
  fullName: System.Windows.Data.MultiBinding.ConverterCulture
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "가져오거나는 <xref:System.Globalization.CultureInfo>의해 래핑된 바인딩에 할당 된 변환기에 적용 되는 개체는 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 또는 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 자체.</xref:System.Globalization.CultureInfo>"
  remarks: "<a name=&quot;xamlAttributeUsage_ConverterCulture&quot;></a># # XAML 특성 사용 ```   <object ConverterCulture=&quot;ietfLanguageTag&quot;/>   ``` <a name=&quot;xamlValues_ConverterCulture&quot;> </a> # # XAML 값 *ietfLanguageTag* <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> 를 설정 하는 데 사용 하는 문자열       이 문자열은 내부 호출에 사용 됩니다. <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A>.</xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> 문자열 형식에 대 한 자세한 내용은 <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A?displayProperty=fullName> 을 참조 하십시오."
  syntax:
    content: public System.Globalization.CultureInfo ConverterCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "에 유효한 <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo>"
  overload: System.Windows.Data.MultiBinding.ConverterCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ConverterParameter
  id: ConverterParameter
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ConverterParameter
  nameWithType: MultiBinding.ConverterParameter
  fullName: System.Windows.Data.MultiBinding.ConverterParameter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "추가 정보로 변환기에 전달할 선택적 매개 변수를 가져오거나 설정 합니다."
  remarks: "<a name=&quot;xamlPropertyElementUsage_ConverterParameter&quot;></a># # XAML 속성 요소 사용 ```   <object>     <object.ConverterParameter>       converterParameter     </object.ConverterParameter>   </object>   ``` <a name=&quot;xamlAttributeUsage_ConverterParameter&quot;> </a> # # XAML 특성 사용 ```   <object property=&quot;converterParameter&quot; />   ``` <a name=&quot;xamlValues_ConverterParameter&quot;> </a> # # XAML 값 *converterParameter* 정 및 사용 하 고 있는 속성을 입력 하는 XAML 기능에 따라 문자열 또는 개체 요소가 될 수 있는 변환기에서 예상 된 유형 값 변환기의 구현입니다.             변환기를 통해 해당 형식을 사용는 `parameter` 에 정의 된 대로 매개 변수는 <xref:System.Windows.Data.IValueConverter.Convert%2A>및 <xref:System.Windows.Data.IValueConverter.ConvertBack%2A>구현.</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A>"
  syntax:
    content: public object ConverterParameter { get; set; }
    return:
      type: System.Object
      description: "변환기에 전달 하는 매개 변수입니다. 기본값은 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.ConverterParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.Mode
  id: Mode
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: Mode
  nameWithType: MultiBinding.Mode
  fullName: System.Windows.Data.MultiBinding.Mode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "이 바인딩의 데이터 흐름의 방향을 나타내는 값을 가져오거나 설정 합니다."
  remarks: "모드의 값 및 <xref:System.Windows.Data.MultiBinding.UpdateSourceTrigger%2A>속성의 기능에 따라 결정 된 <xref:System.Windows.Data.MultiBinding>되며 개별 바인딩 이러한 속성을 재정의 하지 않는 한 컬렉션에 있는 모든 바인딩에 대 한 기본 값으로 사용 됩니다.</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.MultiBinding.UpdateSourceTrigger%2A> 예를 들어 경우 모드 속성에는 <xref:System.Windows.Data.MultiBinding>개체가으로 설정 되 <xref:System.Windows.Data.BindingMode>, 컬렉션의 모든 바인딩을 사용 하는 것으로 간주 <xref:System.Windows.Data.BindingMode>바인딩 중 하나에서 서로 다른 모드 값을 설정 하지 않으면 명시적으로.</xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.MultiBinding> 자세한 내용은 참조는 <xref:System.Windows.Data.Binding.Mode%2A?displayProperty=fullName>및 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A?displayProperty=fullName>속성.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.Mode%2A?displayProperty=fullName>"
  syntax:
    content: public System.Windows.Data.BindingMode Mode { get; set; }
    return:
      type: System.Windows.Data.BindingMode
      description: "중 하나는 <xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref> 값입니다. 기본값은 <xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref>, 대상 종속성 속성의 기본 바인딩 모드 값을 반환 하 합니다. 그러나 각 종속성 속성에 대 한 기본값이 다릅니다. 일반적으로 사용자가 편집 가능한 컨트롤 속성의 같은 &lt;xref:System.Windows.Controls.TextBox.Text%2A?displayProperty=fullName&gt;의 기본값은 양방향 바인딩으로 설정 되지만 대부분의 다른 속성 기본값은 단방향 바인딩으로 설정 합니다.       종속성 속성이 단방향 또는 양방향 기본적으로 바인드 되는지를 결정 하는 프로그래밍 방법을 사용 하 여 속성의 속성 메타 데이터를 가져오려는 <> </> *> 다음의 부울 값을 확인 하 고는 <> </> *> 속성."
  overload: System.Windows.Data.MultiBinding.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.NotifyOnSourceUpdated
  id: NotifyOnSourceUpdated
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: NotifyOnSourceUpdated
  nameWithType: MultiBinding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.MultiBinding.NotifyOnSourceUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "발생시킬지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.FrameworkElement.SourceUpdated&quot;> </xref> 값은 바인딩 대상에서에서 바인딩 소스로 전송 될 때 이벤트입니다."
  syntax:
    content: public bool NotifyOnSourceUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Windows.FrameworkElement.SourceUpdated&quot;> </xref> 바인딩 소스 값이 고, 그렇지 않으면 업데이트 된 때 이벤트가 발생 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.NotifyOnSourceUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.NotifyOnTargetUpdated
  id: NotifyOnTargetUpdated
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: NotifyOnTargetUpdated
  nameWithType: MultiBinding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.MultiBinding.NotifyOnTargetUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "발생시킬지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.FrameworkElement.TargetUpdated&quot;> </xref> 값이 바인딩 소스에서 바인딩 대상으로 전송 될 때 이벤트입니다."
  syntax:
    content: public bool NotifyOnTargetUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref href=&quot;System.Windows.FrameworkElement.TargetUpdated&quot;> </xref> 바인딩 대상 값이 고, 그렇지 않으면 업데이트 된 때 이벤트가 발생 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.NotifyOnTargetUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.NotifyOnValidationError
  id: NotifyOnValidationError
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: NotifyOnValidationError
  nameWithType: MultiBinding.NotifyOnValidationError
  fullName: System.Windows.Data.MultiBinding.NotifyOnValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "발생시킬지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref:System.Windows.Controls.Validation.Error>바인딩된 요소에서 연결 된 이벤트입니다.</xref:System.Windows.Controls.Validation.Error>"
  syntax:
    content: public bool NotifyOnValidationError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우는 <xref:System.Windows.Controls.Validation.Error>연결 된 이벤트는 고, 그렇지 않으면 원본 업데이트 중에 유효성 검사 오류가 있을 때 바인딩된 요소에서 발생 됩니다 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Controls.Validation.Error> 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.NotifyOnValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ShouldSerializeBindings
  id: ShouldSerializeBindings
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ShouldSerializeBindings()
  nameWithType: MultiBinding.ShouldSerializeBindings()
  fullName: System.Windows.Data.MultiBinding.ShouldSerializeBindings()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "표시 여부는 <xref:System.Windows.Data.MultiBinding.Bindings*>속성을 유지 해야 합니다.</xref:System.Windows.Data.MultiBinding.Bindings*>"
  remarks: "이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.Data.MultiBinding.Bindings%2A>속성 간단한 기본 값이 없는.</xref:System.Windows.Data.MultiBinding.Bindings%2A> 이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다. <xref:System.Windows.Data.MultiBinding>또는 <xref:System.Windows.Data.MultiBinding>.</xref:System.Windows.Data.MultiBinding> 통합 제어 자체 개발</xref:System.Windows.Data.MultiBinding> 에 대 한 디자이너를 하거나 개발 하는 경우 일반적으로이 메서드를 호출"
  syntax:
    content: public bool ShouldSerializeBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 값이 기본값에서 변경 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.ShouldSerializeBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ShouldSerializeValidationRules
  id: ShouldSerializeValidationRules
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ShouldSerializeValidationRules()
  nameWithType: MultiBinding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.MultiBinding.ShouldSerializeValidationRules()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "표시 여부는 <xref:System.Windows.Data.MultiBinding.ValidationRules*>속성을 유지 해야 합니다.</xref:System.Windows.Data.MultiBinding.ValidationRules*>"
  remarks: "이 `ShouldSerialize` 메서드가 때문에 제공 되는 <xref:System.Windows.Data.MultiBinding.ValidationRules%2A>속성 간단한 기본 값이 없는.</xref:System.Windows.Data.MultiBinding.ValidationRules%2A> 이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다. <xref:System.Windows.Data.MultiBinding>또는 <xref:System.Windows.Data.MultiBinding>.</xref:System.Windows.Data.MultiBinding> 통합 제어 자체 개발</xref:System.Windows.Data.MultiBinding> 에 대 한 디자이너를 하거나 개발 하는 경우 일반적으로이 메서드를 호출"
  syntax:
    content: public bool ShouldSerializeValidationRules ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>속성 값이 기본값에서 변경 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.ShouldSerializeValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddChild(System.Object)
  id: System#Windows#Markup#IAddChild#AddChild(System.Object)
  isEii: true
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: MultiBinding.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Data.MultiBinding.System.Windows.Markup.IAddChild.AddChild(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "자식 개체를 추가 합니다."
  syntax:
    content: void IAddChild.AddChild (object value);
    parameters:
    - id: value
      type: System.Object
      description: "추가할 자식 개체입니다."
  overload: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddText(System.String)
  id: System#Windows#Markup#IAddChild#AddText(System.String)
  isEii: true
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: MultiBinding.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Data.MultiBinding.System.Windows.Markup.IAddChild.AddText(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "개체에 있는 노드의 텍스트 콘텐츠를 추가합니다."
  syntax:
    content: void IAddChild.AddText (string text);
    parameters:
    - id: text
      type: System.String
      description: "개체에 추가할 텍스트입니다."
  overload: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter
  id: UpdateSourceExceptionFilter
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: UpdateSourceExceptionFilter
  nameWithType: MultiBinding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 소스 값을 업데이트 하는 동안 바인딩 엔진에서 발생 하는 예외를 처리 하기 위한 사용자 지정 논리를 제공 하는 데 사용할 수 있는 처리기를 가져오거나 설정 합니다. 만 연결한 경우에 적용 됩니다는 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref> 와 프로그램 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref> 개체입니다."
  remarks: "<xref:System.Windows.Controls.ExceptionValidationRule>클래스 바인딩 소스 속성을 업데이트 하는 동안 throw 되는 예외를 확인 하는 기본 제공 유효성 검사 규칙을 나타냅니다.</xref:System.Windows.Controls.ExceptionValidationRule> 연결한 경우는 <xref:System.Windows.Controls.ExceptionValidationRule>개체 프로그램 <xref:System.Windows.Data.MultiBinding>개체를 이러한 예외를 처리 하기 위한 사용자 지정 논리를 제공 하는 처리기를 설정 하려면이 속성을 사용할 수 있습니다.</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Controls.ExceptionValidationRule>       예를 들어 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A?displayProperty=fullName> 을 참조 하십시오.       에 대 한 유효성 검사 프로세스에 대 한 자세한 내용은 <xref:System.Windows.Data.MultiBinding>개체 참조는 <xref:System.Windows.Data.MultiBinding.ValidationRules%2A>속성.</xref:System.Windows.Data.MultiBinding.ValidationRules%2A> </xref:System.Windows.Data.MultiBinding>"
  syntax:
    content: public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceExceptionFilterCallback
      description: "바인딩 소스 값을 업데이트 하는 동안 바인딩 엔진에서 발생 하는 예외를 처리 하기 위한 사용자 지정 논리를 제공 하는 메서드."
  overload: System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.UpdateSourceTrigger
  id: UpdateSourceTrigger
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: UpdateSourceTrigger
  nameWithType: MultiBinding.UpdateSourceTrigger
  fullName: System.Windows.Data.MultiBinding.UpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "바인딩 소스 업데이트의 타이밍을 결정 하는 값을 가져오거나 설정 합니다."
  remarks: "값은 <xref:System.Windows.Data.MultiBinding.Mode%2A>UpdateSourceTrigger 속성의 기능을 결정 하 고는 <xref:System.Windows.Data.MultiBinding>되며 개별 바인딩 이러한 속성을 재정의 하지 않는 한 컬렉션에 있는 모든 바인딩에 대 한 기본 값으로 사용 됩니다.</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.MultiBinding.Mode%2A> 예를 들어 경우는 <xref:System.Windows.Data.MultiBinding.Mode%2A>속성에는 <xref:System.Windows.Data.MultiBinding>개체로 설정 되어 <xref:System.Windows.Data.BindingMode>, 컬렉션의 모든 바인딩을 사용 하는 것으로 간주 <xref:System.Windows.Data.BindingMode>다른 설정 하지 않으면 <xref:System.Windows.Data.MultiBinding.Mode%2A>바인딩 중 하나에 값 명시적으로.</xref:System.Windows.Data.MultiBinding.Mode%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.MultiBinding.Mode%2A> 자세한 내용은 참조는 <xref:System.Windows.Data.Binding.Mode%2A?displayProperty=fullName>및 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A?displayProperty=fullName>속성.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.Mode%2A?displayProperty=fullName>"
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "중 하나는 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 값입니다. 기본값은 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>, 기본값을 반환 하는 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> 대상 종속성 속성의 값입니다. 그러나 대부분의 종속성 속성에 대 한 기본 값은 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>, 동안는 <> </> *> 속성의 기본값은 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>합니다.       기본값을 결정 하는 프로그래밍 방법을 <> </> *> 종속성 속성의 값을 사용 하 여 속성의 속성 메타 데이터를 얻는 것 <> </> *>의 값을 확인 한 다음는 <> </> *> 속성."
  overload: System.Windows.Data.MultiBinding.UpdateSourceTrigger*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ValidatesOnDataErrors
  id: ValidatesOnDataErrors
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ValidatesOnDataErrors
  nameWithType: MultiBinding.ValidatesOnDataErrors
  fullName: System.Windows.Data.MultiBinding.ValidatesOnDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "포함할지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>합니다."
  remarks: "사용 하는 대신 제공이 속성은 <xref:System.Windows.Controls.DataErrorValidationRule>요소 명시적으로.</xref:System.Windows.Controls.DataErrorValidationRule> <xref:System.Windows.Controls.DataErrorValidationRule>에 의해 발생 하는 오류를 검사 하는 기본 제공 유효성 검사 규칙의 <xref:System.ComponentModel.IDataErrorInfo>소스 개체의 구현.</xref:System.ComponentModel.IDataErrorInfo> </xref:System.Windows.Controls.DataErrorValidationRule> 오류가 발생 하는 경우 바인딩 엔진 만듭니다는 <xref:System.Windows.Controls.ValidationError>오류로 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>바인딩된 요소의 컬렉션입니다.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 오류가 없는 다른 규칙 유효성 검사 문제를 발생 하지 않는 한이 유효성 검사 피드백을 지웁니다.       에 대 한 유효성 검사 프로세스에 대 한 자세한 내용은 <xref:System.Windows.Data.MultiBinding>개체 참조는 <xref:System.Windows.Data.MultiBinding.ValidationRules%2A>속성.</xref:System.Windows.Data.MultiBinding.ValidationRules%2A> </xref:System.Windows.Data.MultiBinding>       ValidatesOnDataErrors는.NET Framework 버전 3.5에서에서 도입 되었습니다.  자세한 내용은 참조 [버전 및 종속성](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public bool ValidatesOnDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>포함 하는 <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.ValidatesOnDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ValidatesOnExceptions
  id: ValidatesOnExceptions
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ValidatesOnExceptions
  nameWithType: MultiBinding.ValidatesOnExceptions
  fullName: System.Windows.Data.MultiBinding.ValidatesOnExceptions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "포함할지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>합니다."
  remarks: "사용 하는 대신 제공이 속성은 <xref:System.Windows.Controls.ExceptionValidationRule>요소 명시적으로.</xref:System.Windows.Controls.ExceptionValidationRule> <xref:System.Windows.Controls.ExceptionValidationRule>source 속성을 업데이트 하는 동안 throw 되는 예외를 확인 하는 기본 제공 유효성 검사 규칙은.</xref:System.Windows.Controls.ExceptionValidationRule> 예외가 발생 하는 경우 바인딩 엔진 만듭니다는 <xref:System.Windows.Controls.ValidationError>예외와에 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>바인딩된 요소의 컬렉션입니다.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 오류가 없는 다른 규칙 유효성 검사 문제를 발생 하지 않는 한이 유효성 검사 피드백을 지웁니다.       에 대 한 유효성 검사 프로세스에 대 한 자세한 내용은 <xref:System.Windows.Data.MultiBinding>개체 참조는 <xref:System.Windows.Data.MultiBinding.ValidationRules%2A>속성.</xref:System.Windows.Data.MultiBinding.ValidationRules%2A> </xref:System.Windows.Data.MultiBinding>       ValidatesOnExceptions는.NET Framework 버전 3.5에서에서 도입 되었습니다.  자세한 내용은 참조 [버전 및 종속성](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public bool ValidatesOnExceptions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>포함 하는 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.ValidatesOnExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ValidatesOnNotifyDataErrors
  id: ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ValidatesOnNotifyDataErrors
  nameWithType: MultiBinding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.MultiBinding.ValidatesOnNotifyDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "포함할지 여부를 나타내는 값을 가져오거나 설정 합니다.는 <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>합니다."
  remarks: "ValidatesOnNotifyDataErrors 다음과 같은 경우 `true`, 바인딩을 확인 하 고 <xref:System.ComponentModel.INotifyDataErrorInfo>.</xref:System.ComponentModel.INotifyDataErrorInfo> 를 구현 하는 데이터 원본에 의해 발생 하는 오류를 보고 합니다."
  syntax:
    content: public bool ValidatesOnNotifyDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>포함 하는 <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.ValidatesOnNotifyDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.MultiBinding.ValidationRules
  id: ValidationRules
  parent: System.Windows.Data.MultiBinding
  langs:
  - csharp
  name: ValidationRules
  nameWithType: MultiBinding.ValidationRules
  fullName: System.Windows.Data.MultiBinding.ValidationRules
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "컬렉션을 가져옵니다 <xref href=&quot;System.Windows.Controls.ValidationRule&quot;> </xref> 개체의이 인스턴스에 대 한 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref>합니다."
  remarks: "둘 다에서 유효성 검사 규칙을 설정할 수는 <xref:System.Windows.Data.MultiBinding>개체와 개별 <xref:System.Windows.Data.Binding>개체에 <xref:System.Windows.Data.MultiBinding>개체입니다.</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.Binding> </xref:System.Windows.Data.MultiBinding> 바인딩 엔진에는 Validationrule 평가 <xref:System.Windows.Data.MultiBinding>값이 바인딩 대상 속성을 이동할 때 개체는 <xref:System.Windows.Data.IMultiValueConverter>개체입니다.</xref:System.Windows.Data.IMultiValueConverter> </xref:System.Windows.Data.MultiBinding> 그런 다음 개별 바인딩의 바인딩 소스 속성에 값이 변환기에서 이동할 때 바인딩 엔진 평가 <xref:System.Windows.Data.Binding.ValidationRules%2A>그에 <xref:System.Windows.Data.Binding>개체입니다.</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.ValidationRules%2A>       유효성 검사 프로세스 및 무효화 될 시각적 피드백을 제공 하는 방법에 대 한 자세한 내용은 &quot;데이터 유효성 검사&quot;를 참조 [데이터 바인딩 개요](~/add/includes/ajax-current-ext-md.md)합니다.      > [!NOTE] >에서이 속성을 설정할 수 [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] 표시 된 구문을 사용 하거나 컬렉션 개체에 액세스 하 고와 같은 여러 메서드를 사용 하 여 `Add`합니다. 컬렉션 개체를 액세스 하는 데 속성이 읽기 전용 이지만 컬렉션 자체는 읽기 / 쓰기입니다.      <a name=&quot;xamlPropertyElementUsage_ValidationRules&quot;></a># # XAML 속성 요소 사용 ```   <object>     <object.ValidationRules>       oneOrMoreValidationRules     </object.ValidationRules>   </object>   ``` <a name=&quot;xamlValues_ValidationRules&quot;> </a> # # XAML 값 *oneOrMoreValidationRules* 하나 이상의 <xref:System.Windows.Controls.ValidationRule>개체입니다.</xref:System.Windows.Controls.ValidationRule>       사용할 수 있습니다는 <xref:System.Windows.Controls.ExceptionValidationRule>클래스 또는 <xref:System.Windows.Controls.ValidationRule>클래스</xref:System.Windows.Controls.ValidationRule> 서브클래싱 하 여 사용자 지정 규칙을 만들려면</xref:System.Windows.Controls.ExceptionValidationRule>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
      description: "컬렉션 <xref href=&quot;System.Windows.Controls.ValidationRule&quot;> </xref> 개체의이 인스턴스에 대 한 <xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref>합니다."
  overload: System.Windows.Data.MultiBinding.ValidationRules*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.BindingBase
  isExternal: false
  name: System.Windows.Data.BindingBase
- uid: System.Windows.Data.MultiBinding.#ctor
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: MultiBinding()
  nameWithType: MultiBinding.MultiBinding()
  fullName: System.Windows.Data.MultiBinding.MultiBinding()
- uid: System.Windows.Data.MultiBinding.Bindings
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: Bindings
  nameWithType: MultiBinding.Bindings
  fullName: System.Windows.Data.MultiBinding.Bindings
- uid: System.Collections.ObjectModel.Collection{System.Windows.Data.BindingBase}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<BindingBase>
  nameWithType: Collection<BindingBase>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Data.BindingBase>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Data.BindingBase>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.BindingBase
    name: BindingBase
    nameWithType: BindingBase
    fullName: BindingBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.MultiBinding.Converter
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: Converter
  nameWithType: MultiBinding.Converter
  fullName: System.Windows.Data.MultiBinding.Converter
- uid: System.Windows.Data.IMultiValueConverter
  parent: System.Windows.Data
  isExternal: false
  name: IMultiValueConverter
  nameWithType: IMultiValueConverter
  fullName: System.Windows.Data.IMultiValueConverter
- uid: System.Windows.Data.MultiBinding.ConverterCulture
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ConverterCulture
  nameWithType: MultiBinding.ConverterCulture
  fullName: System.Windows.Data.MultiBinding.ConverterCulture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.MultiBinding.ConverterParameter
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ConverterParameter
  nameWithType: MultiBinding.ConverterParameter
  fullName: System.Windows.Data.MultiBinding.ConverterParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Data.MultiBinding.Mode
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: Mode
  nameWithType: MultiBinding.Mode
  fullName: System.Windows.Data.MultiBinding.Mode
- uid: System.Windows.Data.BindingMode
  parent: System.Windows.Data
  isExternal: false
  name: BindingMode
  nameWithType: BindingMode
  fullName: System.Windows.Data.BindingMode
- uid: System.Windows.Data.MultiBinding.NotifyOnSourceUpdated
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: MultiBinding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.MultiBinding.NotifyOnSourceUpdated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.MultiBinding.NotifyOnTargetUpdated
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: MultiBinding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.MultiBinding.NotifyOnTargetUpdated
- uid: System.Windows.Data.MultiBinding.NotifyOnValidationError
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: MultiBinding.NotifyOnValidationError
  fullName: System.Windows.Data.MultiBinding.NotifyOnValidationError
- uid: System.Windows.Data.MultiBinding.ShouldSerializeBindings
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ShouldSerializeBindings()
  nameWithType: MultiBinding.ShouldSerializeBindings()
  fullName: System.Windows.Data.MultiBinding.ShouldSerializeBindings()
- uid: System.Windows.Data.MultiBinding.ShouldSerializeValidationRules
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ShouldSerializeValidationRules()
  nameWithType: MultiBinding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.MultiBinding.ShouldSerializeValidationRules()
- uid: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddChild(System.Object)
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: MultiBinding.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Data.MultiBinding.System.Windows.Markup.IAddChild.AddChild(Object)
- uid: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddText(System.String)
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: MultiBinding.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Data.MultiBinding.System.Windows.Markup.IAddChild.AddText(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: MultiBinding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.UpdateSourceExceptionFilterCallback
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceExceptionFilterCallback
  nameWithType: UpdateSourceExceptionFilterCallback
  fullName: System.Windows.Data.UpdateSourceExceptionFilterCallback
- uid: System.Windows.Data.MultiBinding.UpdateSourceTrigger
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: MultiBinding.UpdateSourceTrigger
  fullName: System.Windows.Data.MultiBinding.UpdateSourceTrigger
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.Data.MultiBinding.ValidatesOnDataErrors
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: MultiBinding.ValidatesOnDataErrors
  fullName: System.Windows.Data.MultiBinding.ValidatesOnDataErrors
- uid: System.Windows.Data.MultiBinding.ValidatesOnExceptions
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: MultiBinding.ValidatesOnExceptions
  fullName: System.Windows.Data.MultiBinding.ValidatesOnExceptions
- uid: System.Windows.Data.MultiBinding.ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: MultiBinding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.MultiBinding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.MultiBinding.ValidationRules
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidationRules
  nameWithType: MultiBinding.ValidationRules
  fullName: System.Windows.Data.MultiBinding.ValidationRules
- uid: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ValidationRule>
  nameWithType: Collection<ValidationRule>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Controls.ValidationRule>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.MultiBinding.#ctor*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: MultiBinding
  nameWithType: MultiBinding.MultiBinding
- uid: System.Windows.Data.MultiBinding.Bindings*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: Bindings
  nameWithType: MultiBinding.Bindings
- uid: System.Windows.Data.MultiBinding.Converter*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: Converter
  nameWithType: MultiBinding.Converter
- uid: System.Windows.Data.MultiBinding.ConverterCulture*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ConverterCulture
  nameWithType: MultiBinding.ConverterCulture
- uid: System.Windows.Data.MultiBinding.ConverterParameter*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ConverterParameter
  nameWithType: MultiBinding.ConverterParameter
- uid: System.Windows.Data.MultiBinding.Mode*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: Mode
  nameWithType: MultiBinding.Mode
- uid: System.Windows.Data.MultiBinding.NotifyOnSourceUpdated*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: MultiBinding.NotifyOnSourceUpdated
- uid: System.Windows.Data.MultiBinding.NotifyOnTargetUpdated*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: MultiBinding.NotifyOnTargetUpdated
- uid: System.Windows.Data.MultiBinding.NotifyOnValidationError*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: MultiBinding.NotifyOnValidationError
- uid: System.Windows.Data.MultiBinding.ShouldSerializeBindings*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ShouldSerializeBindings
  nameWithType: MultiBinding.ShouldSerializeBindings
- uid: System.Windows.Data.MultiBinding.ShouldSerializeValidationRules*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ShouldSerializeValidationRules
  nameWithType: MultiBinding.ShouldSerializeValidationRules
- uid: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddChild*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild
  nameWithType: MultiBinding.System.Windows.Markup.IAddChild.AddChild
- uid: System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddText*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText
  nameWithType: MultiBinding.System.Windows.Markup.IAddChild.AddText
- uid: System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: MultiBinding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.MultiBinding.UpdateSourceTrigger*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: MultiBinding.UpdateSourceTrigger
- uid: System.Windows.Data.MultiBinding.ValidatesOnDataErrors*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: MultiBinding.ValidatesOnDataErrors
- uid: System.Windows.Data.MultiBinding.ValidatesOnExceptions*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: MultiBinding.ValidatesOnExceptions
- uid: System.Windows.Data.MultiBinding.ValidatesOnNotifyDataErrors*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: MultiBinding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.MultiBinding.ValidationRules*
  parent: System.Windows.Data.MultiBinding
  isExternal: false
  name: ValidationRules
  nameWithType: MultiBinding.ValidationRules
