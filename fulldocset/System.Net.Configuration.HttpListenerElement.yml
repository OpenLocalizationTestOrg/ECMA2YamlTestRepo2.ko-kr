### YamlMime:ManagedReference
items:
- uid: System.Net.Configuration.HttpListenerElement
  id: HttpListenerElement
  children:
  - System.Net.Configuration.HttpListenerElement.#ctor
  - System.Net.Configuration.HttpListenerElement.Properties
  - System.Net.Configuration.HttpListenerElement.Timeouts
  - System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  langs:
  - csharp
  name: HttpListenerElement
  nameWithType: HttpListenerElement
  fullName: System.Net.Configuration.HttpListenerElement
  type: Class
  summary: "구성 파일에서 HttpListener 요소를 나타냅니다. 이 클래스는 상속 될 수 없습니다."
  remarks: "This class corresponds to the \\<httpListener> Element (Network Settings) configuration element. This class provides programmatic access to information that can be stored in configuration files.  \n  \n The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.  \n  \n When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName> property.  \n  \n The `http.sys` service exposes two request URI strings:  \n  \n-   Raw URI  \n  \n-   Converted URI  \n  \n The raw URI is the <xref:System.Uri?displayProperty=fullName> provided in the request line of a HTTP request:  \n  \n `GET /path/`  \n  \n `Host: www.contoso.com`  \n  \n The raw URI provided by `http.sys` for the request mentioned above, is \"/path/\". This represents the string following the HTTP verb as it was sent over the network.  \n  \n The `http.sys` service creates a converted URI from the information provided in the request by using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to. This is done by comparing the information from the request with a set of registered URI prefixes. The HTTP Server SDK documentation refers to this converted URI as the [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) structure.  \n  \n In order to be able to compare the request with registered URI prefixes, some normalization to the request needs to be done. For the sample above the converted URI would be as follows:  \n  \n `http://www.contoso.com/path/`  \n  \n The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=fullName> property value and the string in the request line to create a converted URI. In addition, `http.sys` and the <xref:System.Uri?displayProperty=fullName> class also do the following:  \n  \n-   Un-escapes all percent encoded values.  \n  \n-   Converts percent-encoded non-ASCII characters into a UTF-16 character representation. Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).  \n  \n-   Executes other normalization steps, like path compression.  \n  \n Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.  \n  \n Therefore `http.sys` provides two registry keys for modifying the process:  \n  \n|Registry Key|Default Value|Description|  \n|------------------|-------------------|-----------------|  \n|EnableNonUTF8|1|If zero, `http.sys` accepts only UTF-8-encoded URLs.<br /><br /> If non-zero, `http.sys` also accepts ANSI-encoded or DBCS-encoded URLs in requests.|  \n|FavorUTF8|1|If non-zero, `http.sys` always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.<br /><br /> If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.|  \n  \n When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property.  \n  \n There is a need for supporting characters besides characters and numbers in URIs. An example is the following URI, which is used to retrieve customer information for customer number \"1/3812\":  \n  \n `http://www.contoso.com/Customer('1%2F3812')/`  \n  \n Note the percent-encoded slash in the Uri (%2F). This is necessary, since in this case the slash character represents data and not a path delimiter.  \n  \n Passing the string to Uri constructor will lead to the following URI:  \n  \n `http://www.contoso.com/Customer('1/3812')/`  \n  \n Splitting the path into its segments would result in the following elements:  \n  \n `Customer('1`  \n  \n `3812')`  \n  \n This is not the intent of the sender of the request.  \n  \n If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property."
  syntax:
    content: 'public sealed class HttpListenerElement : System.Configuration.ConfigurationElement'
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationElement
  implements: []
  inheritedMembers:
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.#ctor
  id: '#ctor'
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: HttpListenerElement()
  nameWithType: HttpListenerElement.HttpListenerElement()
  fullName: System.Net.Configuration.HttpListenerElement.HttpListenerElement()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Net.Configuration.HttpListenerElement&quot;> </xref> 클래스입니다."
  syntax:
    content: public HttpListenerElement ();
    parameters: []
  overload: System.Net.Configuration.HttpListenerElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.Properties
  id: Properties
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: Properties
  nameWithType: HttpListenerElement.Properties
  fullName: System.Net.Configuration.HttpListenerElement.Properties
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  syntax:
    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "추가할 수 있습니다."
  overload: System.Net.Configuration.HttpListenerElement.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.Timeouts
  id: Timeouts
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: Timeouts
  nameWithType: HttpListenerElement.Timeouts
  fullName: System.Net.Configuration.HttpListenerElement.Timeouts
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Timeout 요소에 사용 되는 기본 가져옵니다는 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 개체입니다."
  syntax:
    content: public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }
    return:
      type: System.Net.Configuration.HttpListenerTimeoutsElement
      description: "Returns <xref href=&quot;System.Net.Configuration.HttpListenerTimeoutsElement&quot;></xref>.       에 대 한 사용 되는 시간 제한 요소는 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 개체입니다."
  overload: System.Net.Configuration.HttpListenerElement.Timeouts*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  id: UnescapeRequestUrl
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: UnescapeRequestUrl
  nameWithType: HttpListenerElement.UnescapeRequestUrl
  fullName: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "여부를 나타내는 값을 가져옵니다 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 변환된 URI 대신 원시 언 이스케이프 된 URI를 사용 합니다."
  remarks: "UnescapeRequestUrl 속성은 표시 하는 경우 <xref:System.Net.HttpListener>원시 언 이스케이프 된 URI를 사용 하 여 모든 퍼센트 인코딩 값이 변환 되 고 다른 정규화 단계가 수행 되는 변환 된 URI 대신.</xref:System.Net.HttpListener>       경우는 <xref:System.Net.HttpListener>인스턴스 통해 요청을 받을 `http.sys` 에서 제공 하 고 URI 문자열의 인스턴스를 만들고 서비스를 `http.sys`,으로 노출 된 <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName>속성.</xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName> </xref:System.Net.HttpListener>       `http.sys` 서비스는 두 요청 URI 문자열을 노출:-원시 URI-변환 URI의 원시 URI는는 <xref:System.Uri?displayProperty=fullName>HTTP 요청의 요청 줄에 제공 된: `GET /path/` `Host: www.contoso.com` 에서 제공 된 URI의 원시 `http.sys` 위에서 언급 한 요청은 &quot;/&quot; (경로 /.       </xref:System.Uri?displayProperty=fullName> 이 네트워크를 통해 전송 된 HTTP 동사를 다음 문자열을 나타냅니다.       `http.sys` 을 전달 해야 하는 원본 서버에서 요청을 확인 하려면 호스트 헤더 및 서비스는 HTTP 요청에서에서 제공 하는 URI를 사용 하 여 요청에 제공 된 정보에서 변환된 된 URI를 만듭니다. 이 등록 된 URI 접두사를 사용 하 여 요청에서 정보를 비교 하 여 수행 됩니다. HTTP 서버 SDK 설명서 참조로 변환 된이 URI는 [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) 구조입니다.       등록 된 URI 접두사를 사용 하 여 요청을 비교할 수 있도록 요청에 일부 정규화를 수행 해야 합니다. 위의 샘플 변환 된 URI는 다음과 같은 것에 대 한: `http://www.contoso.com/path/` 는 `http.sys` 결합 하 여 서비스는 <xref:System.Uri.Host%2A?displayProperty=fullName>속성 값과 변환된 된 URI를 만드는 요청 줄에 있는 문자열.</xref:System.Uri.Host%2A?displayProperty=fullName> 또한 `http.sys` 및 <xref:System.Uri?displayProperty=fullName>클래스는 다음을 수행할 수도:-인코딩된 모든 백분율 값 이스케이프 해제 합니다.</xref:System.Uri?displayProperty=fullName>      -퍼센트 인코딩 비 ASCII 문자를 utf-16 문자 표현으로 변환합니다. Note u t F-8과 ANSI/DBCS 문자가 유니코드 문자 (유니코드 %uXXXX 형식을 사용 하 여 인코딩)도 지원 됩니다.      -경로 압축 같은 다른 정규화 단계를 실행합니다.       퍼센트 인코딩 값에 사용 되는 인코딩에 대 한 정보가 요청 없으므로 퍼센트 인코딩 값을 구문 분석 하 여 올바른 인코딩을 확인할 못할 수 있습니다.       따라서 `http.sys` 제공 하는 프로세스를 수정 하기 위한 두 개의 레지스트리 키: | 레지스트리 키 | 기본 값 | 설명 |   |------------------|-------------------|-----------------|   | EnableNonUTF8 |&1; |&0; 이면 `http.sys` u t F-8로 인코딩된 Url만 허용 합니다.<br /><br /> 0이 아닌 경우 `http.sys` 도 요청에서 ANSI로 인코딩된 또는 DBCS 인코딩된 Url을 허용 합니다. |   | FavorUTF8 |&1; |&0;이 아닌 경우 `http.sys` 디코딩할 URL u t F-8로 먼저 해당 변환이 실패 하 고 EnableNonUTF8&0;이 아닌 경우 하려고 항상 차례로 Http.sys을 ANSI 또는 DBCS 디코딩할 하려고 합니다.<br /><br /> 0 (및 EnableNonUTF8&0;이 아닌) `http.sys` 경우 해당 ANSI 또는 DBCS; 디코딩하 려 성공 하지 못하면, 시도 u t F-8로 변환 합니다. |       때 <xref:System.Net.HttpListener>한 요청을 받으면에서 변환 된 URI를 사용 하 여 `http.sys` 대 한 입력으로 <xref:System.Net.HttpListenerRequest.Url%2A>속성.</xref:System.Net.HttpListenerRequest.Url%2A> </xref:System.Net.HttpListener>       Uri에서 문자 및 숫자 이외의 문자를 지원할 필요가 있습니다. 예로 고객에 대 한 고객 정보를 검색 하는 데 사용 되는 다음 URI는 번호 &quot;1/3812&quot;: `http://www.contoso.com/Customer(&quot;1%2F3812&quot;)/` 퍼센트 인코딩 슬래시 (%2F) Uri에서 확인 합니다. 이 작업은 슬래시 문자 데이터 및 하지는 경로 구분 기호를 나타내므로 경우에 필요 합니다.       다음 URI를 일으킵니다 Uri 생성자에 문자열을 전달: `http://www.contoso.com/Customer(&quot;1/3812&quot;)/` 경로를 세그먼트로 분할 하면 다음과 같은 요소가 만들어집니다: `Customer(&quot;1` `3812&quot;)` 요청을 보낸 사람 의도이 아닙니다.              UnescapeRequestUrl 속성이 false로 설정 되어 다음 경우는 <xref:System.Net.HttpListener>한 요청을 받으면 원시 URI에서 변환 된 URI 대신 사용 하 여 `http.sys` 대 한 입력으로 <xref:System.Net.HttpListenerRequest.Url%2A>속성.</xref:System.Net.HttpListenerRequest.Url%2A> </xref:System.Net.HttpListener>"
  syntax:
    content: public bool UnescapeRequestUrl { get; }
    return:
      type: System.Boolean
      description: "여부를 나타내는 부울 값을 <xref href=&quot;System.Net.HttpListener&quot;> </xref> 변환된 URI 아닌 원시 언 이스케이프 된 URI를 사용 합니다."
  overload: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationElement
  isExternal: false
  name: System.Configuration.ConfigurationElement
- uid: System.Net.Configuration.HttpListenerElement.#ctor
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: HttpListenerElement()
  nameWithType: HttpListenerElement.HttpListenerElement()
  fullName: System.Net.Configuration.HttpListenerElement.HttpListenerElement()
- uid: System.Net.Configuration.HttpListenerElement.Properties
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Properties
  nameWithType: HttpListenerElement.Properties
  fullName: System.Net.Configuration.HttpListenerElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Net.Configuration.HttpListenerElement.Timeouts
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Timeouts
  nameWithType: HttpListenerElement.Timeouts
  fullName: System.Net.Configuration.HttpListenerElement.Timeouts
- uid: System.Net.Configuration.HttpListenerTimeoutsElement
  parent: System.Net.Configuration
  isExternal: false
  name: HttpListenerTimeoutsElement
  nameWithType: HttpListenerTimeoutsElement
  fullName: System.Net.Configuration.HttpListenerTimeoutsElement
- uid: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: UnescapeRequestUrl
  nameWithType: HttpListenerElement.UnescapeRequestUrl
  fullName: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Configuration.HttpListenerElement.#ctor*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: HttpListenerElement
  nameWithType: HttpListenerElement.HttpListenerElement
- uid: System.Net.Configuration.HttpListenerElement.Properties*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Properties
  nameWithType: HttpListenerElement.Properties
- uid: System.Net.Configuration.HttpListenerElement.Timeouts*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Timeouts
  nameWithType: HttpListenerElement.Timeouts
- uid: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: UnescapeRequestUrl
  nameWithType: HttpListenerElement.UnescapeRequestUrl
