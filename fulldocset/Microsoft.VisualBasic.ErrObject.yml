### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ErrObject
  id: ErrObject
  children:
  - Microsoft.VisualBasic.ErrObject.Clear
  - Microsoft.VisualBasic.ErrObject.Description
  - Microsoft.VisualBasic.ErrObject.Erl
  - Microsoft.VisualBasic.ErrObject.GetException
  - Microsoft.VisualBasic.ErrObject.HelpContext
  - Microsoft.VisualBasic.ErrObject.HelpFile
  - Microsoft.VisualBasic.ErrObject.LastDllError
  - Microsoft.VisualBasic.ErrObject.Number
  - Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  - Microsoft.VisualBasic.ErrObject.Source
  langs:
  - csharp
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
  type: Class
  summary: "<xref uid=&quot;langword_csharp_ErrObject&quot; name=&quot;ErrObject&quot; href=&quot;&quot;> </xref> 모듈 속성 및 식별 하 고 사용 하 여 런타임 오류를 처리 하는 데 사용 되는 프로시저에 포함 되어는 <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref> 개체입니다."
  remarks: "`ErrObject` 모듈에서는 `Err` 개체입니다. 자세한 내용은 <xref:Microsoft.VisualBasic.Information.Err%2A>.</xref:Microsoft.VisualBasic.Information.Err%2A> 을 참조 하십시오."
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice what happens when you use the `Clear` method first: When you then generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n```  \nDim Msg As String  \n' If an error occurs, construct an error message.  \nOn Error Resume Next   ' Defer error handling.  \nErr.Clear  \nErr.Raise(6)   ' Generate an \"Overflow\" error.  \n' Check for error, then show message.  \nIf Err.Number <> 0 Then  \n    Msg = \"Error # \" & Str(Err.Number) & \" was generated by \" _  \n        & Err.Source & ControlChars.CrLf & Err.Description  \n    MsgBox(Msg, MsgBoxStyle.Information, \"Error\")  \nEnd If  \n```"
  syntax:
    content: public sealed class ErrObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Clear
  id: Clear
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "모든 속성 설정을 지웁니다는 <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref> 개체입니다."
  remarks: "사용 하 여 `Clear` 명시적으로 선택 취소 된 `Err` 오류가 처리 된 후, 지연 된 오류 처리를 사용 하는 경우 등 개체 `On Error Resume Next`합니다. `Clear` 메서드는 다음 문을 실행할 때마다:-모든 종류의 `Resume` 문- `Exit Sub`, `Exit Function`, 또는 `Exit Property` -모든 `On Error` 문-모든 `Try...Catch...Finally` 문 > [!NOTE] >는 `On Error Resume Next` 구문에 더 적합할 수 있습니다 `On Error GoTo` 다른 개체에 액세스 하는 동안 발생 한 오류를 처리 하는 경우. 검사 `Err` 개체와 함께 각 상호 작용 개체는 코드에서 액세스 된 후: 확인할 수 있는 개체의 오류 코드에 배치 `Err.Number`, 개체가 원래 오류를 생성 뿐만 아니라 (에 지정 된 개체가 `Err.Source`)."
  example:
  - "This example uses the `Err` object's `Clear` method to reset the numeric properties of the `Err` object to zero and its string properties to zero-length strings. Without the call to `Clear`, the second call to `MsgBox` would display the same error message.  \n  \n [!code-vb[VbVbalrErrorHandling#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._141_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.ErrObject.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Description
  id: Description
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 는 오류와 관련 된 설명 문자열을 포함 하는 식입니다. 읽기/쓰기입니다."
  remarks: "`Description` 속성 설정은 오류에 대 한 간단한 설명을 구성 됩니다. 한 오류를 처리할 수 없거나 처리 되지 않을 사용자에 게 알리도록 하려면이 속성을 사용 합니다. 사용자 정의 오류를 생성 하는 경우 해당 오류에 대 한 간단한 설명을 할당는 `Description` 속성입니다. 경우는 `Description` 속성, 입력 값과는 <xref:Microsoft.VisualBasic.ErrObject.Number%2A>반환 하는 문자열이 한 다음 속성은 Visual Basic 런타임 오류에 해당는 <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>함수에 설정 되어는 `Description` 오류가 발생 하는 경우이 속성.</xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> </xref:Microsoft.VisualBasic.ErrObject.Number%2A>"
  example:
  - "This example assigns a user-defined message to the `Description` property of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._68_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 는 오류와 관련 된 설명 문자열을 포함 하는 식입니다. 읽기/쓰기입니다."
  overload: Microsoft.VisualBasic.ErrObject.Description*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Erl
  id: Erl
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "마지막 실행 된 문의 줄 번호를 나타내는 정수를 반환 합니다. 읽기 전용입니다."
  remarks: "줄 번호 없음를 못한 경우 0을 반환 합니다."
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n```  \n10:     On Error Resume Next  \n20:     Err.Raise(60000)  \n' Returns 20.  \n30:     MsgBox(Erl())  \n```"
  syntax:
    content: public int Erl { get; }
    return:
      type: System.Int32
      description: "마지막 실행 된 문의 줄 번호를 나타내는 정수를 반환 합니다. 읽기 전용입니다."
  overload: Microsoft.VisualBasic.ErrObject.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.GetException
  id: GetException
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "발생 한 오류를 나타내는 예외를 반환 합니다."
  remarks: "`GetException` 함수는 에서만 사용할 수는 `Err` 개체 클래스입니다. 와 함께 작동는 `Exception` 의 속성은 `Err` 발생 한 오류를 표시 하려면 개체입니다."
  example:
  - "The following code displays the message assigned to the exception in the `Err` object:  \n  \n [!code-vb[VbVbalrCatRef#66](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._226_1.vb)]"
  syntax:
    content: public Exception GetException ();
    parameters: []
    return:
      type: System.Exception
      description: "발생 한 오류를 나타내는 예외를 반환 합니다."
  overload: Microsoft.VisualBasic.ErrObject.GetException*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  id: HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 도움말 파일의 항목에 대 한 컨텍스트 ID를 포함 합니다. 읽기/쓰기입니다."
  remarks: "`HelpContext` 속성은 응용 프로그램에 대 한 상황에 맞는 도움말을 표시 하는 데 사용 합니다. 도움말 파일을 지정 하는 경우 `HelpFile`, `HelpContext` 속성은 자동으로 식별 된 도움말 파일을 표시 하는 데 사용 합니다. 모두는 `HelpFile` 및 `HelpContext` 속성은 비어의 값은 <xref:Microsoft.VisualBasic.ErrObject.Number%2A>속성을 검사 합니다.</xref:Microsoft.VisualBasic.ErrObject.Number%2A> 하는 경우의 값은 `Number` 속성 값에 해당 하는 Visual Basic 런타임 오류 아니면 오류에 대 한 Visual Basic 도움말 컨텍스트 ID를 사용 합니다. 하는 경우의 값은 `Number` 속성 Visual Basic 오류에 해당 하지 않는, Visual Basic 도움말 파일에 대 한 내용을 화면이 표시 됩니다.      > [!NOTE] > 일반 오류를 처리 하도록 응용 프로그램에서 루틴을 작성 해야 합니다. 개체를 프로그래밍할 때 여 오류 처리의 품질을 향상 하거나 오류를 복구할 수 없는 경우 프로그램 사용자에 게 의미 있는 메시지를 표시 하도록 개체의 도움말 파일을 사용할 수 있습니다."
  example:
  - "This example uses the `HelpContext` property of the `Err` object to show the Visual Basic Help topic for the `Overflow` error.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._34_1.vb)]"
  syntax:
    content: public int HelpContext { get; set; }
    return:
      type: System.Int32
      description: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 도움말 파일의 항목에 대 한 컨텍스트 ID를 포함 합니다. 읽기/쓰기입니다."
  overload: Microsoft.VisualBasic.ErrObject.HelpContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  id: HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 는 도움말 파일의 정규화 된 경로 포함 하는 식입니다. 읽기/쓰기입니다."
  remarks: "도움말 파일을 통해 지정 된 경우는 `HelpFile` 속성을 자동으로 호출 하는 도움말 키 (또는 F1 키)를 누를 때 오류 메시지 대화 상자. 경우는 `HelpContext` 속성 포함 올바른 컨텍스트 ID를 지정된 된 파일을 해당 항목에 대 한 자동으로 표시 됩니다. 하지 않으면 `HelpFile` 지정, Visual Basic 도움말 파일이 표시 됩니다.      > [!NOTE] > 일반 오류를 처리 하도록 응용 프로그램에서 루틴을 작성 해야 합니다. 개체를 프로그래밍할 때 여 오류 처리의 품질을 향상 하거나 오류를 복구할 수 없는 경우 프로그램 사용자에 게 의미 있는 메시지를 표시 하도록 개체의 도움말 파일을 사용할 수 있습니다."
  example:
  - "This example uses the `HelpFile` property of the `Err` object to start the Help system. By default, the `HelpFile` property contains the name of the Visual Basic Help file.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._70_1.vb)]"
  syntax:
    content: public string HelpFile { get; set; }
    return:
      type: System.String
      description: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 는 도움말 파일의 정규화 된 경로 포함 하는 식입니다. 읽기/쓰기입니다."
  overload: Microsoft.VisualBasic.ErrObject.HelpFile*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  id: LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "동적 연결 라이브러리 (DLL)에 대 한 호출에서 생성 되는 시스템 오류 코드를 반환 합니다. 읽기 전용입니다."
  remarks: "LastDllError 속성 Visual Basic 코드에서 DLL 호출에만 적용 됩니다. 이러한 호출을 수행 하는 경우 호출된 된 함수에는 일반적으로 성공 또는 실패를 나타내는 코드를 반환 하 고 LastDllError 속성이 채워집니다. 성공 또는 실패를 나타내는 반환 값을 결정 하는 DLL의 함수에 대 한 설명서를 확인 합니다. 오류 코드가 반환 되는 때마다 Visual Basic 응용 프로그램 LastDllError 속성 즉시 확인 해야 합니다. LastDllError 속성이 설정 된 경우 예외가 발생 합니다.      > [!NOTE] > The LastDllError 속성을 보호 <xref:System.Security.Permissions.SecurityAction>에서 신뢰할 수 없는 코드에서 액세스 하는 사용 되지 않도록 합니다.</xref:System.Security.Permissions.SecurityAction> 그러나 <xref:System.Security.Permissions.SecurityAction>을 직접 실행 호출자만 필요 <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>권한.</xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> </xref:System.Security.Permissions.SecurityAction> 코드와 부분적으로 신뢰할 수 있는 코드에서 호출할 수 있는 경우 유효성 검사 없이 LastDllError의 값을 노출 되어 보안상 위험 합니다.   >> 사용 하는 방법에 대 한 중요 한 제한에 대 한는 <xref:System.Security.Permissions.SecurityAction>멤버 참조 [비교 요구</xref:System.Security.Permissions.SecurityAction> LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)합니다. 사용 권한에 대 한 자세한 내용은 참조 <xref:System.Security.Permissions.SecurityPermission>및 [코드 액세스 권한](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>       Note 스마트 장치에 대 한이 속성은 항상&0;을 반환 합니다."
  example:
  - "The following example shows how you can use the `LastDllError` property after calling a function in the Windows API. The `PrintWindowCoordinates` procedure takes a handle to a window and calls the `GetWindowRect` function. `GetWindowRect` fills the RECT data structure with the lengths of the sides of the rectangle that make up the window. If you pass an invalid handle, an error occurs, and the error number is available through the `LastDllError` property.  \n  \n [!code-vb[VbVbalrErrorHandling#8](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_1.vb)]  \n[!code-vb[VbVbalrErrorHandling#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_2.vb)]  \n[!code-vb[VbVbalrErrorHandling#10](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_3.vb)]  \n  \n [!code-vb[VbVbalrErrorHandling#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_4.vb)]"
  syntax:
    content: public int LastDllError { get; }
    return:
      type: System.Int32
      description: "동적 연결 라이브러리 (DLL)에 대 한 호출에서 생성 되는 시스템 오류 코드를 반환 합니다. 읽기 전용입니다."
  overload: Microsoft.VisualBasic.ErrObject.LastDllError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Number
  id: Number
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 하거나 오류를 지정 하는 숫자 값을 설정 합니다. 읽기/쓰기입니다."
  remarks: "모든는 `Raise` 제외한 인수 `Number` 는 선택 사항입니다. 속성 설정 및 선택적 인수를 생략 하면는 `Err` 지워지지 않은 값을 포함 하는 개체, 해당 값이 해당 오류에 대 한 값으로 사용 합니다.       때문에 `Err` 사용 하 여 오류를 생성 하는 경우 보다 더 많은 정보를 제공 하는 개체는 `Error` 문, `Raise` 클래스 모듈을 쓸 때 오류를 생성 하는 데 유용 합니다. 예를 들어,는 `Raise` 메서드, 오류를 생성 하는 원본에 지정할 수 있습니다는 `Source` 속성을 오류에 대 한 온라인 도움말을 참조할 수 있습니다 및 등입니다.       개체에서 사용자 정의 오류를 반환할 때 설정 `Err.Number` 를 오류 코드로 선택한 수를 추가 하 여는 `VbObjectError` 상수입니다. 오류 코드로 1051 개수를 반환 하려면 다음 코드를 사용 예를 들어: [!code-vb [VbVbalrErrorHandling #13](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_1.vb)]"
  example:
  - "This example illustrates a typical use of the `Number` property in an error-handling routine.  \n  \n [!code-vb[VbVbalrErrorHandling#12](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_2.vb)]  \n  \n This example uses the `Err` object's `Raise` method to generate an original error within a function written in Visual Basic. The calling function can catch the error and report it to the user. Notice that procedure `CallingProcedure` contrasts the type of information that you can derive from an `Err` object with the information that you can derive from an `Exception` object.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_3.vb)]"
  syntax:
    content: public int Number { get; set; }
    return:
      type: System.Int32
      description: "반환 하거나 오류를 지정 하는 숫자 값을 설정 합니다. 읽기/쓰기입니다."
  overload: Microsoft.VisualBasic.ErrObject.Number*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>65535 보다 큽니다."
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  id: Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "런타임 오류가 발생; 대신 사용할 수는 <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref> 문."
  remarks: "모든는 `Raise` 제외한 인수 `Number` 는 선택 사항입니다. 속성 설정 및 선택적 인수를 생략 하면는 `Err` 지워지지 않은 값을 포함 하는 개체, 해당 값이 해당 오류에 대 한 값으로 사용 합니다.       때문에 `Err` 사용 하 여 오류를 생성 하는 경우 보다 더 많은 정보를 제공 하는 개체는 `Error` 문, `Raise` 클래스 모듈을 쓸 때 오류를 생성 하는 데 유용 합니다. 예를 들어,는 `Raise` 메서드, 오류를 생성 하는 원본에 지정할 수 있습니다는 `Source` 속성을 오류에 대 한 온라인 도움말을 참조할 수 있습니다 및 등입니다."
  example:
  - "This example uses the `Err` object's `Raise` method to generate an error within a function written in Visual Basic. The calling function can catch the error and report it to the user with a message box.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/b1f4ec6f-36d3-4787-9987-_1.vb)]"
  syntax:
    content: public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);
    parameters:
    - id: Number
      type: System.Int32
      description: "필수 사항입니다. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>오류의 특성을 식별 하는 정수입니다. Visual Basic 오류 0-65535 범위에 있습니다 범위 0-512은 시스템 오류;에 예약 되어 있습니다. 513-65535 범위는 사용자 정의 오류에 사용할 수 있습니다. 설정할 때의 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> 클래스 모듈에 해당 하는 오류 코드에 대 한 속성을 추가한 사용자의 오류 코드 번호를는 <xref uid=&quot;langword_csharp_vbObjectError&quot; name=&quot;vbObjectError&quot; href=&quot;&quot;> </xref> 상수입니다. 예를 들어 513 오류 번호를 생성 하려면 할당 `vbObjectError + 513` 에 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> 속성입니다."
    - id: Source
      type: System.Object
      description: "선택 사항입니다. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>개체 또는 오류를 발생 시킨 응용 프로그램 이름을 지정 하는 식입니다. 개체에 대 한이 속성을 설정할 때 사용 폼 `project`.`class`합니다. 경우 `Source` 를 지정 하지 않으면 현재 Visual Basic 프로젝트의 프로세스 ID를 사용 합니다."
    - id: Description
      type: System.Object
      description: "선택 사항입니다. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>오류를 설명 하는 식입니다. 지정 하지 않으면 값은 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> 속성을 검사 합니다. Visual Basic 런타임 오류 매핑될 수 있는 경우 코드를 통해 반환 되는 문자열의 <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref> 함수도 사용 되는 <xref uid=&quot;langword_csharp_Description&quot; name=&quot;Description&quot; href=&quot;&quot;> </xref> 속성입니다. 에 해당 하는 Visual Basic 오류가 없는 경우는 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> 속성을 &quot;응용 프로그램 정의 또는 개체 정의 오류&quot; 메시지가 사용 됩니다."
    - id: HelpFile
      type: System.Object
      description: "선택 사항입니다. 이 오류에 대 한 도움말을 찾을 수 있는 도움말 파일에 대 한 정규화 된 경로입니다. 지정 하지 않으면 Visual Basic 정규화 드라이브, 경로 및 Visual Basic 도움말 파일의 파일 이름을 사용 합니다."
    - id: HelpContext
      type: System.Object
      description: "선택 사항입니다. 내에서 항목을 식별 하는 컨텍스트 ID `HelpFile` 오류에 대 한 도움말을 제공 하는 합니다. 에 해당 하는 오류에 대 한 Visual Basic 도움말 파일 컨텍스트 ID를 지정 하지 않으면는 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> 속성이 있는 경우 사용 됩니다."
  overload: Microsoft.VisualBasic.ErrObject.Raise*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Source
  id: Source
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 개체 또는 원래 오류를 생성 하는 응용 프로그램의 이름을 지정 하는 식입니다. 읽기/쓰기입니다."
  remarks: "`Source` 속성 지정는 `String` 개체를 나타내는 식을 오류를 생성 하는 되므로 일반적으로 식은 개체의 클래스 이름 또는 프로세스 id입니다. 사용 된 `Source` 코드 액세스 된 개체에서 생성 된 오류를 처리할 수 없는 경우 정보를 제공 하는 속성입니다. 예를 들어, Microsoft Excel을 액세스 하 고 생성 하는 경우는 `Division by zero` 오류를 Microsoft Excel 설정 `Err.Number` 해당 오류 및 집합의 오류 코드를 `Source` &quot;Excel.Application&quot;에 있습니다.       응용 프로그램 코드에서 오류가 생성 되는 경우 `Source` 프로그래밍 방식으로 응용 프로그램의 ID입니다. 클래스 내 `Source` 형식 이름이 포함 되어야 *프로젝트*.* 클래스*합니다. 사용자 코드에서 예기치 않은 오류가 발생 하는 경우는 `Source` 속성이 자동으로 채워집니다. 모듈에 오류에 대 한 `Source` 프로젝트 이름을 포함 합니다."
  example:
  - "This example demonstrates the use of the `Source` property in a typical error-handling routine. When an error is raised from `Class1`, the string `\"Class1\"` is assigned to the `Source` property of the `Err` object. This string is then displayed in an informative message indicating the source and number of the error.  \n  \n [!code-vb[VbVbalrErrorHandling#15](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._39_1.vb)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "반환 하거나 설정는 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> 개체 또는 원래 오류를 생성 하는 응용 프로그램의 이름을 지정 하는 식입니다. 읽기/쓰기입니다."
  overload: Microsoft.VisualBasic.ErrObject.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.ErrObject.Clear
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
- uid: Microsoft.VisualBasic.ErrObject.Description
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ErrObject.Erl
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.ErrObject.GetException
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
- uid: Microsoft.VisualBasic.ErrObject.Source
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
- uid: Microsoft.VisualBasic.ErrObject.Clear*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear
  nameWithType: ErrObject.Clear
- uid: Microsoft.VisualBasic.ErrObject.Description*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
- uid: Microsoft.VisualBasic.ErrObject.Erl*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
- uid: Microsoft.VisualBasic.ErrObject.GetException*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException
  nameWithType: ErrObject.GetException
- uid: Microsoft.VisualBasic.ErrObject.HelpContext*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise
  nameWithType: ErrObject.Raise
- uid: Microsoft.VisualBasic.ErrObject.Source*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
