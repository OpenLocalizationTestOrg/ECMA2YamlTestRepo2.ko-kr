### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.CommonSecurityDescriptor
  id: CommonSecurityDescriptor
  children:
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  - System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  - System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  - System.Security.AccessControl.CommonSecurityDescriptor.Group
  - System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  - System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  - System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  - System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  - System.Security.AccessControl.CommonSecurityDescriptor.Owner
  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  langs:
  - csharp
  name: CommonSecurityDescriptor
  nameWithType: CommonSecurityDescriptor
  fullName: System.Security.AccessControl.CommonSecurityDescriptor
  type: Class
  summary: "보안 설명자를 나타냅니다. 보안 설명자에 소유자, 주 그룹, 임의 액세스 제어 목록 (DACL) 및는 액세스 제어 목록 SACL (시스템)에 포함 됩니다."
  syntax:
    content: 'public sealed class CommonSecurityDescriptor : System.Security.AccessControl.GenericSecurityDescriptor'
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericSecurityDescriptor
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - System.Security.AccessControl.GenericSecurityDescriptor.Revision
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 지정 된 위치에서 클래스 <xref href=&quot;System.Security.AccessControl.RawSecurityDescriptor&quot;> </xref> 개체입니다."
  remarks: "하는 경우 기본 보안 설명자를 새 <xref:System.Security.AccessControl.RawSecurityDescriptor>개체가 만들어질 포함 `null` 의 임의 액세스 제어 목록 (DACL) 모든 단일 액세스 제어 항목 (ACE)에 대 한 모든 권한 (AEFA) DACL에 추가 됩니다.</xref:System.Security.AccessControl.RawSecurityDescriptor> 응용 프로그램 AEFA ACE는 추가 된 보안 설명자의 DACL를 수정할 경우 해당 DACL 유지 되 면 AEFA ACE DACL 함께 유지 됩니다.       이 의도 하지 않게 보안 주체에 대 한 액세스를 허용 하는 응용 프로그램에서 발생할 수 있습니다. 이 인해 응용 프로그램의 AEFA ACE의 존재 여부 확인 하 고 보안 설명자를 수정 하기 전에 제거 해야 합니다."
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.RawSecurityDescriptor rawSecurityDescriptor);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자 컨테이너 개체에 연결 된 경우 사용 됩니다."
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자는 디렉터리 개체와 연결 된 경우 사용 됩니다."
    - id: rawSecurityDescriptor
      type: System.Security.AccessControl.RawSecurityDescriptor
      description: "<xref href=&quot;System.Security.AccessControl.RawSecurityDescriptor&quot;> </xref> 개체를 만들려는 새 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  id: '#ctor(System.Boolean,System.Boolean,System.String)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,String)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 지정된 된 보안 설명자 정의 언어 (SDDL) 문자열에서 클래스입니다."
  remarks: "하는 경우 기본 보안 설명자를 새 <xref:System.Security.AccessControl.RawSecurityDescriptor>개체가 만들어질 포함 `null` 의 임의 액세스 제어 목록 (DACL) 모든 단일 액세스 제어 항목 (ACE)에 대 한 모든 권한 (AEFA) DACL에 추가 됩니다.</xref:System.Security.AccessControl.RawSecurityDescriptor> 응용 프로그램 AEFA ACE는 추가 된 보안 설명자의 DACL를 수정할 경우 해당 DACL 유지 되 면 AEFA ACE DACL 함께 유지 됩니다.       이 의도 하지 않게 보안 주체에 대 한 액세스를 허용 하는 응용 프로그램에서 발생할 수 있습니다. 이 인해 응용 프로그램의 AEFA ACE의 존재 여부 확인 하 고 보안 설명자를 수정 하기 전에 제거 해야 합니다."
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, string sddlForm);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자 컨테이너 개체에 연결 된 경우 사용 됩니다."
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자는 디렉터리 개체와 연결 된 경우 사용 됩니다."
    - id: sddlForm
      type: System.String
      description: "만들 새 SDDL 문자열 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  id: '#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 바이트 값의 지정된 된 배열에서 클래스입니다."
  remarks: "하는 경우 기본 보안 설명자를 새 <xref:System.Security.AccessControl.RawSecurityDescriptor>개체가 만들어질 포함 `null` 의 임의 액세스 제어 목록 (DACL) 모든 단일 액세스 제어 항목 (ACE)에 대 한 모든 권한 (AEFA) DACL에 추가 됩니다.</xref:System.Security.AccessControl.RawSecurityDescriptor> 응용 프로그램 AEFA ACE는 추가 된 보안 설명자의 DACL를 수정할 경우 해당 DACL 유지 되 면 AEFA ACE DACL 함께 유지 됩니다.       이 의도 하지 않게 보안 주체에 대 한 액세스를 허용 하는 응용 프로그램에서 발생할 수 있습니다. 이 인해 응용 프로그램의 AEFA ACE의 존재 여부 확인 하 고 보안 설명자를 수정 하기 전에 제거 해야 합니다."
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, byte[] binaryForm, int offset);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자 컨테이너 개체에 연결 된 경우 사용 됩니다."
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자는 디렉터리 개체와 연결 된 경우 사용 됩니다."
    - id: binaryForm
      type: System.Byte[]
      description: "새를 만들 수 있는 바이트 값 배열 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
    - id: offset
      type: System.Int32
      description: "오프셋의 `binaryForm` 복사를 시작 하는 배열입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 클래스에서 지정 된 정보입니다."
  remarks: "하는 경우 기본 보안 설명자를 새 <xref:System.Security.AccessControl.RawSecurityDescriptor>개체가 만들어질 포함 `null` 의 임의 액세스 제어 목록 (DACL) 모든 단일 액세스 제어 항목 (ACE)에 대 한 모든 권한 (AEFA) DACL에 추가 됩니다.</xref:System.Security.AccessControl.RawSecurityDescriptor> 응용 프로그램 AEFA ACE는 추가 된 보안 설명자의 DACL를 수정할 경우 해당 DACL 유지 되 면 AEFA ACE DACL 함께 유지 됩니다.       이 의도 하지 않게 보안 주체에 대 한 액세스를 허용 하는 응용 프로그램에서 발생할 수 있습니다. 이 인해 응용 프로그램의 AEFA ACE의 존재 여부 확인 하 고 보안 설명자를 수정 하기 전에 제거 해야 합니다."
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.ControlFlags flags, System.Security.Principal.SecurityIdentifier owner, System.Security.Principal.SecurityIdentifier group, System.Security.AccessControl.SystemAcl systemAcl, System.Security.AccessControl.DiscretionaryAcl discretionaryAcl);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자 컨테이너 개체에 연결 된 경우 사용 됩니다."
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>새 보안 설명자는 디렉터리 개체와 연결 된 경우 사용 됩니다."
    - id: flags
      type: System.Security.AccessControl.ControlFlags
      description: "새 동작을 지정 하는 플래그 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
    - id: owner
      type: System.Security.Principal.SecurityIdentifier
      description: "새 소유자 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
    - id: group
      type: System.Security.Principal.SecurityIdentifier
      description: "새 주 그룹 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
    - id: systemAcl
      type: System.Security.AccessControl.SystemAcl
      description: "액세스 제어 목록 SACL (시스템)에서 새 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
    - id: discretionaryAcl
      type: System.Security.AccessControl.DiscretionaryAcl
      description: "새 임의 액세스 제어 목록 (DACL) <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  id: AddDiscretionaryAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: AddDiscretionaryAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "설정 된 <xref:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*>이 대 한 속성 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 인스턴스는 <xref href=&quot;System.Security.AccessControl.ControlFlags&quot;> </xref> 플래그.</xref:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*>"
  remarks: "<xref:System.Security.AccessControl.DiscretionaryAcl>를 사용 <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A>하 고 <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A>이 <xref:System.Security.AccessControl.CommonSecurityDescriptor>.</xref:System.Security.AccessControl.CommonSecurityDescriptor> 에 대 한 속성</xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> </xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> </xref:System.Security.AccessControl.DiscretionaryAcl> 에 대 한 생성자"
  syntax:
    content: public void AddDiscretionaryAcl (byte revision, int trusted);
    parameters:
    - id: revision
      type: System.Byte
      description: "새의 수정 수준을 <xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;> </xref> 개체입니다."
    - id: trusted
      type: System.Int32
      description: "액세스 제어 항목 (Ace)의 수가 <xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;> </xref> 개체에 포함 될 수 있습니다. 이 숫자는 힌트로 사용 될 것입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  id: AddSystemAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: AddSystemAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "설정 된 <xref:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*>이 대 한 속성 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 인스턴스는 <xref href=&quot;System.Security.AccessControl.ControlFlags&quot;> </xref> 플래그.</xref:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*>"
  remarks: "<xref:System.Security.AccessControl.SystemAcl>를 사용 <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A>하 고 <xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A>이 <xref:System.Security.AccessControl.CommonSecurityDescriptor>.</xref:System.Security.AccessControl.CommonSecurityDescriptor> 에 대 한 속성</xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A> </xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A> </xref:System.Security.AccessControl.SystemAcl> 에 대 한 생성자"
  syntax:
    content: public void AddSystemAcl (byte revision, int trusted);
    parameters:
    - id: revision
      type: System.Byte
      description: "새의 수정 수준을 <xref href=&quot;System.Security.AccessControl.SystemAcl&quot;> </xref> 개체입니다."
    - id: trusted
      type: System.Int32
      description: "추가할 수 있습니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  id: ControlFlags
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: ControlFlags
  nameWithType: CommonSecurityDescriptor.ControlFlags
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "동작을 지정 하는 값을 가져옵니다는 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  syntax:
    content: public override System.Security.AccessControl.ControlFlags ControlFlags { get; }
    return:
      type: System.Security.AccessControl.ControlFlags
      description: "하나 이상의 값은 <xref href=&quot;System.Security.AccessControl.ControlFlags&quot;> </xref> 열거형 논리적 OR 연산으로 결합 합니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  id: DiscretionaryAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: DiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "이 대 한 임의 액세스 제어 목록 (DACL)를 가져오거나 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다. DACL은 액세스 규칙을 포함합니다."
  remarks: "이 속성은로 설정 하는 경우 `null`, 모든 권한 (AEFA) DACL에 추가 되 고 모든 단일 액세스 제어 항목 (ACE). 응용 프로그램 AEFA ACE는 추가 된 보안 설명자의 DACL를 수정할 경우 해당 DACL 유지 되 면 AEFA ACE DACL 함께 유지 됩니다.       이 의도 하지 않게 보안 주체에 대 한 액세스를 허용 하는 응용 프로그램에서 발생할 수 있습니다. 이 인해 응용 프로그램의 AEFA ACE의 존재 여부 확인 하 고 보안 설명자를 수정 하기 전에 제거 해야 합니다."
  syntax:
    content: public System.Security.AccessControl.DiscretionaryAcl DiscretionaryAcl { get; set; }
    return:
      type: System.Security.AccessControl.DiscretionaryAcl
      description: "이 대 한 DACL <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group
  id: Group
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: Group
  nameWithType: CommonSecurityDescriptor.Group
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Group
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "이 대 한 주 그룹을 가져오거나 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  syntax:
    content: public override System.Security.Principal.SecurityIdentifier Group { get; set; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "이 대 한 주 그룹 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.Group*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  id: IsContainer
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsContainer
  nameWithType: CommonSecurityDescriptor.IsContainer
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "이 관련 된 개체가 있는지 여부를 지정 하는 부울 값을 가져옵니다 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체 컨테이너 개체입니다."
  syntax:
    content: public bool IsContainer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 관련 된 개체가 있으면 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체가 컨테이너 개체 이면, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  id: IsDiscretionaryAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsDiscretionaryAclCanonical
  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "임의 액세스 제어 목록 (DACL) 관련 된이 있는지 여부를 지정 하는 부울 값을 가져옵니다 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체 정식 순서로 표시 됩니다."
  syntax:
    content: public bool IsDiscretionaryAclCanonical { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 연결 된 DACL <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 정식 순서 대로 개체는 그렇지 않은 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  id: IsDS
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsDS
  nameWithType: CommonSecurityDescriptor.IsDS
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "이 관련 된 개체가 있는지 여부를 지정 하는 부울 값을 가져옵니다 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체는 디렉터리 개체입니다."
  syntax:
    content: public bool IsDS { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>개체와 연결 된 경우 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체가 디렉터리 개체 이면, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsDS*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  id: IsSystemAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsSystemAclCanonical
  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "액세스 제어 목록 SACL (시스템) 관련 된이 있는지 여부를 지정 하는 부울 값을 가져옵니다 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체 정식 순서로 표시 됩니다."
  syntax:
    content: public bool IsSystemAclCanonical { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>이 연결 된 SACL <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 정식 순서 대로 개체는 그렇지 않은 경우 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  id: Owner
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: Owner
  nameWithType: CommonSecurityDescriptor.Owner
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "이 연결 되는 개체의 소유자를 가져오거나 설정 합니다. <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  syntax:
    content: public override System.Security.Principal.SecurityIdentifier Owner { get; set; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "이 연결 되는 개체의 소유자 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  id: PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: PurgeAccessControl(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "연결 된이 지정 된 보안 식별자에서 임의 액세스 제어 목록 (DACL)에 대 한 모든 액세스 규칙을 제거 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  remarks: "잘못 보안 주체에 대 한 액세스를 허용할를 방지 하려면 응용 프로그램 확인 해야 허용의 존재 여부에 대 한 모든 사용자 (ACE) 액세스 (AEFA) 액세스 제어 항목 전체 및 DACL을 수정 하기 전에 제거 합니다."
  syntax:
    content: public void PurgeAccessControl (System.Security.Principal.SecurityIdentifier sid);
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "액세스 규칙을 제거 하는 보안 식별자입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  id: PurgeAudit(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: PurgeAudit(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "연결 된이 지정 된 보안 식별자에서의 액세스 제어 목록 SACL (시스템)에 대 한 모든 감사 규칙 제거 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  syntax:
    content: public void PurgeAudit (System.Security.Principal.SecurityIdentifier sid);
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "감사 규칙을 제거 하는 보안 식별자입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  id: SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: SetDiscretionaryAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "임의 액세스 제어 목록 (DACL)이 연결에 대 한 상속 보호를 설정 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다. Dacl 보호 되는 부모 컨테이너에서 액세스 규칙을 상속 하지 않습니다."
  syntax:
    content: public void SetDiscretionaryAclProtection (bool isProtected, bool preserveInheritance);
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>상속에서 DACL을 보호 합니다."
    - id: preserveInheritance
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>상속 된; DACL에서 액세스 규칙을 변경 하지 않으려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> DACL에서 상속 된 액세스 규칙을 제거 하려면."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  id: SetSystemAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: SetSystemAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "이 관련 된 액세스 제어 목록 SACL (시스템)에 대 한 상속 보호를 설정 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다. Sacl 보호 되는 부모 컨테이너에서 감사 규칙을 상속 하지 않습니다."
  syntax:
    content: public void SetSystemAclProtection (bool isProtected, bool preserveInheritance);
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>상속에서 SACL을 보호 합니다."
    - id: preserveInheritance
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>SACL;에서 상속 된 감사 규칙을 유지 하려면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> SACL에서 상속 된 감사 규칙을 제거 하려면."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  id: SystemAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: SystemAcl
  nameWithType: CommonSecurityDescriptor.SystemAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "이 액세스 제어 목록 SACL (시스템)를 가져오거나 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다. SACL 감사 규칙을 포함합니다."
  syntax:
    content: public System.Security.AccessControl.SystemAcl SystemAcl { get; set; }
    return:
      type: System.Security.AccessControl.SystemAcl
      description: "이 대 한 SACL <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref> 개체입니다."
  overload: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: System.Security.AccessControl.GenericSecurityDescriptor
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.RawSecurityDescriptor
  parent: System.Security.AccessControl
  isExternal: false
  name: RawSecurityDescriptor
  nameWithType: RawSecurityDescriptor
  fullName: System.Security.AccessControl.RawSecurityDescriptor
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,String)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
- uid: System.Security.AccessControl.ControlFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: ControlFlags
  nameWithType: ControlFlags
  fullName: System.Security.AccessControl.ControlFlags
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.AccessControl.SystemAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: SystemAcl
  nameWithType: SystemAcl
  fullName: System.Security.AccessControl.SystemAcl
- uid: System.Security.AccessControl.DiscretionaryAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: DiscretionaryAcl
  nameWithType: DiscretionaryAcl
  fullName: System.Security.AccessControl.DiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddDiscretionaryAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddSystemAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: ControlFlags
  nameWithType: CommonSecurityDescriptor.ControlFlags
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: DiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Group
  nameWithType: CommonSecurityDescriptor.Group
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Group
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsContainer
  nameWithType: CommonSecurityDescriptor.IsContainer
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDiscretionaryAclCanonical
  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDS
  nameWithType: CommonSecurityDescriptor.IsDS
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsSystemAclCanonical
  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Owner
  nameWithType: CommonSecurityDescriptor.Owner
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Owner
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAccessControl(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAudit(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetDiscretionaryAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetSystemAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SystemAcl
  nameWithType: CommonSecurityDescriptor.SystemAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddDiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddSystemAcl
  nameWithType: CommonSecurityDescriptor.AddSystemAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: ControlFlags
  nameWithType: CommonSecurityDescriptor.ControlFlags
- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: DiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Group
  nameWithType: CommonSecurityDescriptor.Group
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsContainer
  nameWithType: CommonSecurityDescriptor.IsContainer
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDiscretionaryAclCanonical
  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDS
  nameWithType: CommonSecurityDescriptor.IsDS
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsSystemAclCanonical
  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Owner
  nameWithType: CommonSecurityDescriptor.Owner
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAccessControl
  nameWithType: CommonSecurityDescriptor.PurgeAccessControl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAudit
  nameWithType: CommonSecurityDescriptor.PurgeAudit
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetDiscretionaryAclProtection
  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetSystemAclProtection
  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SystemAcl
  nameWithType: CommonSecurityDescriptor.SystemAcl
