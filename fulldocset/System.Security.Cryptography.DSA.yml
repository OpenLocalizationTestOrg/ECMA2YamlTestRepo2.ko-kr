### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSA
  id: DSA
  children:
  - System.Security.Cryptography.DSA.#ctor
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
  type: Class
  summary: "디지털 서명 알고리즘 (DSA)의 모든 구현이 상속 해야 하는 추상 기본 클래스를 나타냅니다."
  remarks: "데이터의 무결성을 보호 하는 데 도움이 되는 디지털 서명을 생성 하는 DSA 클래스 및 파생된 클래스를 사용할 수 있습니다.  <xref:System.Security.Cryptography.DSACryptoServiceProvider>이 클래스의 구현을 제공합니다</xref:System.Security.Cryptography.DSACryptoServiceProvider>       메시지에 디지털 서명을 하려면 공개 키 시스템을 사용 하려면 보낸 사람에 게 먼저는 해시 함수를 적용 메시지 메시지 다이제스트를 만듭니다. 보낸 다음 보낸 사람의 보낸 사람의 개인 서명을 만드는 데 개인 키와 함께 메시지 다이제스트를 암호화 합니다. 메시지와 서명을 받으면 수신자는 메시지 다이제스트를 복구 하려면 보낸 사람의 공개 키를 사용 하 여 서명을 해독 하 고 보낸 사람이 사용한 것과 동일한 해시 알고리즘을 사용 하 여 메시지를 해시 합니다. 보낸 사람 으로부터 받은 메시지 다이제스트를 수신자와 정확히 일치를 계산 하 고 메시지 다이제스트를 수신자 전송 되는 동안 변경 되지 않았다고 가정할 수 있습니다. 참고는 서명을 보낸 사람의 공개 키가 일반 기술 하기 때문에 모든 사용자를 확인할 수 있습니다.       최신 비대칭 알고리즘을 사용할 수 있습니다. <xref:System.Security.Cryptography.RSA>클래스는 <xref:System.Security.Cryptography.ECDsa>클래스 또는 <xref:System.Security.Cryptography.ECDiffieHellman>DSA 클래스 대신 클래스</xref:System.Security.Cryptography.ECDiffieHellman> </xref:System.Security.Cryptography.ECDsa> </xref:System.Security.Cryptography.RSA> 를 사용 하는 것이 좋습니다. DSA 레거시 응용 프로그램 및 데이터와 호환성을 위해서만 사용 합니다.       이 알고리즘은 64 비트 단위로 증가 1024 비트 이상에서 512 비트 키 길이 지원 합니다."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> 클래스입니다."
  syntax:
    content: protected DSA ();
    parameters: []
  overload: System.Security.Cryptography.DSA.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.Create
  id: Create
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "비대칭 알고리즘을 수행 하는 데 사용 하는 기본 암호화 개체를 만듭니다."
  syntax:
    content: public static System.Security.Cryptography.DSA Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DSA
      description: "비대칭 알고리즘을 수행 하는 데 사용 되는 암호화 개체입니다."
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "비대칭 알고리즘을 수행 하는 데 지정된 된 암호화 개체를 만듭니다."
  remarks: "에 대 한 <xref:System.Security.Cryptography.DSA>, System.Security.Cryptography.DSA 이름을 사용 합니다.</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public static System.Security.Cryptography.DSA Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "특정 구현 이름 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> 사용 하도록 합니다."
    return:
      type: System.Security.Cryptography.DSA
      description: "비대칭 알고리즘을 수행 하는 데 사용 되는 암호화 개체입니다."
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 된 경우는 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> 지정된 된 데이터에 대 한 서명입니다."
  syntax:
    content: public abstract byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "서명할 데이터입니다."
    return:
      type: System.Byte[]
      description: "지정된 된 데이터에 대 한 디지털 서명입니다."
  overload: System.Security.Cryptography.DSA.CreateSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 내보냅니다는 <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>합니다."
  syntax:
    content: public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>개인 매개 변수를 포함 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.Security.Cryptography.DSAParameters
      description: "에 대 한 매개 변수 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DSA.ExportParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "다시 생성 한 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> XML 문자열에서 개체입니다."
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "다시 만드는 데 사용할 XML 문자열의 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.DSA.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>xmlString</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "형식은 <code> xmlString </code> 매개 변수가 올바르지 않습니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSA.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 지정된 된 해싱 알고리즘을 사용 하 여 지정 된 이진 스트림의 해시 값을 계산 합니다."
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "해시할 이진 스트림입니다."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "데이터를 해시 하는 데 사용 되는 알고리즘입니다."
    return:
      type: System.Byte[]
      description: "해시 된 데이터입니다."
  overload: System.Security.Cryptography.DSA.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "파생된 클래스는이 메서드를 재정의 해야 합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 지정된 된 해싱 알고리즘을 사용 하 여 지정 된 바이트 배열 부분의 해시 값을 계산 합니다."
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "해시할 데이터입니다."
    - id: offset
      type: System.Int32
      description: "첫 번째 바이트의 인덱스 `data` 해시할입니다."
    - id: count
      type: System.Int32
      description: "해시할 바이트 수입니다."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "데이터를 해시 하는 데 사용 되는 알고리즘입니다."
    return:
      type: System.Byte[]
      description: "해시 된 데이터입니다."
  overload: System.Security.Cryptography.DSA.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "파생된 클래스는이 메서드를 재정의 해야 합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 지정 된 가져옵니다 <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>합니다."
  syntax:
    content: public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: "에 대 한 매개 변수 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DSA.ImportParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 해시 알고리즘을 사용 하 여 지정 된 바이트 배열의 해시 값을 계산 하 고 결과 해시 값을 서명 합니다."
  syntax:
    content: public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "해시를 계산 하는 입력된 데이터입니다."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "해시 값을 만드는 데 사용할 해시 알고리즘입니다."
    return:
      type: System.Byte[]
      description: "지정된 된 데이터에 대 한 DSA 서명입니다."
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 &lt;xref:System.String.Empty?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: DSA.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 해시 알고리즘을 사용 하 여 지정 된 스트림의 해시 값을 계산 하 고 결과 해시 값을 서명 합니다."
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "해시를 계산 하는 입력된 스트림."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "해시 값을 만드는 데 사용할 해시 알고리즘입니다."
    return:
      type: System.Byte[]
      description: "지정된 된 데이터에 대 한 DSA 서명입니다."
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 &lt;xref:System.String.Empty?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정된 된 해시 알고리즘을 사용 하 여 지정 된 바이트 배열 일부의 해시 값을 계산 하 고 결과 해시 값을 서명 합니다."
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "해시를 계산 하는 입력된 데이터입니다."
    - id: offset
      type: System.Int32
      description: "데이터를 사용 하 여 시작 하는 배열에 대 한 오프셋입니다."
    - id: count
      type: System.Int32
      description: "데이터로 사용할 배열의 바이트 수입니다."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "해시 값을 만드는 데 사용할 해시 알고리즘입니다."
    return:
      type: System.Byte[]
      description: "지정된 된 데이터에 대 한 DSA 서명입니다."
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 &lt;xref:System.String.Empty?displayProperty=fullName&gt;합니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다.       -또는- <code>offset</code>  + <code>count</code> – 1의 상한을 초과 하는 인덱스에 <code>data</code>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "현재는 XML 문자열 표현을 만들고 반환 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> 개체입니다."
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>개인 매개 변수를 포함 하려면 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
    return:
      type: System.String
      description: "현재 XML 문자열 인코딩입니다 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> 개체입니다."
  overload: System.Security.Cryptography.DSA.ToXmlString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정 된를 사용 하 여 지정된 된 데이터의 해시 값을 계산 하 여 디지털 서명이 유효한 지 확인 해시 알고리즘을 제공 된 서명과 비교 합니다."
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "서명 된 데이터입니다."
    - id: signature
      type: System.Byte[]
      description: "확인할 서명 데이터입니다."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "데이터의 해시 값을 만드는 데 사용 되는 해시 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>디지털 서명이 유효 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 &lt;xref:System.String.Empty?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "지정 된 해시 값을 계산 하 여 디지털 서명이 유효한 지 확인을 제공 된 서명과 비교 하 고 지정된 된 해시 알고리즘을 사용 하 여 스트림 합니다."
  syntax:
    content: public virtual bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "서명 된 데이터입니다."
    - id: signature
      type: System.Byte[]
      description: "확인할 서명 데이터입니다."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "데이터의 해시 값을 만드는 데 사용 되는 해시 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>디지털 서명이 유효 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 &lt;xref:System.String.Empty?displayProperty=fullName&gt;합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "바이트의 일부 데이터의 해시 값을 계산 하 여 디지털 서명이 유효한 지 확인을 제공 된 서명과 비교 하 고 지정된 된 해시 알고리즘을 사용 하 여 배열입니다."
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "서명 된 데이터입니다."
    - id: offset
      type: System.Int32
      description: "해시를 계산 하기 시작 하는 인덱스입니다."
    - id: count
      type: System.Int32
      description: "해시할 바이트 수입니다."
    - id: signature
      type: System.Byte[]
      description: "확인할 서명 데이터입니다."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "데이터의 해시 값을 만드는 데 사용 되는 해시 알고리즘입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>디지털 서명이 유효 하는 경우 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 또는 &lt;xref:System.String.Empty?displayProperty=fullName&gt;합니다."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>가&0; 보다 작습니다.       -또는- <code>count</code> 가&0; 보다 작습니다.       -또는- <code>offset</code>  + <code>count</code> – 1의 상한을 초과 하는 인덱스에 <code>data</code>합니다."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "파생된 클래스에서 재정의 되 면 확인는 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> 지정된 된 데이터에 대 한 서명입니다."
  syntax:
    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "로 서명 된 데이터의 해시 `rgbSignature`합니다."
    - id: rgbSignature
      type: System.Byte[]
      description: "서명을 대 한 확인할 `rgbData`합니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우 <code> rgbSignature </code> 에 지정 된 해시 알고리즘 및 키를 사용 하 여 계산 된 서명과 일치 <code> rgbHash </code>, 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: System.Security.Cryptography.DSA.VerifySignature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.DSA.#ctor
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
- uid: System.Security.Cryptography.DSA.Create
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
- uid: System.Security.Cryptography.DSA
  parent: System.Security.Cryptography
  isExternal: false
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.DSA.Create(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSA.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: DSA.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSA.#ctor*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA
  nameWithType: DSA.DSA
- uid: System.Security.Cryptography.DSA.Create*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create
  nameWithType: DSA.Create
- uid: System.Security.Cryptography.DSA.CreateSignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature
  nameWithType: DSA.CreateSignature
- uid: System.Security.Cryptography.DSA.ExportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters
  nameWithType: DSA.ExportParameters
- uid: System.Security.Cryptography.DSA.FromXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString
  nameWithType: DSA.FromXmlString
- uid: System.Security.Cryptography.DSA.HashData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData
  nameWithType: DSA.HashData
- uid: System.Security.Cryptography.DSA.ImportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters
  nameWithType: DSA.ImportParameters
- uid: System.Security.Cryptography.DSA.SignData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData
  nameWithType: DSA.SignData
- uid: System.Security.Cryptography.DSA.ToXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString
  nameWithType: DSA.ToXmlString
- uid: System.Security.Cryptography.DSA.VerifyData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData
  nameWithType: DSA.VerifyData
- uid: System.Security.Cryptography.DSA.VerifySignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature
  nameWithType: DSA.VerifySignature
