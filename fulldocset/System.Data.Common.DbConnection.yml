### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbConnection
  id: DbConnection
  children:
  - System.Data.Common.DbConnection.#ctor
  - System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.BeginTransaction
  - System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.ChangeDatabase(System.String)
  - System.Data.Common.DbConnection.Close
  - System.Data.Common.DbConnection.ConnectionString
  - System.Data.Common.DbConnection.ConnectionTimeout
  - System.Data.Common.DbConnection.CreateCommand
  - System.Data.Common.DbConnection.CreateDbCommand
  - System.Data.Common.DbConnection.Database
  - System.Data.Common.DbConnection.DataSource
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.Common.DbConnection.GetSchema
  - System.Data.Common.DbConnection.GetSchema(System.String)
  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.Open
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.ServerVersion
  - System.Data.Common.DbConnection.State
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  langs:
  - csharp
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
  type: Class
  summary: "데이터베이스에 연결을 나타냅니다."
  syntax:
    content: 'public abstract class DbConnection : System.ComponentModel.Component, IDisposable, System.Data.IDbConnection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Data.IDbConnection
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbConnection.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DbConnection()
  nameWithType: DbConnection.DbConnection()
  fullName: System.Data.Common.DbConnection.DbConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "새 인스턴스를 초기화는 <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> 클래스입니다."
  syntax:
    content: protected DbConnection ();
    parameters: []
  overload: System.Data.Common.DbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스 트랜잭션을 시작합니다."
  remarks: "사용자 고유의 연결 형식을 만드는 경우 트랜잭션을 시작 하는 데 필요한 코드를 구현 하려면이 메서드를 재정의 합니다."
  syntax:
    content: protected abstract System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "트랜잭션에 대 한 격리 수준을 지정합니다."
    return:
      type: System.Data.Common.DbTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.Common.DbConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: DbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스 트랜잭션을 시작합니다."
  remarks: "격리 수준을 지정 하지 않으면 경우에 특정 유형의 연결에 대 한 기본 격리 수준이 사용 됩니다."
  syntax:
    content: public System.Data.Common.DbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.Common.DbTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.Common.DbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "지정 된 격리 수준으로 데이터베이스 트랜잭션을 시작 합니다."
  syntax:
    content: public System.Data.Common.DbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "트랜잭션에 대 한 격리 수준을 지정합니다."
    return:
      type: System.Data.Common.DbTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.Common.DbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: DbConnection.ChangeDatabase(String)
  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "열려 있는 연결에 대 한 현재 데이터베이스를 변경합니다."
  remarks: "제공 된 값이 고 `databaseName` 매개 변수는 현재 인스턴스에 대 한 올바른 데이터베이스 이름을 이어야 합니다."
  syntax:
    content: public abstract void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "사용할 연결에 대 한 데이터베이스의 이름을 지정 합니다."
  overload: System.Data.Common.DbConnection.ChangeDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Close
  id: Close
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: DbConnection.Close()
  fullName: System.Data.Common.DbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스에 연결을 닫습니다. 이것은 열려 있는 연결을 닫는 기본 방법입니다."
  remarks: "Close 메서드가 보류 중인 모든 트랜잭션을 롤백합니다. 그런 다음 연결 풀에 대 한 연결을 해제 하거나 연결 풀링을 사용 하지 않도록 설정 하는 경우 연결을 닫습니다.       응용 프로그램 닫기 여러 번 호출할 수 있습니다. 예외가 생성 되지 않습니다.       경우는 <xref:System.Data.Common.DbConnection>늘어나고의 범위를 닫혀 있지 않습니다.</xref:System.Data.Common.DbConnection> 따라서 명시적으로 닫아야 연결 호출 하 여 `Close` 또는 `Dispose`, 하는 기능적으로 동일 합니다. 연결 풀링 값 경우 `Pooling` 로 설정 된 `true` 또는 `yes`, 물리적 연결이 끊어집니다.      > [!CAUTION] > 호출 하지 않으면 `Close` 또는 `Dispose` 에 **연결**, **DataReader**, 또는 다른 관리 되는 개체에는 `Finalize` 클래스의 메서드로 합니다. 종료자에서만 클래스에 직접 속한 관리 되지 않는 리소스를 해제 해야 합니다. 클래스에 관리 되지 않는 리소스가 없는 경우 포함 되지 않습니다는 `Finalize` 클래스 정의에 메서드. 자세한 내용은 참조 [가비지 수집](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public abstract void Close ();
    parameters: []
  overload: System.Data.Common.DbConnection.Close*
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "연결을 여는 동안 발생 하는 연결 수준 오류입니다."
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
  fullName: System.Data.Common.DbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "연결을 여는 데 사용 하는 문자열을 가져오거나 설정 합니다."
  remarks: "이 연결에 대 한 특정 데이터 원본에 연결 문자열의 정확한 내용을 따라 다릅니다. 어떤 설정이 올바른지를 확인 하려면 사용 중인 연결의 특정 형식에 대 한 설명서를 참조 하십시오."
  syntax:
    content: public abstract string ConnectionString { get; set; }
    return:
      type: System.String
      description: "초기 연결을 설정 하는 데 사용 되는 연결 문자열입니다. 이 연결에 대 한 특정 데이터 원본에 연결 문자열의 정확한 내용을 따라 다릅니다. 기본값은 빈 문자열입니다."
  overload: System.Data.Common.DbConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
  fullName: System.Data.Common.DbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "시도 종료 하 고 오류를 생성 하기 전에 연결을 설정 하는 동안 대기할 시간을을 가져옵니다."
  syntax:
    content: public virtual int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "시간 (초) 연결이 열리기 전까지 기다려야 합니다. 기본값은 사용 중인 연결의 특정 형식으로 결정 됩니다."
  overload: System.Data.Common.DbConnection.ConnectionTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: DbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "만들고 반환는 <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> 현재 연결과 관련 된 개체입니다."
  syntax:
    content: public System.Data.Common.DbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;></xref> object."
  overload: System.Data.Common.DbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: DbConnection.CreateDbCommand()
  fullName: System.Data.Common.DbConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "만들고 반환는 <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> 현재 연결과 관련 된 개체입니다."
  remarks: "자체 연결을 구현 하는 경우 재정의 만들고 반환 하는 데 필요한 코드를 구현 하려면이 메서드는 <xref:System.Data.Common.DbCommand>개체입니다.</xref:System.Data.Common.DbCommand>"
  syntax:
    content: protected abstract System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;></xref> object."
  overload: System.Data.Common.DbConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Database
  id: Database
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Database
  nameWithType: DbConnection.Database
  fullName: System.Data.Common.DbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "연결을 연 후 현재 데이터베이스의 이름 또는 연결을 열기 전에 연결 문자열에 지정 된 데이터베이스 이름을 가져옵니다."
  remarks: "일반적으로 연결을 동적으로이 속성을 업데이트는 현재 데이터베이스가 변경 될 때."
  syntax:
    content: public abstract string Database { get; }
    return:
      type: System.String
      description: "현재 데이터베이스 이름이 나 연결이 열린 후 사용할 데이터베이스의 이름을의 이름입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.Common.DbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.DataSource
  id: DataSource
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: DbConnection.DataSource
  fullName: System.Data.Common.DbConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스 서버에 연결 하는 데의 이름을 가져옵니다."
  remarks: "데이터베이스에 대 한 연결이 닫힐 경우 데이터 소스 값을 반환에 <xref:System.Data.Common.DbConnection.ConnectionString%2A>에 대 한는 `DataSource` 키워드.</xref:System.Data.Common.DbConnection.ConnectionString%2A> 연결이 열려 있는 경우와 <xref:System.Data.Common.DbConnection.ConnectionString%2A>데이터 소스 키워드 값으로 시작 &quot;|`datadirectory`|&quot;, 속성 값을 반환에 <xref:System.Data.Common.DbConnection.ConnectionString%2A>에 대 한는 `DataSource` 키워드만.</xref:System.Data.Common.DbConnection.ConnectionString%2A> </xref:System.Data.Common.DbConnection.ConnectionString%2A> 속성에 대 한 네이티브 공급자 반환 반환 하는 데이터베이스 연결이 열려 있으면는 `DBPROP_INIT_DATASOURCE`, 비어 있는 경우 네이티브 공급자 `DBPROP_DATASOURCENAME` 반환 됩니다."
  syntax:
    content: public abstract string DataSource { get; }
    return:
      type: System.String
      description: "데이터베이스 서버에 연결 하는 데의 이름입니다. 기본값은 빈 문자열입니다."
  overload: System.Data.Common.DbConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
  fullName: System.Data.Common.DbConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets the <xref href=&quot;System.Data.Common.DbProviderFactory&quot;></xref> for this <xref href=&quot;System.Data.Common.DbConnection&quot;></xref>."
  syntax:
    content: protected virtual System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "집합의 데이터 소스 클래스 공급자의 구현 인스턴스를 만드는 방법입니다."
  overload: System.Data.Common.DbConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: DbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "지정된 된 트랜잭션에 참여합니다."
  remarks: "새 ADO.NET 2.0에서 지원은 사용에 대 한는 `EnlistTransaction` 메서드를 분산된 트랜잭션에 참여 합니다. 연결을 참여 하기 때문에 <xref:System.Transactions.Transaction>인스턴스에 `EnlistTransaction` 에서 사용할 수 있는 기능을 활용는 <xref:System.Transactions>분산 트랜잭션 관리를 위한 네임 스페이스.</xref:System.Transactions> </xref:System.Transactions.Transaction> 트랜잭션에 연결을 명시적으로 등록 된, 등록 취소 하거나 첫 번째 트랜잭션이 완료 될 때까지 다른 트랜잭션에 인 리스트 먼 트 될 수 없습니다."
  syntax:
    content: public virtual void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "기존에 대 한 참조 <xref href=&quot;System.Transactions.Transaction&quot;> </xref> 를 등록 합니다."
  overload: System.Data.Common.DbConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema
  id: GetSchema
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: DbConnection.GetSchema()
  fullName: System.Data.Common.DbConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref>합니다."
  remarks: "트랜잭션과 관련 된 연결 인지 실행 `GetSchema` 호출에는 일부 공급자에서 예외가 발생할 수 있습니다."
  syntax:
    content: public virtual System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: DbConnection.GetSchema(String)
  fullName: System.Data.Common.DbConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> 스키마 이름에 지정된 된 문자열을 사용 하 여 합니다."
  remarks: "트랜잭션과 관련 된 연결 인지 실행 `GetSchema` 호출에는 일부 공급자에서 예외가 발생할 수 있습니다."
  syntax:
    content: public virtual System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>null로 지정 됩니다."
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: DbConnection.GetSchema(String,String[])
  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "이 데이터 원본에 대 한 스키마 정보를 반환 <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> 스키마 이름 및 제한 값에 대 한 지정 된 문자열 배열에 대 한 지정된 된 문자열을 사용 하 여 합니다."
  remarks: "`restrictionValues` 매개 변수 제공 *n* 수준의 특정 컬렉션에 대 한 제한 컬렉션에서 지정 된 값입니다. 특정된 제한에 값을 설정 하 고 다른 제한 값을 설정 하지 않으려면, 앞의 제한을 null 하 고 다음 값을 지정 하려면 원하는 제한에 적절 한 값을 설정 해야 합니다.       이 예는 &quot;Table&quot; 컬렉션입니다. 다음 값에서 이상 전달 해야는 &quot;Table&quot; 컬렉션에 세 가지 제한 (데이터베이스, 소유자 및 테이블 이름) &quot;칼&quot; 소유자와 연결 된 테이블에만 다시 확보 하려는 경우: null, &quot;칼&quot;입니다. 에 제한 값이 전달 되지 않으면, 기본 값은 해당 제한에 사용 됩니다. 이 null 전달 하는 대로 동일한 매핑을 매개 변수 값에 대 한 빈 문자열을 전달과에서는 다릅니다. 그러면 빈 문자열 (&quot;&quot;)의 지정된 된 매개 변수 값으로 간주 됩니다.       트랜잭션과 관련 된 연결 인지 실행 `GetSchema` 호출에는 일부 공급자에서 예외가 발생할 수 있습니다."
  syntax:
    content: public virtual System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "반환할 스키마의 이름을 지정 합니다."
    - id: restrictionValues
      type: System.String[]
      description: "요청된 된 스키마에 대 한 제한 값의 집합을 지정합니다."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> 스키마 정보가 들어 있는입니다."
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>null로 지정 됩니다."
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  id: OnStateChange(System.Data.StateChangeEventArgs)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OnStateChange(StateChangeEventArgs)
  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)
  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "발생 된 <xref href=&quot;System.Data.Common.DbConnection.StateChange&quot;> </xref> 이벤트입니다."
  remarks: '이벤트를 발생 시키는 대리자를 통해 이벤트 처리기를 호출 합니다. 에 대 한 개요 [NIB: 이벤트를 발생 시키는](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)합니다.'
  syntax:
    content: protected virtual void OnStateChange (System.Data.StateChangeEventArgs stateChange);
    parameters:
    - id: stateChange
      type: System.Data.StateChangeEventArgs
      description: "A <xref href=&quot;System.Data.StateChangeEventArgs&quot;> </xref> 하는 이벤트 데이터를 포함 합니다."
  overload: System.Data.Common.DbConnection.OnStateChange*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Open
  id: Open
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: DbConnection.Open()
  fullName: System.Data.Common.DbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "에 <xref:System.Data.Common.DbConnection.ConnectionString*>.</xref:System.Data.Common.DbConnection.ConnectionString*> 지정한 설정으로 데이터베이스 연결을 엽니다."
  remarks: "사용자 정의 동작으로이 메서드를 재정의 해야 합니다. <xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName>없이 메서드를 호출 하면 예외가 throw 됩니다 먼저 닫는 중입니다.</xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName>"
  syntax:
    content: public abstract void Open ();
    parameters: []
  overload: System.Data.Common.DbConnection.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OpenAsync
  id: OpenAsync
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OpenAsync()
  nameWithType: DbConnection.OpenAsync()
  fullName: System.Data.Common.DbConnection.OpenAsync()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "비동기 버전 <> </> *>, 데이터베이스 연결에서 지정한 설정을 사용 하 여 열리는 <> </> *> 합니다. 이 메서드는 가상 메서드를 호출 <xref:System.Data.Common.DbConnection.OpenAsync*>CancellationToken.None와.</xref:System.Data.Common.DbConnection.OpenAsync*>"
  remarks: "호출한 후 <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A>반환 해야 <xref:System.Data.ConnectionState>반환 될 때까지 <xref:System.Threading.Tasks.Task>완료 된.</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> </xref:System.Data.Common.DbConnection.OpenAsync%2A> 그런 다음 연결이 성공적 이면 <xref:System.Data.Common.DbConnection.State%2A> <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> 반환 해야 합니다</xref:System.Data.Common.DbConnection.State%2A> 연결이 실패 하면 <xref:System.Data.Common.DbConnection.State%2A> <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> 반환 해야 합니다</xref:System.Data.Common.DbConnection.State%2A>       에 대 한 호출 <xref:System.Data.Common.DbConnection.Close%2A>취소 하거나 해당 닫습니다는 하려고 <xref:System.Data.Common.DbConnection.OpenAsync%2A>호출.</xref:System.Data.Common.DbConnection.OpenAsync%2A> </xref:System.Data.Common.DbConnection.Close%2A>       비동기 프로그래밍에 대 한 자세한 내용은 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], 참조 [비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public System.Threading.Tasks.Task OpenAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "비동기 작업을 나타내는 작업입니다."
  overload: System.Data.Common.DbConnection.OpenAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OpenAsync(CancellationToken)
  nameWithType: DbConnection.OpenAsync(CancellationToken)
  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "이의 비동기 버전 <> </> *> 합니다. 공급자는 적절 한 구현을 재정의 해야 합니다. 취소 토큰 선택적으로 유지 될 수 있습니다.       기본 구현은 동기 호출 <> </> *>를 호출 하 고 완료 된 작업을 반환 합니다. 기본 구현은 이미 취소 된 cancellationToken을 전달 하는 경우 취소 된 작업을 반환 합니다. 열기에서 throw 된 예외에 반환 된 작업 예외 속성을 통해 전달 됩니다.       다른 메서드 및 속성을 호출 하지 않고는 <xref uid=&quot;langword_csharp_DbConnection&quot; name=&quot;DbConnection&quot; href=&quot;&quot;> </xref> 반환 된 작업이 완료 될 때까지 개체입니다."
  remarks: "호출한 후 <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A>반환 해야 <xref:System.Data.ConnectionState>반환 될 때까지 <xref:System.Threading.Tasks.Task>완료 된.</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> </xref:System.Data.Common.DbConnection.OpenAsync%2A> 그런 다음 연결이 성공적 이면 <xref:System.Data.Common.DbConnection.State%2A> <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> 반환 해야 합니다</xref:System.Data.Common.DbConnection.State%2A> 연결이 실패 하면 <xref:System.Data.Common.DbConnection.State%2A> <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> 반환 해야 합니다</xref:System.Data.Common.DbConnection.State%2A>       에 대 한 호출 <xref:System.Data.Common.DbConnection.Close%2A>취소 하거나 해당 닫습니다는 하려고 <xref:System.Data.Common.DbConnection.OpenAsync%2A>호출.</xref:System.Data.Common.DbConnection.OpenAsync%2A> </xref:System.Data.Common.DbConnection.Close%2A>       비동기 프로그래밍에 대 한 자세한 내용은 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], 참조 [비동기 프로그래밍](~/add/includes/ajax-current-ext-md.md)합니다."
  syntax:
    content: public virtual System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "취소 명령입니다."
    return:
      type: System.Threading.Tasks.Task
      description: "비동기 작업을 나타내는 작업입니다."
  overload: System.Data.Common.DbConnection.OpenAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
  fullName: System.Data.Common.DbConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "개체가 연결 된 서버 버전을 나타내는 문자열을 가져옵니다."
  syntax:
    content: public abstract string ServerVersion { get; }
    return:
      type: System.String
      description: "데이터베이스의 버전입니다. 반환 되는 문자열의 형식은 현재 사용 중인 연결의 특정 형식에 따라 달라 집니다."
  overload: System.Data.Common.DbConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "반환 된 작업이 완료 되지 않았고 <xref:System.Data.Common.DbConnection.OpenAsync*>.</xref:System.Data.Common.DbConnection.OpenAsync*> 를 호출한 후에 연결이 열려 있지 않은 동안 ServerVersion 였습니다."
  platform:
  - net462
- uid: System.Data.Common.DbConnection.State
  id: State
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: State
  nameWithType: DbConnection.State
  fullName: System.Data.Common.DbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "연결의 상태를 설명 하는 문자열을 가져옵니다."
  syntax:
    content: public abstract System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "연결의 상태입니다. 반환 되는 문자열의 형식은 현재 사용 중인 연결의 특정 형식에 따라 달라 집니다."
  overload: System.Data.Common.DbConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.StateChange
  id: StateChange
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: StateChange
  nameWithType: DbConnection.StateChange
  fullName: System.Data.Common.DbConnection.StateChange
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "이벤트의 상태가 변경 될 때 발생 합니다."
  remarks: "StateChange 이벤트에 열리고 닫힌 또는 열린 닫힘에서 이벤트의 상태가 변경 될 때 발생 합니다."
  syntax:
    content: public virtual event System.Data.StateChangeEventHandler StateChange;
    return:
      type: System.Data.StateChangeEventHandler
      description: "추가할 수 있습니다."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  id: System#Data#IDbConnection#BeginTransaction
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.BeginTransaction()
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "데이터베이스 트랜잭션을 시작합니다."
  remarks: "이 멤버는 명시적 인터페이스 멤버 구현 이며 사용할 수 있습니다 경우에만 <xref:System.Data.Common.DbConnection>인스턴스로 캐스팅 되는 <xref:System.Data.IDbConnection>인터페이스.</xref:System.Data.IDbConnection> </xref:System.Data.Common.DbConnection>       자세한 내용은 <xref:System.Data.IDbConnection.BeginTransaction%2A>.</xref:System.Data.IDbConnection.BeginTransaction%2A> 을 참조 하십시오."
  syntax:
    content: System.Data.IDbTransaction IDbConnection.BeginTransaction ();
    parameters: []
    return:
      type: System.Data.IDbTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  id: System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "지정 된 데이터베이스 트랜잭션을 시작 <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 값입니다."
  remarks: "자세한 내용은 <xref:System.Data.IDbConnection.BeginTransaction%2A>.</xref:System.Data.IDbConnection.BeginTransaction%2A> 을 참조 하십시오."
  syntax:
    content: System.Data.IDbTransaction IDbConnection.BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "중 하나는 <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> 값입니다."
    return:
      type: System.Data.IDbTransaction
      description: "새 트랜잭션을 나타내는 개체입니다."
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  id: System#Data#IDbConnection#CreateCommand
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.CreateCommand()
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "만들고 반환는 <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> 현재 연결과 연결 된 개체입니다."
  remarks: "자세한 내용은 참조 [명령 및 매개 변수](~/add/includes/ajax-current-ext-md.md) 및 <xref:System.Data.IDbConnection.CreateCommand%2A>.</xref:System.Data.IDbConnection.CreateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand IDbConnection.CreateCommand ();
    parameters: []
    return:
      type: System.Data.IDbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> 연결과 연결 된 개체입니다."
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Data.Common.DbException
  parent: System.Data.Common
  isExternal: false
  name: DbException
  nameWithType: DbException
  fullName: System.Data.Common.DbException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.Common.DbConnection.#ctor
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbConnection()
  nameWithType: DbConnection.DbConnection()
  fullName: System.Data.Common.DbConnection.DbConnection()
- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.Common.DbConnection.BeginTransaction
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: DbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.BeginTransaction()
- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: DbConnection.ChangeDatabase(String)
  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbConnection.Close
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Close()
  nameWithType: DbConnection.Close()
  fullName: System.Data.Common.DbConnection.Close()
- uid: System.Data.Common.DbConnection.ConnectionString
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
  fullName: System.Data.Common.DbConnection.ConnectionString
- uid: System.Data.Common.DbConnection.ConnectionTimeout
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
  fullName: System.Data.Common.DbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Common.DbConnection.CreateCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: DbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.CreateCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbConnection.CreateDbCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: DbConnection.CreateDbCommand()
  fullName: System.Data.Common.DbConnection.CreateDbCommand()
- uid: System.Data.Common.DbConnection.Database
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Database
  nameWithType: DbConnection.Database
  fullName: System.Data.Common.DbConnection.Database
- uid: System.Data.Common.DbConnection.DataSource
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DataSource
  nameWithType: DbConnection.DataSource
  fullName: System.Data.Common.DbConnection.DataSource
- uid: System.Data.Common.DbConnection.DbProviderFactory
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
  fullName: System.Data.Common.DbConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: DbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.Common.DbConnection.GetSchema
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema()
  nameWithType: DbConnection.GetSchema()
  fullName: System.Data.Common.DbConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbConnection.GetSchema(System.String)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: DbConnection.GetSchema(String)
  fullName: System.Data.Common.DbConnection.GetSchema(String)
- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: DbConnection.GetSchema(String,String[])
  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OnStateChange(StateChangeEventArgs)
  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)
  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)
- uid: System.Data.StateChangeEventArgs
  parent: System.Data
  isExternal: false
  name: StateChangeEventArgs
  nameWithType: StateChangeEventArgs
  fullName: System.Data.StateChangeEventArgs
- uid: System.Data.Common.DbConnection.Open
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Open()
  nameWithType: DbConnection.Open()
  fullName: System.Data.Common.DbConnection.Open()
- uid: System.Data.Common.DbConnection.OpenAsync
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync()
  nameWithType: DbConnection.OpenAsync()
  fullName: System.Data.Common.DbConnection.OpenAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync(CancellationToken)
  nameWithType: DbConnection.OpenAsync(CancellationToken)
  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.Common.DbConnection.ServerVersion
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
  fullName: System.Data.Common.DbConnection.ServerVersion
- uid: System.Data.Common.DbConnection.State
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: State
  nameWithType: DbConnection.State
  fullName: System.Data.Common.DbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.Common.DbConnection.StateChange
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: StateChange
  nameWithType: DbConnection.StateChange
  fullName: System.Data.Common.DbConnection.StateChange
- uid: System.Data.StateChangeEventHandler
  parent: System.Data
  isExternal: false
  name: StateChangeEventHandler
  nameWithType: StateChangeEventHandler
  fullName: System.Data.StateChangeEventHandler
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction()
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.CreateCommand()
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbConnection.#ctor*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection.DbConnection
- uid: System.Data.Common.DbConnection.BeginDbTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: DbConnection.BeginDbTransaction
- uid: System.Data.Common.DbConnection.BeginTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: DbConnection.BeginTransaction
- uid: System.Data.Common.DbConnection.ChangeDatabase*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: DbConnection.ChangeDatabase
- uid: System.Data.Common.DbConnection.Close*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Close
  nameWithType: DbConnection.Close
- uid: System.Data.Common.DbConnection.ConnectionString*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
- uid: System.Data.Common.DbConnection.ConnectionTimeout*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
- uid: System.Data.Common.DbConnection.CreateCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: DbConnection.CreateCommand
- uid: System.Data.Common.DbConnection.CreateDbCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: DbConnection.CreateDbCommand
- uid: System.Data.Common.DbConnection.Database*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Database
  nameWithType: DbConnection.Database
- uid: System.Data.Common.DbConnection.DataSource*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DataSource
  nameWithType: DbConnection.DataSource
- uid: System.Data.Common.DbConnection.DbProviderFactory*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
- uid: System.Data.Common.DbConnection.EnlistTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: DbConnection.EnlistTransaction
- uid: System.Data.Common.DbConnection.GetSchema*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema
  nameWithType: DbConnection.GetSchema
- uid: System.Data.Common.DbConnection.OnStateChange*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OnStateChange
  nameWithType: DbConnection.OnStateChange
- uid: System.Data.Common.DbConnection.Open*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Open
  nameWithType: DbConnection.Open
- uid: System.Data.Common.DbConnection.OpenAsync*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync
  nameWithType: DbConnection.OpenAsync
- uid: System.Data.Common.DbConnection.ServerVersion*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
- uid: System.Data.Common.DbConnection.State*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: State
  nameWithType: DbConnection.State
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.CreateCommand
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand
