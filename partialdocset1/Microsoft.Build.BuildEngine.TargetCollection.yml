### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.BuildEngine.TargetCollection
  id: TargetCollection
  children:
  - Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget(System.String)
  - Microsoft.Build.BuildEngine.TargetCollection.CopyTo(System.Array,System.Int32)
  - Microsoft.Build.BuildEngine.TargetCollection.Count
  - Microsoft.Build.BuildEngine.TargetCollection.Exists(System.String)
  - Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator
  - Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized
  - Microsoft.Build.BuildEngine.TargetCollection.Item(System.String)
  - Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget(Microsoft.Build.BuildEngine.Target)
  - Microsoft.Build.BuildEngine.TargetCollection.SyncRoot
  langs:
  - csharp
  name: TargetCollection
  nameWithType: TargetCollection
  fullName: Microsoft.Build.BuildEngine.TargetCollection
  type: Class
  summary: "모든 컬렉션을 나타냅니다 [대상](~/add/includes/ajax-current-ext-md.md) 프로젝트의 요소입니다."
  syntax:
    content: 'public class TargetCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget(System.String)
  id: AddNewTarget(System.String)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: AddNewTarget(String)
  nameWithType: TargetCollection.AddNewTarget(String)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget(String)
  type: Method
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "새 추가 [대상](~/add/includes/ajax-current-ext-md.md) 프로젝트의 끝에 요소입니다."
  syntax:
    content: public Microsoft.Build.BuildEngine.Target AddNewTarget (string targetName);
    parameters:
    - id: targetName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 새 특성 <xref uid=&quot;langword_csharp_Target&quot; name=&quot;Target&quot; href=&quot;&quot;> </xref> 요소입니다."
    return:
      type: Microsoft.Build.BuildEngine.Target
      description: "A <xref href=&quot;Microsoft.Build.BuildEngine.Target&quot;> </xref> 나타내는 만들어진 개체 `Target` 요소입니다."
  overload: Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: TargetCollection.CopyTo(Array,Int32)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "전체 복사 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref> 호환 되는&1; 차원 <xref:System.Array>대상 배열의 지정된 된 인덱스부터 시작 합니다.</xref:System.Array>"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "1 차원 <xref:System.Array>에서 복사한 요소의 대상인 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>.</xref:System.Array> <xref:System.Array>0부터 시작 하는 인덱스가 있어야 합니다.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "복사가 시작되는 `array`의 인덱스(0부터 시작)입니다."
  overload: Microsoft.Build.BuildEngine.TargetCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.Count
  id: Count
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: Count
  nameWithType: TargetCollection.Count
  fullName: Microsoft.Build.BuildEngine.TargetCollection.Count
  type: Property
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "수를 나타내는 값을 가져옵니다 <xref href=&quot;Microsoft.Build.BuildEngine.Target&quot;> </xref> 개체에 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>합니다."
  remarks: "각 <xref:Microsoft.Build.BuildEngine.Target>컬렉션의에서 개체를 프로젝트의 요소를 나타냅니다.</xref:Microsoft.Build.BuildEngine.Target>"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "정수 값의 수를 나타내는 <xref href=&quot;Microsoft.Build.BuildEngine.Target&quot;> </xref> 컬렉션의 개체입니다."
  overload: Microsoft.Build.BuildEngine.TargetCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.Exists(System.String)
  id: Exists(System.String)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: Exists(String)
  nameWithType: TargetCollection.Exists(String)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.Exists(String)
  type: Method
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "확인 여부를 지정 된 <xref href=&quot;Microsoft.Build.BuildEngine.Target&quot;> </xref> 에 존재는 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>합니다."
  syntax:
    content: public bool Exists (string targetName);
    parameters:
    - id: targetName
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 검색할 대상 요소의 특성입니다."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>하는 경우는 `Target` 요소가 있습니다; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.Build.BuildEngine.TargetCollection.Exists*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: TargetCollection.GetEnumerator()
  fullName: Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "반복 하는 열거자를 가져옵니다는 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>합니다."
  remarks: "이 메서드를 사용 하면 호출자가 사용할 수는 `foreach` C# 언어의 (`for each` 에서 [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]) 개별 <xref:Microsoft.Build.BuildEngine.Target> <xref:Microsoft.Build.BuildEngine.TargetCollection>.</xref:Microsoft.Build.BuildEngine.TargetCollection> 개체</xref:Microsoft.Build.BuildEngine.Target> 를 반복 하려면"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>전체에 대해 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized
  id: IsSynchronized
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: TargetCollection.IsSynchronized
  fullName: Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized
  type: Property
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "에 대 한 액세스 여부를 나타내는 값을 가져옵니다는 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref> 은 동기화 (스레드로부터 안전함)."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>경우에 대 한 액세스는 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref> 됩니다 (스레드로부터 안전함)을 동기화 합니다; 그렇지 않으면 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다. 기본값은 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>합니다."
  overload: Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: TargetCollection.Item(String)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.Item(String)
  type: Property
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "지정 된 가져옵니다 <xref href=&quot;Microsoft.Build.BuildEngine.Target&quot;> </xref> 개체는 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>합니다."
  remarks: "A <xref:Microsoft.Build.BuildEngine.Target>개체가 나타내는 `Target` 는 프로젝트의 요소입니다.</xref:Microsoft.Build.BuildEngine.Target>"
  syntax:
    content: public Microsoft.Build.BuildEngine.Target this[string index] { get; }
    parameters:
    - id: index
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 컬렉션에 있는 대상 요소의 특성입니다."
    return:
      type: Microsoft.Build.BuildEngine.Target
      description: "<xref href=&quot;Microsoft.Build.BuildEngine.Target&quot;> </xref> 포함 된 개체는 <xref:Microsoft.Build.BuildEngine.Target.Name*>속성 값으로 지정 된 <code> index </code>.</xref:Microsoft.Build.BuildEngine.Target.Name*>"
  overload: Microsoft.Build.BuildEngine.TargetCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget(Microsoft.Build.BuildEngine.Target)
  id: RemoveTarget(Microsoft.Build.BuildEngine.Target)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: RemoveTarget(Target)
  nameWithType: TargetCollection.RemoveTarget(Target)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget(Target)
  type: Method
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "지정 된 제거 [대상](~/add/includes/ajax-current-ext-md.md) 프로젝트에서 요소입니다."
  syntax:
    content: public void RemoveTarget (Microsoft.Build.BuildEngine.Target targetToRemove);
    parameters:
    - id: targetToRemove
      type: Microsoft.Build.BuildEngine.Target
      description: "<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> 의 특성은 <xref uid=&quot;langword_csharp_Target&quot; name=&quot;Target&quot; href=&quot;&quot;> </xref> 제거할 요소입니다."
  overload: Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.BuildEngine.TargetCollection.SyncRoot
  id: SyncRoot
  parent: Microsoft.Build.BuildEngine.TargetCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: TargetCollection.SyncRoot
  fullName: Microsoft.Build.BuildEngine.TargetCollection.SyncRoot
  type: Property
  assemblies:
  - Microsoft.Build.Engine
  namespace: Microsoft.Build.BuildEngine
  summary: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체를 가져옵니다는 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>합니다."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체는 <xref href=&quot;Microsoft.Build.BuildEngine.TargetCollection&quot;> </xref>합니다."
  overload: Microsoft.Build.BuildEngine.TargetCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget(System.String)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: AddNewTarget(String)
  nameWithType: TargetCollection.AddNewTarget(String)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget(String)
- uid: Microsoft.Build.BuildEngine.Target
  parent: Microsoft.Build.BuildEngine
  isExternal: false
  name: Target
  nameWithType: Target
  fullName: Microsoft.Build.BuildEngine.Target
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.BuildEngine.TargetCollection.CopyTo(System.Array,System.Int32)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: TargetCollection.CopyTo(Array,Int32)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Build.BuildEngine.TargetCollection.Count
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: Count
  nameWithType: TargetCollection.Count
  fullName: Microsoft.Build.BuildEngine.TargetCollection.Count
- uid: Microsoft.Build.BuildEngine.TargetCollection.Exists(System.String)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: Exists(String)
  nameWithType: TargetCollection.Exists(String)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.Exists(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: TargetCollection.GetEnumerator()
  fullName: Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: TargetCollection.IsSynchronized
  fullName: Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized
- uid: Microsoft.Build.BuildEngine.TargetCollection.Item(System.String)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: Item(String)
  nameWithType: TargetCollection.Item(String)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.Item(String)
- uid: Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget(Microsoft.Build.BuildEngine.Target)
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: RemoveTarget(Target)
  nameWithType: TargetCollection.RemoveTarget(Target)
  fullName: Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget(Target)
- uid: Microsoft.Build.BuildEngine.TargetCollection.SyncRoot
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: SyncRoot
  nameWithType: TargetCollection.SyncRoot
  fullName: Microsoft.Build.BuildEngine.TargetCollection.SyncRoot
- uid: Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: AddNewTarget
  nameWithType: TargetCollection.AddNewTarget
- uid: Microsoft.Build.BuildEngine.TargetCollection.CopyTo*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: CopyTo
  nameWithType: TargetCollection.CopyTo
- uid: Microsoft.Build.BuildEngine.TargetCollection.Count*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: Count
  nameWithType: TargetCollection.Count
- uid: Microsoft.Build.BuildEngine.TargetCollection.Exists*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: Exists
  nameWithType: TargetCollection.Exists
- uid: Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: TargetCollection.GetEnumerator
- uid: Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: TargetCollection.IsSynchronized
- uid: Microsoft.Build.BuildEngine.TargetCollection.Item*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: Item
  nameWithType: TargetCollection.Item
- uid: Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: RemoveTarget
  nameWithType: TargetCollection.RemoveTarget
- uid: Microsoft.Build.BuildEngine.TargetCollection.SyncRoot*
  parent: Microsoft.Build.BuildEngine.TargetCollection
  isExternal: false
  name: SyncRoot
  nameWithType: TargetCollection.SyncRoot
