### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Construction.ProjectElementContainer
  id: ProjectElementContainer
  children:
  - Microsoft.Build.Construction.ProjectElementContainer.AllChildren
  - Microsoft.Build.Construction.ProjectElementContainer.AppendChild(Microsoft.Build.Construction.ProjectElement)
  - Microsoft.Build.Construction.ProjectElementContainer.Children
  - Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed
  - Microsoft.Build.Construction.ProjectElementContainer.Count
  - Microsoft.Build.Construction.ProjectElementContainer.FirstChild
  - Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  - Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  - Microsoft.Build.Construction.ProjectElementContainer.LastChild
  - Microsoft.Build.Construction.ProjectElementContainer.PrependChild(Microsoft.Build.Construction.ProjectElement)
  - Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren
  - Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)
  langs:
  - csharp
  name: ProjectElementContainer
  nameWithType: ProjectElementContainer
  fullName: Microsoft.Build.Construction.ProjectElementContainer
  type: Class
  summary: "프로젝트 구성 요소에 대 한 추상 컨테이너 클래스를 제공합니다."
  syntax:
    content: 'public abstract class ProjectElementContainer : Microsoft.Build.Construction.ProjectElement'
  inheritance:
  - System.Object
  - Microsoft.Build.Construction.ProjectElement
  implements: []
  inheritedMembers:
  - Microsoft.Build.Construction.ProjectElement.AllParents
  - Microsoft.Build.Construction.ProjectElement.Condition
  - Microsoft.Build.Construction.ProjectElement.ConditionLocation
  - Microsoft.Build.Construction.ProjectElement.ContainingProject
  - Microsoft.Build.Construction.ProjectElement.Label
  - Microsoft.Build.Construction.ProjectElement.LabelLocation
  - Microsoft.Build.Construction.ProjectElement.Location
  - Microsoft.Build.Construction.ProjectElement.NextSibling
  - Microsoft.Build.Construction.ProjectElement.Parent
  - Microsoft.Build.Construction.ProjectElement.PreviousSibling
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.AllChildren
  id: AllChildren
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: AllChildren
  nameWithType: ProjectElementContainer.AllChildren
  fullName: Microsoft.Build.Construction.ProjectElementContainer.AllChildren
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "모든 자식 요소에 대 한 재귀 깊이 우선 열거자를 가져옵니다."
  remarks: "재귀 있기 때문입니다 프로젝트 요소 컨테이너 자체는 자식 프로젝트 요소 컨테이너가 포함 될 수 있습니다."
  syntax:
    content: public System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement> AllChildren { get; }
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
      description: "모든 자식 요소에 대 한 재귀 깊이 우선 열거자를 반환합니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.AllChildren*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.AppendChild(Microsoft.Build.Construction.ProjectElement)
  id: AppendChild(Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: AppendChild(ProjectElement)
  nameWithType: ProjectElementContainer.AppendChild(ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.AppendChild(ProjectElement)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "추가 <code> child </code> 이 프로젝트 컨테이너의 마지막 자식 요소입니다."
  remarks: "이 프로젝트 컨테이너 부모로 지정 되어 있지 않거나 경우 예외를 throw는 `child` 요소 부모가 이미 또는 경우에는 `child` 요소가 다른 <xref:Microsoft.Build.Construction.ProjectRootElement>.</xref:Microsoft.Build.Construction.ProjectRootElement> 에서 만들어졌으면"
  syntax:
    content: public void AppendChild (Microsoft.Build.Construction.ProjectElement child);
    parameters:
    - id: child
      type: Microsoft.Build.Construction.ProjectElement
      description: "프로젝트 요소를 추가할 수 있습니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.AppendChild*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.Children
  id: Children
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: Children
  nameWithType: ProjectElementContainer.Children
  fullName: Microsoft.Build.Construction.ProjectElementContainer.Children
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "모든 자식 요소를 가져옵니다."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Construction.ProjectElement> Children { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Construction.ProjectElement}
      description: "모든 자식 요소를 반환합니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.Children*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed
  id: ChildrenReversed
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: ChildrenReversed
  nameWithType: ProjectElementContainer.ChildrenReversed
  fullName: Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "마지막 자식에서 시작 하는 모든 자식 요소를 가져옵니다."
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Construction.ProjectElement> ChildrenReversed { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Construction.ProjectElement}
      description: "마지막 자식에서 시작 하는 모든 자식 요소를 반환 합니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.Count
  id: Count
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: Count
  nameWithType: ProjectElementContainer.Count
  fullName: Microsoft.Build.Construction.ProjectElementContainer.Count
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "자식 요소의 수를 가져옵니다."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "자식 요소 수를 반환합니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.Count*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.FirstChild
  id: FirstChild
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: FirstChild
  nameWithType: ProjectElementContainer.FirstChild
  fullName: Microsoft.Build.Construction.ProjectElementContainer.FirstChild
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "첫 번째 자식 요소를 가져옵니다."
  remarks: "사용 하 여 <xref:Microsoft.Build.Construction.ProjectElementContainer.PrependChild%2A>이 속성을 초기화 합니다.</xref:Microsoft.Build.Construction.ProjectElementContainer.PrependChild%2A>"
  syntax:
    content: public Microsoft.Build.Construction.ProjectElement FirstChild { get; }
    return:
      type: Microsoft.Build.Construction.ProjectElement
      description: "첫 번째 자식 요소를 반환합니다. 자식 요소가 없는 경우 null을 반환 합니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.FirstChild*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  id: InsertAfterChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: InsertAfterChild(ProjectElement,ProjectElement)
  nameWithType: ProjectElementContainer.InsertAfterChild(ProjectElement,ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild(ProjectElement,ProjectElement)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "삽입의 <code> child </code> 요소 뒤의 <code> reference </code> 요소입니다."
  remarks: "하는 경우는 `reference` 요소 null 이면이 메서드는 <xref:Microsoft.Build.Construction.ProjectElementContainer.PrependChild%2A>.</xref:Microsoft.Build.Construction.ProjectElementContainer.PrependChild%2A>       이 프로젝트 컨테이너 부모로 지정 되어 있지 않거나 경우 예외를 throw는 `child` 요소 부모가 이미 또는 경우에는 `child` 요소가 다른에서 만들어졌으면 <xref:Microsoft.Build.Construction.ProjectRootElement>, 또는 경우에는 `reference` 요소는이 프로젝트 컨테이너의 자식이 아닙니다.</xref:Microsoft.Build.Construction.ProjectRootElement>"
  syntax:
    content: public void InsertAfterChild (Microsoft.Build.Construction.ProjectElement child, Microsoft.Build.Construction.ProjectElement reference);
    parameters:
    - id: child
      type: Microsoft.Build.Construction.ProjectElement
      description: "삽입할 프로젝트 요소입니다."
    - id: reference
      type: Microsoft.Build.Construction.ProjectElement
      description: "프로젝트의 요소는 뒤에 삽입할 수입니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  id: InsertBeforeChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: InsertBeforeChild(ProjectElement,ProjectElement)
  nameWithType: ProjectElementContainer.InsertBeforeChild(ProjectElement,ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild(ProjectElement,ProjectElement)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "삽입 된 <code> child </code> 하기 전에 요소는 <code> reference </code> 요소입니다."
  remarks: "하는 경우는 `reference` 요소 null 이면이 메서드는 <xref:Microsoft.Build.Construction.ProjectElementContainer.AppendChild%2A>.</xref:Microsoft.Build.Construction.ProjectElementContainer.AppendChild%2A>       이 프로젝트 컨테이너 부모로 지정 되어 있지 않거나 경우 예외를 throw는 `child` 요소 부모가 이미 또는 경우에는 `child` 요소가 다른에서 만들어졌으면 <xref:Microsoft.Build.Construction.ProjectRootElement>, 또는 경우에는 `reference` 요소는이 프로젝트 컨테이너의 자식이 아닙니다.</xref:Microsoft.Build.Construction.ProjectRootElement>"
  syntax:
    content: public void InsertBeforeChild (Microsoft.Build.Construction.ProjectElement child, Microsoft.Build.Construction.ProjectElement reference);
    parameters:
    - id: child
      type: Microsoft.Build.Construction.ProjectElement
      description: "삽입할 프로젝트 요소입니다."
    - id: reference
      type: Microsoft.Build.Construction.ProjectElement
      description: "프로젝트의 요소는 앞에 삽입 수입니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.LastChild
  id: LastChild
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: LastChild
  nameWithType: ProjectElementContainer.LastChild
  fullName: Microsoft.Build.Construction.ProjectElementContainer.LastChild
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "마지막 자식 요소를 가져옵니다."
  remarks: "사용 하 여 <xref:Microsoft.Build.Construction.ProjectElementContainer.AppendChild%2A>이 속성을 초기화 합니다.</xref:Microsoft.Build.Construction.ProjectElementContainer.AppendChild%2A>"
  syntax:
    content: public Microsoft.Build.Construction.ProjectElement LastChild { get; }
    return:
      type: Microsoft.Build.Construction.ProjectElement
      description: "마지막 자식 요소를 반환합니다. 자식 요소가 없는 경우 null을 반환 합니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.LastChild*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.PrependChild(Microsoft.Build.Construction.ProjectElement)
  id: PrependChild(Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: PrependChild(ProjectElement)
  nameWithType: ProjectElementContainer.PrependChild(ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.PrependChild(ProjectElement)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "앞에 추가 된 <code> child </code> 이 프로젝트 컨테이너의 첫 번째 자식 요소입니다."
  remarks: "이 프로젝트 컨테이너 부모로 지정 되어 있지 않거나 경우 예외를 throw는 `child` 요소 부모가 이미 또는 경우에는 `child` 요소가 다른 <xref:Microsoft.Build.Construction.ProjectRootElement>.</xref:Microsoft.Build.Construction.ProjectRootElement> 에서 만들어졌으면"
  syntax:
    content: public void PrependChild (Microsoft.Build.Construction.ProjectElement child);
    parameters:
    - id: child
      type: Microsoft.Build.Construction.ProjectElement
      description: "프로젝트 요소 앞입니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.PrependChild*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren
  id: RemoveAllChildren
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: RemoveAllChildren()
  nameWithType: ProjectElementContainer.RemoveAllChildren()
  fullName: Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "이 프로젝트 컨테이너에서 있는 경우 모든 자식을 제거 합니다."
  remarks: "이 방법으로 자식을 열거 하는 동안 수정 하지 않아도 안전 합니다."
  syntax:
    content: public void RemoveAllChildren ();
    parameters: []
  overload: Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)
  id: RemoveChild(Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  langs:
  - csharp
  name: RemoveChild(ProjectElement)
  nameWithType: ProjectElementContainer.RemoveChild(ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(ProjectElement)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Construction
  summary: "제거는 <code> child </code> 에서이 프로젝트 컨테이너 요소입니다."
  remarks: "자식 요소가 고 현재이 프로젝트 컨테이너에 의해 부모로 되지 않은 경우 예외를 throw 합니다. 자식 이러한 방식으로 열거 하는 동안 제거 해도 됩니다."
  syntax:
    content: public void RemoveChild (Microsoft.Build.Construction.ProjectElement child);
    parameters:
    - id: child
      type: Microsoft.Build.Construction.ProjectElement
      description: "제거할 프로젝트 요소입니다."
  overload: Microsoft.Build.Construction.ProjectElementContainer.RemoveChild*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.Build.Construction.ProjectElement
  isExternal: false
  name: Microsoft.Build.Construction.ProjectElement
- uid: Microsoft.Build.Construction.ProjectElementContainer.AllChildren
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: AllChildren
  nameWithType: ProjectElementContainer.AllChildren
  fullName: Microsoft.Build.Construction.ProjectElementContainer.AllChildren
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectElement>
  nameWithType: IEnumerable<ProjectElement>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Construction.ProjectElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Construction.ProjectElement
    name: ProjectElement
    nameWithType: ProjectElement
    fullName: ProjectElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Construction.ProjectElementContainer.AppendChild(Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: AppendChild(ProjectElement)
  nameWithType: ProjectElementContainer.AppendChild(ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.AppendChild(ProjectElement)
- uid: Microsoft.Build.Construction.ProjectElementContainer.Children
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: Children
  nameWithType: ProjectElementContainer.Children
  fullName: Microsoft.Build.Construction.ProjectElementContainer.Children
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Construction.ProjectElement}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectElement>
  nameWithType: ICollection<ProjectElement>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Construction.ProjectElement>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Construction.ProjectElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Construction.ProjectElement
    name: ProjectElement
    nameWithType: ProjectElement
    fullName: ProjectElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: ChildrenReversed
  nameWithType: ProjectElementContainer.ChildrenReversed
  fullName: Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed
- uid: Microsoft.Build.Construction.ProjectElementContainer.Count
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: Count
  nameWithType: ProjectElementContainer.Count
  fullName: Microsoft.Build.Construction.ProjectElementContainer.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Build.Construction.ProjectElementContainer.FirstChild
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: FirstChild
  nameWithType: ProjectElementContainer.FirstChild
  fullName: Microsoft.Build.Construction.ProjectElementContainer.FirstChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: InsertAfterChild(ProjectElement,ProjectElement)
  nameWithType: ProjectElementContainer.InsertAfterChild(ProjectElement,ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild(ProjectElement,ProjectElement)
- uid: Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild(Microsoft.Build.Construction.ProjectElement,Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: InsertBeforeChild(ProjectElement,ProjectElement)
  nameWithType: ProjectElementContainer.InsertBeforeChild(ProjectElement,ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild(ProjectElement,ProjectElement)
- uid: Microsoft.Build.Construction.ProjectElementContainer.LastChild
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: LastChild
  nameWithType: ProjectElementContainer.LastChild
  fullName: Microsoft.Build.Construction.ProjectElementContainer.LastChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.PrependChild(Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: PrependChild(ProjectElement)
  nameWithType: ProjectElementContainer.PrependChild(ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.PrependChild(ProjectElement)
- uid: Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: RemoveAllChildren()
  nameWithType: ProjectElementContainer.RemoveAllChildren()
  fullName: Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren()
- uid: Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: RemoveChild(ProjectElement)
  nameWithType: ProjectElementContainer.RemoveChild(ProjectElement)
  fullName: Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(ProjectElement)
- uid: Microsoft.Build.Construction.ProjectElementContainer.AllChildren*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: AllChildren
  nameWithType: ProjectElementContainer.AllChildren
- uid: Microsoft.Build.Construction.ProjectElementContainer.AppendChild*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: AppendChild
  nameWithType: ProjectElementContainer.AppendChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.Children*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: Children
  nameWithType: ProjectElementContainer.Children
- uid: Microsoft.Build.Construction.ProjectElementContainer.ChildrenReversed*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: ChildrenReversed
  nameWithType: ProjectElementContainer.ChildrenReversed
- uid: Microsoft.Build.Construction.ProjectElementContainer.Count*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: Count
  nameWithType: ProjectElementContainer.Count
- uid: Microsoft.Build.Construction.ProjectElementContainer.FirstChild*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: FirstChild
  nameWithType: ProjectElementContainer.FirstChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.InsertAfterChild*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: InsertAfterChild
  nameWithType: ProjectElementContainer.InsertAfterChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.InsertBeforeChild*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: InsertBeforeChild
  nameWithType: ProjectElementContainer.InsertBeforeChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.LastChild*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: LastChild
  nameWithType: ProjectElementContainer.LastChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.PrependChild*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: PrependChild
  nameWithType: ProjectElementContainer.PrependChild
- uid: Microsoft.Build.Construction.ProjectElementContainer.RemoveAllChildren*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: RemoveAllChildren
  nameWithType: ProjectElementContainer.RemoveAllChildren
- uid: Microsoft.Build.Construction.ProjectElementContainer.RemoveChild*
  parent: Microsoft.Build.Construction.ProjectElementContainer
  isExternal: false
  name: RemoveChild
  nameWithType: ProjectElementContainer.RemoveChild
